<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/</link>
    <description>Recent content on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <lastBuildDate>Sun, 01 Sep 2024 15:00:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VSCode: 使用 LiveShare 來即時線上協作吧</title>
      <link>https://igouist.github.io/post/2024/09/vscode-live-share/</link>
      <pubDate>Sun, 01 Sep 2024 15:00:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2024/09/vscode-live-share/</guid>
      <description>&lt;p&gt;在 VSCode 躺了一段時間的 LiveShare 終於派上了用場，這邊就簡單記錄一篇，方便以後推坑的時候用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8qQxzrk.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;當時的情況是這樣的：在風和日麗的某個下午，我和女友去客美多（Komeda）喝超讚的蜂蜜冰咖啡，順便 &lt;del&gt;看著她加班&lt;/del&gt; 悠閒地 Coding。&lt;/p&gt;
&lt;p&gt;但麻煩的是，我們倆的座位是面對面的兩人座。所以當我們要邊看程式碼邊溝通時，得先把筆電轉 180 度，或是起身走到另一側，非常不方便&lt;/p&gt;
&lt;p&gt;就在來回走了幾趟 &lt;del&gt;漸漸不耐煩&lt;/del&gt; 之後，突然想起了香香的 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&#34;&gt;LiveShare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LiveShare 可以讓我們在 VSCode 裡即時線上協作，一起編輯同一份程式碼&lt;/strong&gt;。&lt;br/&gt;並且也能看見對方游標的動作、在文件上留言互動等等&lt;/p&gt;
&lt;p&gt;當我們正在 WFH，或是像這種懶得走過去(?)，但又想要和朋朋們來場 Pair 的時候，LiveShare 就可以派上用場了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：Visual Studio 應該已經內建 LiveShare，&lt;br/&gt;可以從「檔案 &amp;gt; 開始 Live Share 工作階段」來開啟&lt;/p&gt;
&lt;p&gt;而 Jetbrains 的朋朋，&lt;br/&gt;請左轉使用 &lt;a href=&#34;https://www.jetbrains.com/code-with-me/&#34;&gt;Code with me&lt;/a&gt;，同樣也能線上開嚕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;馬上來介紹一下安裝和基本的使用方式吧。&lt;/p&gt;
&lt;p&gt;首先第一步當然是先安裝擴充套件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zXoTEUA.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;安裝完畢之後，在左下角應該就能看到 Live Share 的圖示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tFVEzq6.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;點擊之後就會開始分享囉，也會很貼心地幫你複製邀請連結：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2Q4WycJ.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果想再複製一次邀請連結，或是想要停止分享，就再戳一次左下角的 Live Share 圖示就可以了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DwxhLDP.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;受邀者加入就可以開始線上協作囉！&lt;/p&gt;
&lt;p&gt;過程中可以看見對方游標所在的位置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TPQAYSd.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;同時在右上角也會有一些功能可以使用，例如追隨對方的視角，還有直接把對方畫面拉過來的大聲公：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2axqUwE.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fxcwjFK.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;除此之外，如果不方便通話，也可以留言討論（但大多時候還是邊通話邊改比較方便啦）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NslgcUv.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;基本上有這些功能就可以搞定大部份 Pair 的場景了，有興趣的朋朋也可以試玩看看，&lt;br/&gt;線上協作，簡單方便，阿彌陀佛。&lt;/p&gt;
&lt;p&gt;那麼，今天的分享就到這邊。又成功水了一篇，下篇文章見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 AddTypeMap 調整型別映射，讓 Dapper 乖乖寫入 0001-01-01 到 datetime2</title>
      <link>https://igouist.github.io/post/2024/08/dapper-datetime-0001-01-01/</link>
      <pubDate>Sun, 25 Aug 2024 15:20:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2024/08/dapper-datetime-0001-01-01/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YLnFkUH.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這週忙著打黑悟空，簡單記一下前陣子同事遇到的一個場景：&lt;/p&gt;
&lt;p&gt;由於曆法的關係，SQL Server 的 datetime 範圍只能從 1753-01-01 開始。&lt;br/&gt;如果我們要寫入 0001-01-01 進去的話就會報錯&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SqlDateTime overflow. Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;補充：關於曆法的部份，有興趣的朋友可以參考這篇：&lt;br/&gt;&lt;a href=&#34;https://sharedderrick.blogspot.com/2009/09/blog-post.html&#34;&gt;淺談：消失的日期，以關聯式資料庫的日期資料類型為例 - 德瑞克：SQL Server 學習筆記&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這時候通常去把資料表欄位改成香香的 datetime2 就可以搞定，爽爽寫入 0001-01-01。&lt;/p&gt;
&lt;p&gt;但如果我們正在使用 Dapper，預設會把 C# 的 DateTime 映射到 SQL Server 的 datetime，所以還是會寫入失敗。&lt;/p&gt;
&lt;p&gt;這時候我們就需要明確地請 Dapper 幫我們使用 datetime2 來進行處理。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果傳遞的只是某個參數，使用 &lt;code&gt;DbType&lt;/code&gt; 就行了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; parameters = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DynamicParameters();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@Birthday&amp;#34;&lt;/span&gt;, birthday, DbType.DateTime2);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但如果傳遞的是某個 Model 裡的特定欄位呢？例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HistoricalEvent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Guid EventId { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }       &lt;span style=&#34;color:#75715e&#34;&gt;// 歷史事件的唯一識別碼&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Description { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; } &lt;span style=&#34;color:#75715e&#34;&gt;// 歷史事件的描述&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime EventDate { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; } &lt;span style=&#34;color:#75715e&#34;&gt;// 歷史事件發生的日期, 可能早於 1753 年！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這種時候就可以使用 AddTypeMap 來調整一下 Dapper 的映射型別。&lt;/p&gt;
&lt;p&gt;首先確認 DB 的欄位已經修改為 datetime2，接著我們就可以使用 &lt;code&gt;SqlMapper.AddTypeMap&lt;/code&gt; 來幫 Dapper 加上一些小小的型別轉換：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 粗暴地添加 TypeMap，讓 Dapper 知道 DateTime 現在對應到 DB 的 datetime2 了&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 等等 Dapper 才會乖乖地把 0001/1/1 寫進去= =&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SqlMapper.AddTypeMap(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(DateTime), System.Data.DbType.DateTime2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 示範用資料&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; historicalEvent = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HistoricalEvent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    EventId = Guid.NewGuid(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;公曆紀元開始&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    EventDate = DateTime.Parse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0001-01-01&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sql = 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    insert into HistoricalEvents (
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        EventId, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Description, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        EventDate)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    values(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        @EventId, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        @Description, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        @EventDate); 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; conn = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Connection)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; conn.ExecuteAsync(sql, historicalEvent);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result.Dump();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;備註：因為我們改的是靜態方法裡的全域設定，所以確定要調整型別映射的話，可以把 &lt;code&gt;AddTypeMap&lt;/code&gt; 移動到註冊的地方，例如 Program。&lt;/p&gt;
&lt;p&gt;方便後續維護的時候好管理，也避免其他同事不知道你偷改，減少被扁的醫療費用。&lt;/p&gt;
&lt;p&gt;此外，雖然微軟把拔也&lt;a href=&#34;https://learn.microsoft.com/zh-tw/sql/t-sql/data-types/datetime-transact-sql?view=sql-server-ver16&#34;&gt;建議改用 dateTime2&lt;/a&gt;，但如果你會想先了解這兩者的不同（例如精度）再進行處理，可以參考以下的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialsteacher.com/articles/datetime-vs-datetime2-in-sqlserver&#34;&gt;DateTime vs DateTime2 in Sql Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/ricos-note/datetime-vs-datetime2-55d0e403509c&#34;&gt;Datetime VS Datetime2 | by RiCo 技術農場 | RiCosNote | Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;大多數時候，我們不太需要寫入 0001-01-01，甚至 1753 年之前的日期&lt;br/&gt;（像是日期尚未決定之類的場合，用 Null 表示會貼切）&lt;/p&gt;
&lt;p&gt;但夜路走多了，總會遇到 0001-01-01。像是處理古老的遺留代碼、業務邏輯必須區分「還沒設定」和「沒有資料」的狀況，又或是像上面的例子，西元的開始真的就在那一天，這種時候就沒辦法了。&lt;/p&gt;
&lt;p&gt;因此順手筆記下來，以後再回來抄，阿彌陀佛。&lt;/p&gt;
&lt;h2 id=&#34;延伸閱讀&#34;&gt;延伸閱讀&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.darkthread.net/blog/sql-datetime2/&#34;&gt;SQL DateTime 型別陷阱 - 黑暗執行緒&lt;/a&gt;：另一個將 C# dateTime 映射到 SQL datetime2 的例子，用來解決 SQL datetime 在毫秒的精度問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://riptutorial.com/dapper/example/1199/custom-mappings&#34;&gt;Dapper.NET Tutorial =&amp;gt; Custom Mapping&lt;/a&gt;：需要自製 Mapping 的時候參考&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11231614/how-can-i-map-net-datetime-to-database-datetime2-using-dapper-to-avoid-sqldate&#34;&gt;c# - How can I map .NET DateTime to database DateTime2 using Dapper to avoid &amp;ldquo;SqlDateTime overflow&amp;rdquo; exception? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/51879979/changing-the-dapper-mapping-for-net-datetime-to-use-dbtype-datetime2-and-reinst&#34;&gt;c# - Changing the Dapper mapping for .net DateTime to use DbType DateTime2 and reinstating it back again - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.darkthread.net/blog/dapper-oracle-datetime-issue/&#34;&gt;Dapper＋Oracle 之 DateTime 注意事項-黑暗執行緒&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>.Net: 使用 FeatureManagement 套件來實作 Feature Flag 功能切換吧</title>
      <link>https://igouist.github.io/post/2024/08/dotnet-feature-flag-and-feature-management/</link>
      <pubDate>Sun, 18 Aug 2024 13:00:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2024/08/dotnet-feature-flag-and-feature-management/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/926KRip.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;在做上一篇 &lt;a href=&#34;https://igouist.github.io/post/2024/08/dotnet-ioptions&#34;&gt;IOptions&lt;/a&gt; 的筆記時，剛好看到 FeatureManagement 這香東西。&lt;br/&gt;馬上來收錄一篇。順便也簡單整理一下 Feature Flag (= Feature Toggle) 的介紹。&lt;/p&gt;
&lt;h2 id=&#34;認識一下-feature-flag&#34;&gt;認識一下 Feature Flag&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本部落格秉持著「簡單、友善、我好菜」的精神，按照慣例先簡單介紹一下&lt;br/&gt;
已經知道的朋友就可以跳過這個小節，直接前往 #環境準備 囉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假設我們原本有 Old 邏輯：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Old();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;天庭傳來諭令，要我們改成 New 邏輯。這簡單，我們就把 Old 砍掉，換成 New。非常自然，改完就佈版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;隔天，天庭又傳來諭令，New 需要調整一下，先不要了&lt;br/&gt;
現在我們又需要把 New 邏輯砍掉，讓 Old 邏輯回來。&lt;br/&gt;
簡單，但看來我們得再上一版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Old();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// New();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再隔天，大家可能猜到天庭又要幹嘛了，總之又上了一版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Old();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此往復三萬八千次，工程師終於受不了了：「俺老孫每天在這切換 Old 跟 New，改完還得佈版，每天搞這些就飽了，我滴媽呀，不幹了」&lt;/p&gt;
&lt;p&gt;就在老孫關燈走人的那一瞬間，突然靈光一現：等等，&lt;strong&gt;俺加個開關還不行嗎？&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (NewFunctionEnabled())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    New();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Old();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;現在只要把這個開關放到外面，別寫死在程式碼裡。丟去什麼 appsettings.json、Config、資料庫、ini、東海龍王廟，隨便&lt;/p&gt;
&lt;p&gt;總之丟去個不用佈板就能直接修改的地方，不就完事了嗎？&lt;/p&gt;
&lt;p&gt;現在程式碼就像盯著旗手的士兵們，旗手舉了藍色，他們就往左跑；旗手舉了紅色，他們就往右跑。老孫只要把設定給改了，就能一鍵切換邏輯，好不自在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;沒錯，老孫剛剛發現了 Feature Flag&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有了這個開關，除了開開關關(?)，現在也可以做到更多事情了。&lt;/p&gt;
&lt;p&gt;例如新功能想先隨機讓一些使用者踩看看，馬上在這個 &lt;code&gt;NewFunctionEnabled()&lt;/code&gt; 開關後面加點料，讓它隨機打開、隨機關起來；&lt;/p&gt;
&lt;p&gt;想讓合作好的客戶搶先使用，馬上在這個 &lt;code&gt;NewFunctionEnabled()&lt;/code&gt; 開關後面偷塞一張白名單：&lt;br/&gt;你聽好了，看到這些人就幫我按藍色的按鈕，門就會打開&lt;/p&gt;
&lt;p&gt;因為我們把開關抽出去了，代表判斷條件和執行邏輯之間的耦合被我們給降低了，&lt;br/&gt;
這樣開關的彈性就變高了，我們也就可以針對開關內部的邏輯動手動腳了&lt;/p&gt;
&lt;p&gt;老孫把開關弄出來之後，用得挺爽。一時之間，花果山分部的工程師紛紛效仿老孫，&lt;br/&gt;用這個&lt;strong&gt;香香的 Feature Flag 來從外部動態切換程式碼邏輯&lt;/strong&gt;，好不爽快。
&lt;br/&gt;吱聲此起彼落，可謂是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;兩條邏輯改又改，改完還要等佈版&lt;br/&gt;
有了 Feature Flag，切個開關就下班&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至於後來開關越埋越多，系統服務七十二變。工程師老孫被迫跟著唐經理去聽研討會，好好學習怎麼管理這些 Feature Flag。還弄了些儀表板、過期時間等等，那又是另一個故事了…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;故事說到這裡，雖然例子粗暴一點，但朋朋們應該對 Feature Flag 在幹嘛有點了解了（吧？）&lt;/p&gt;
&lt;p&gt;如果想要進一步認識 Feature Flag，這邊也準備了一些推薦閱讀。&lt;/p&gt;
&lt;p&gt;例如 Feature Flag 還可以用在哪、分成哪些種類；&lt;br/&gt;
兩個 Flag 共用到同一段 Code 怎辦；&lt;br/&gt;
PM 朋朋們又是怎麼運用 Feature Flag 的……&lt;/p&gt;
&lt;p&gt;都丟在下面這團，提供給有興趣的朋朋們：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/feature-toggles.html&#34;&gt;Feature Toggles (aka Feature Flags) - martinFowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mileschou.me/blog/feature-toggle-faq/&#34;&gt;Feature Toggle 應用常見問題 | Miles&amp;rsquo; Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/3pm-lab/product-beta-release-planning-and-feature-flags-implementation-1f7673007d23&#34;&gt;產品上線規劃：Beta Release、Feature Flags 實作經驗與工具分享 | by Anne Hsiao | 3PM LAB 產品三眼怪實驗室 | Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://darrensim.com/2018/introduction-to-feature-toggles-and-implementation-best-practices/&#34;&gt;Introduction to Feature Toggles and Implementation Best Practices - Darren Sim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：雖然 Feature Flag 這麼香，但如果開關沒有好好管理，&lt;br/&gt;不小心開到不該開的程式碼邏輯會發生什麼事呢？&lt;/p&gt;
&lt;p&gt;泡杯茶，看看實例吧：&lt;a href=&#34;https://dougseven.com/2014/04/17/knightmare-a-devops-cautionary-tale/&#34;&gt;Knightmare: A DevOps Cautionary Tale – Doug Seven&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：Feature Toggle 常常跟主幹開發（Trunk-based Development）一起出現？&lt;/p&gt;
&lt;p&gt;蠻常聽到這個問題的，這邊也簡單筆記一下，沒有採用主幹開發的朋朋可以跳過這小段&lt;/p&gt;
&lt;p&gt;（想認識 Trunk-based Development 的朋朋們，&lt;br/&gt;　可以右轉去 &lt;a href=&#34;https://tw.trunkbaseddevelopment.com/&#34;&gt;TrunkBasedDevelopment.com&lt;/a&gt;，感謝協助中文化的大大們）&lt;/p&gt;
&lt;p&gt;回到問題，我的理解是這樣：&lt;/p&gt;
&lt;p&gt;即使我們採用了主幹開發，持續把變更交付到主幹分支上，把大家的 GAP 降到最低，&lt;br/&gt;但一定還是會遇到需要做很久才做得完的功能&lt;/p&gt;
&lt;p&gt;我們不想要拉一條 feature 分支，放著漸漸就跟主幹脫節，到時候合併又要大爆炸&lt;br/&gt;
而是想要把這些程式碼持續地整合到我們的程式庫，這樣就能及早發現問題和解除衝突&lt;br/&gt;
可是如果粗暴地合併進去，開發中的功能就會暴露出來…怎麼辦呢？&lt;/p&gt;
&lt;p&gt;這種時候，如果有一個開關，來幫助我們關閉尚未完工的功能、打開即將交付的功能。我們就能整合現有的程式碼，也能提早知道合併會不會炸爛其他功能…&lt;/p&gt;
&lt;p&gt;很方便對吧？ Feature Toggle 就跳出來啦。香。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;環境準備microsoftfeaturemanagement&#34;&gt;環境準備：Microsoft.FeatureManagement&lt;/h2&gt;
&lt;p&gt;好，我們前面簡單介紹了一下 Feature Flag，接著就進入實作階段。&lt;/p&gt;
&lt;p&gt;要實現 Feature Flag 的方法有很多，例如我之前都是用&lt;a href=&#34;https://igouist.github.io/post/2024/08/dotnet-ioptions&#34;&gt;上一篇&lt;/a&gt;提到的 IOption 直接從 appsettings.json 把 true/false 讀出來用&lt;/p&gt;
&lt;p&gt;而這篇我們要來使用香香的 FeatureManagement 來幫我們實現 Feature Flag 的操作。&lt;/p&gt;
&lt;p&gt;首先，我們要先搞到 Microsoft.FeatureManagement.AspNetCore 這個套件：&lt;br/&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.FeatureManagement.AspNetCore&#34;&gt;NuGet Gallery | Microsoft.FeatureManagement.AspNetCore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接著讓我們把它給註冊到我們的 Program.cs：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Program.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 環境準備：Microsoft.FeatureManagement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 加入 Feature Flag 功能，預設會抓 appsettings.json 中的 &amp;#34;FeatureManagement&amp;#34; 節點&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddFeatureManagement();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 如果想要自訂 Feature Flag 在 appsettings.json 裡的位置，可以這樣寫&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//builder.Services.AddFeatureManagement(builder.Configuration.GetSection(&amp;#34;CustomFeatureManagement&amp;#34;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後為了後續的示範，先開好一組 Controller：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Controllers/DemoController.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 示範 Feature Flag 的使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ApiController]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Route(&amp;#34;[controller]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemoController&lt;/span&gt; : ControllerBase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; ILogger&amp;lt;DemoController&amp;gt; _logger;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IFeatureManager _featureManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DemoController(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ILogger&amp;lt;DemoController&amp;gt; logger, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IFeatureManager featureManager)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _logger = logger;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _featureManager = featureManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣環境就搞定了，讓我們開始第一組實作吧！&lt;/p&gt;
&lt;h2 id=&#34;實作使用-isenabledasync-拿到-feature-flag-的值&#34;&gt;實作：使用 IsEnabledAsync 拿到 Feature Flag 的值&lt;/h2&gt;
&lt;p&gt;假設我們跟上面的老孫一樣：翻寫了一條新版邏輯。&lt;br/&gt;如果開關被打開了，就走新版的路線；關著的話就維持舊版&lt;/p&gt;
&lt;p&gt;要達成上面的條件，我們會&lt;strong&gt;需要直接取得某個 Flag 的開關狀態，&lt;br/&gt;這時候就可以使用 &lt;code&gt;IsEnabledAsync&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先到 appsettings.json 加上我們的 Feature Flag，先叫做 &lt;code&gt;NewLogicEnabled&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// appsettings.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FeatureManagement&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/FzIALd8.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;為了後面方便使用，我習慣先建一組簡單的 Const 來管理這些 Feature Flag：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Flags/FeatureFlags.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FeatureFlags&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 這邊的名稱要和 appsettings.json 裡 FeatureManagement 底下的設定一樣&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; NewLogicEnabled = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;讓我們加上這次測試用的 API，並且使用 IsEnabledAsync 來抓取指定的 Flag 狀態：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Controllers/DemoController.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Feature Flag 可以讓我們從設定檔中讀取特定的開關&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 並且在程式中根據這些開關來決定是否啟用某些功能&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HttpGet(&amp;#34;IsEnabledAsync&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; IsFeatureEnabled()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Demo 1: 使用 IsEnabledAsync 拿到 Feature Flag 的值 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isEnabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; _featureManager.IsEnabledAsync(FeatureFlags.NewLogicEnabled);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; isEnabled 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;香香的新版邏輯已啟用。&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新版邏輯尚未啟用，繼續使用臭臭的舊版邏輯。&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/O1uxn9W.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;現在讓我們直接把 appsettings.json 裡的 &lt;code&gt;NewLogicEnabled&lt;/code&gt; 改成 false（只要存檔就好了，不需要重啟服務），並且再呼叫一次 API：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WTgcapM.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;來張動圖看看成果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9elZfT7.gif&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;搞定，收工下班。&lt;/p&gt;
&lt;h2 id=&#34;實作使用-featuregate-來啟用和停用-api&#34;&gt;實作：使用 FeatureGate 來啟用和停用 API&lt;/h2&gt;
&lt;p&gt;除了根據開關決定要執行哪條路線的邏輯以外，我們也常常根據開關決定某些功能是不是要開放&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果我們需要根據 Feature Flag 來決定是否啟用某支 API，就可以使用 &lt;code&gt;FeatureGate&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先讓我們加上第二組 Flag，這次叫做 &lt;code&gt;NiceApiEnabled&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// appsettings.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FeatureManagement&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;NiceApiEnabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Flags/FeatureFlags.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FeatureFlags&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; NewLogicEnabled = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 新增 NiceApiEnabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; NiceApiEnabled = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NiceApiEnabled&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著就來替我們的 API 掛上 FeatureGate 試試：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Controllers/DemoController.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HttpGet(&amp;#34;FeatureGate&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[FeatureGate(FeatureFlags.NiceApiEnabled)]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 讓 FeatureGate 去檢查我們的 NiceApiEnabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; FeatureGate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Demo 2: 使用 FeatureGate 來啟用和停用 API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果 NiceApiEnabled 是關閉的，這個方法不會被執行，會直接回傳 404&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;這是一個很棒的 API，只有你看得到。&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;NiceApiEnabled&lt;/code&gt; 是 true 的時候，可以正常呼叫到 API：
&lt;img src=&#34;https://i.imgur.com/2el7jVT.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;而當 &lt;code&gt;NiceApiEnabled&lt;/code&gt; 是 false 的時候，這支 API 就 不存在了…
&lt;img src=&#34;https://i.imgur.com/BV3aomM.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;實作使用-featurefilter-自訂篩選條件隨機抽取使用者&#34;&gt;實作：使用 FeatureFilter 自訂篩選條件、隨機抽取使用者&lt;/h2&gt;
&lt;p&gt;前面我們示範了怎麼看開關狀態，以及根據開關把 API 給 Ban 了。接著來點場景應用吧。&lt;/p&gt;
&lt;p&gt;之前遇過需要隨機抽樣去分流的狀況（把 50% 使用者引導去翻寫好的新站台觀察狀況之類的）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;像這種需要自己寫某些邏輯來決定開關是否開啟的場合，就可以使用 FeatureFilter 來實現&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;跟前兩個範例一樣，我們需要先去 &lt;code&gt;appsettings.json&lt;/code&gt; 掛上我們的 Feature Flag。既然是要隨機抽取幸運兒體驗我們的新功能，就叫做 &lt;code&gt;RandomTrial&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但要注意，當我們要自訂 Flag 啟用的條件（也就是需要跑過某些邏輯才能決定是 true/false）的時候，就不能像前面兩個範例一樣簡單丟個 &lt;code&gt;&amp;quot;RandomTrial&amp;quot;:true&lt;/code&gt; 就搞定&lt;/p&gt;
&lt;p&gt;而是要使用 &lt;code&gt;EnabledFor&lt;/code&gt;，並在裡面標示出我們要呼叫的 FeatureFilter 名稱、需要傳遞的參數，這樣 FeatureManagement 才知道它得依序跑過這些 FeatureFilter&lt;/p&gt;
&lt;p&gt;假設我們希望有 50% 的使用者會隨機抽中新功能。我們就可以先在 &lt;code&gt;EnabledFor&lt;/code&gt; 裡掛一條叫做「Random」的 FeatureFilter，並且丟個 Percentage=50 的參數進去：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// appsettings.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FeatureManagement&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;NiceApiEnabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;RandomTrial&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;EnabledFor&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Random&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Percentage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Flags/FeatureFlags.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FeatureFlags&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; NewLogicEnabled = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; NiceApiEnabled = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NiceApiEnabled&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 新增 RandomTrial&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; RandomTrial = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RandomTrial&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著讓我們實作對應的 FeatureFilter，這邊作法就可以粗暴一點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;從 &lt;code&gt;context.Parameters&lt;/code&gt; 把前面設好的 Percentage 參數拉出來&lt;/li&gt;
&lt;li&gt;現場骰下去看有沒有過門檻，沒過就掰掰&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Filters/RandomFilter.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 隨機啟用 API 的 Filter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;see ref=&amp;#34;https://learn.microsoft.com/zh-tw/azure/azure-app-configuration/howto-feature-filters-aspnet-core&amp;#34;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[FilterAlias(&amp;#34;Random&amp;#34;)]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 設定 Filter 的別名，讓 appsettings.json 可以使用這個別名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RandomFilter&lt;/span&gt; : IFeatureFilter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt; EvaluateAsync(FeatureFilterEvaluationContext context)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; percentage = context.Parameters.GetValue&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; seed = Guid.NewGuid().GetHashCode();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; randomNumber = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random(seed).Next(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isEnabled = randomNumber &amp;lt;= percentage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Task.FromResult(isEnabled);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著我們要把這個 FeatureFilter 拿去註冊：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Program.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddFeatureManagement()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddFeatureFilter&amp;lt;RandomFilter&amp;gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// 加入自訂的 Feature Filter. see: Filters/RandomFilter.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著就像前面的兩個範例一樣，直接拿來用就好嚕&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Controllers/DemoController.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HttpGet(&amp;#34;FeatureFilter/Random/&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; FeatureFilterRandom()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Demo 3: 實作：使用 IFeatureFilter 來隨機啟用 API - 直接查詢 Feature Flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isEnabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; _featureManager.IsEnabledAsync(FeatureFlags.RandomTrial);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; isEnabled 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;恭喜你！你抽中了香香新版邏輯的試用機會！&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;什麼事也沒發生，又是臭臭邏輯的一天。&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HttpGet(&amp;#34;FeatureFilter/Random/FeatureGate&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[FeatureGate(FeatureFlags.RandomTrial)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; FeatureFilterRandomWithFeatureGate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Demo 3: 實作：使用 IFeatureFilter 來隨機啟用 API - 透過 FeatureGate 來啟用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;恭喜你！你抽中了很棒 API 的試用機會！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;來張動圖看看成果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9l8N7EE.gif&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;實作使用-featurefilter-來根據白名單啟用-api&#34;&gt;實作：使用 FeatureFilter 來根據白名單啟用 API&lt;/h2&gt;
&lt;p&gt;接下來試試另一組場景，假設我們打算先讓十位合作客戶試用新功能，&lt;br/&gt;這時候也可以靠自製 FeatureFilter 來處理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：這一節會需要用到依賴注入相關的功能，還不熟的朋友可以參見&lt;a href=&#34;https://igouist.github.io/post/2021/11/newbie-6-dependency-injection/&#34;&gt;依賴注入的筆記&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先按照慣例，先加上我們的 Feature Flag&lt;br/&gt;
這次就叫做 &lt;code&gt;Whitelist&lt;/code&gt;，並且只指定 FeatureFilter 的名稱就好，不需要參數：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// appsettings.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FeatureManagement&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;NiceApiEnabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;RandomTrial&amp;#34;&lt;/span&gt;: {}, &lt;span style=&#34;color:#75715e&#34;&gt;// 好長，省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Whitelist&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;EnabledFor&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whitelist&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Flags/FeatureFlags.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FeatureFlags&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; NewLogicEnabled = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NewLogicEnabled&amp;#34;&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; NiceApiEnabled = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NiceApiEnabled&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; RandomTrial = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RandomTrial&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 新增 Whitelist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Whitelist = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whitelist&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著，假裝一下我們在某張資料表裏面有白名單資料：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Repositories/WhitelistRepository.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IWhitelistRepository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Task&amp;lt;IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;&amp;gt; GetWhitelistAsync();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WhitelistRepository&lt;/span&gt; : IWhitelistRepository
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;&amp;gt; GetWhitelistAsync()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 假裝從資料庫中取得白名單 :)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Apple&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Banana&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cat&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 小提醒：如果真的連線到資料庫，然後名單的改動頻率很低，可以考慮加個快取&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而且這個 Repo 也有好好註冊到 Program.cs。&lt;br/&gt;
同時，因為後續的示範一定也需要從 Request 拿到使用者的身分&lt;br/&gt;
這邊也註冊了 IHttpContextAccessor 來取得 Request 內容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Program.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddHttpContextAccessor();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddSingleton&amp;lt;IWhitelistRepository, WhitelistRepository&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;延伸閱讀：&lt;a href=&#34;https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/http-context?view=aspnetcore-8.0#access-httpcontext-from-custom-components&#34;&gt;存取 ASP.NET Core 中的 HttpContext&lt;/a&gt; 的「從自訂元件存取 HttpContext」小節&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：如果 FeatureFilter 依賴對象的生命週期是 Scope 的，會需要調整一下 FeatureManagement 的註冊，請看這一小節最後的補充。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上游的假資料準備好了，接著就讓我們來實作白名單 FeatureFilter 吧：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Filters/WhitelistFilter.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 白名單啟用 API 的 Filter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[FilterAlias(&amp;#34;Whitelist&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WhitelistFilter&lt;/span&gt; : IFeatureFilter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IWhitelistRepository _whitelistRepository;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IHttpContextAccessor _httpContextAccessor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; WhitelistFilter(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IWhitelistRepository whitelistRepository, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IHttpContextAccessor httpContextAccessor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _whitelistRepository = whitelistRepository;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _httpContextAccessor = httpContextAccessor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt; EvaluateAsync(FeatureFilterEvaluationContext context)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 粗暴地從 Request 的 Header 取出使用者名稱&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 實作時記得換成真正的使用者資訊來源，例如 JWT Token、拆好的 User 資訊、擲筊的結果，之類的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; user = _httpContextAccessor.HttpContext?.Request.Headers[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User&amp;#34;&lt;/span&gt;]; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrWhiteSpace(user))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 假裝從資料庫中取得白名單，檢查使用者是否在白名單中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 實作時記得換成真正的白名單來源 &amp;amp; 比對邏輯&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; whitelist = &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; _whitelistRepository.GetWhitelistAsync();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; whitelist.Any(x =&amp;gt; x.Equals(user, StringComparison.OrdinalIgnoreCase)); &lt;span style=&#34;color:#75715e&#34;&gt;// 插個不分大小寫，避免我等等 Demo 手殘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;搞定，開開心心來註冊囉：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Program.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddFeatureManagement()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddFeatureFilter&amp;lt;RandomFilter&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddFeatureFilter&amp;lt;WhitelistFilter&amp;gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 把白名單的 FeatureFilter 掛上去&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著捏支 API 來測測看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Controllers/DemoController.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HttpGet(&amp;#34;FeatureFilter/Whitelist/&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; FeatureFilterWhitelist(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [FromHeader(Name = &amp;#34;User&amp;#34;)]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Demo 4: 實作：使用 IFeatureFilter 來根據白名單啟用 API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isEnabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; _featureManager.IsEnabledAsync(FeatureFlags.Whitelist);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; isEnabled 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ? &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{user} 先生/小姐，你好。歡迎使用本服務。您是我們第 9999 位 VIP 會員！&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        : &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{user} 先生/小姐，你好。很抱歉，本服務尚未開放給您使用。請加入我們的 VIP 會員，取得優先體驗資格！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;來張動圖看看成果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/r2gIrLw.gif&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;搞定，收工。又是美好的一天，準時下班囉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：由於 FeatureManager 是 Singleton 的，而 AddFeatureFilter 會根據 FeatureManager 的生命週期來註冊 FeatureFilter，因此如果依賴對象的生命週期是 Scope，注入的時候就會發生錯誤。&lt;/p&gt;
&lt;p&gt;這時候請改用 AddScopedFeatureManagement：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Program.cs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// builder.Services.AddFeatureManagement();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddScopedFeatureManagement();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;參考：&lt;a href=&#34;https://github.com/microsoft/FeatureManagement-Dotnet/issues/15&#34;&gt;Unable to inject Scoped/Transient services into FeatureFilter · Issue #15 · microsoft/FeatureManagement-Dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;延伸閱讀：&lt;a href=&#34;https://igouist.github.io/post/2021/11/newbie-6-dependency-injection/#%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%89%E7%A8%AE%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F-transientscopedsingleton&#34;&gt;依賴注入的三種生命週期 Transient、Scoped、Singleton&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;
&lt;p&gt;稍微玩了一下 FeatureManagement，並且拿了一些前陣子遇過的場景來實作看看&lt;/p&gt;
&lt;p&gt;原本以為只是簡單的去組態抓開關，想不到 FeatureFilter 提供的自訂條件還蠻彈性的，挺香&lt;/p&gt;
&lt;p&gt;FeatureGate 無腦噴 404 也挺爽的（警告：請跟呼叫端的朋朋喬好= = 不然很危險，生命危險）&lt;/p&gt;
&lt;p&gt;如果有想要搞個 Feature Flag 的場合，推薦可以玩玩看。&lt;/p&gt;
&lt;p&gt;那麼，今天的筆記就到這邊。我們下篇見～&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-tw/azure/azure-app-configuration/use-feature-flags-dotnet-core&#34;&gt;如何在 .NET 應用程式中使用功能旗標的教學課程 | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotblogs.com.tw/supershowwei/2020/11/02/154134&#34;&gt;[料理佳餚] ASP.NET Core 的 Feature Flags（Feature Toggle） | 軟體主廚的程式料理廚房&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;延伸閱讀（搭配 Azure App Configuration）
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-tw/azure/azure-app-configuration/feature-management-dotnet-reference?pivots=stable-version&#34;&gt;.NET 功能旗標管理 - Azure App Configuration | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotblogs.com.tw/anyun/2022/10/16/160158&#34;&gt;使用 App Configuration 的 Feature manager 功能來實做 Feature Toggle/Flag 機制 | 黯雲端記事錄&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>.Net: 使用 IOptions 取得 appsettings.json 的設定值吧</title>
      <link>https://igouist.github.io/post/2024/08/dotnet-ioptions/</link>
      <pubDate>Sat, 03 Aug 2024 08:30:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2024/08/dotnet-ioptions/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dh0Jo4t.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;因為手邊的 .Net Core API 專案越來越多，蠻常會需要讀 appsetting.json 的 Config，每次都要重找文章有點麻煩，這邊就來筆記一篇。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先簡單介紹一下 appsettings.json 是在幹嘛的：&lt;/p&gt;
&lt;p&gt;我們開發的時候，常常會需要弄一些設定值，再用這些設定值用來控制我們程式的某些行為。&lt;/p&gt;
&lt;p&gt;例如「某功能的上限值是 &lt;code&gt;10&lt;/code&gt;」、「某項開關在測試環境是 &lt;code&gt;false&lt;/code&gt;」、「某服務信件的發送者要用 &lt;code&gt;noreply9527&lt;/code&gt;」，另外常見的還有連線字串、寫 Log 時的 logging level 等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;這些設定值會和程式碼拆開，放在設定檔集中管理&lt;/strong&gt;，再讓程式碼從設定檔讀取相關的設定值來用就好。有了設定檔，要調整修改也比較方便：要增加或是修改設定值，都只要先往設定檔衝就行。&lt;/p&gt;
&lt;p&gt;既然兩邊拆開了，我們也就可以簡單地替換這些設定值來應對不同狀況（例如正式環境和測試環境套用兩組不同的設定檔，或是在自己電腦測試的時候快速改個值之類的），彈性可說是 UPUP&lt;/p&gt;
&lt;p&gt;更重要的是，這樣我們就不需要把一大堆東西寫死在程式碼的各個地方，也就不會要改個值還要先搜尋整個專案再一個一個挖出來改了。&lt;del&gt;我按 Shift Ctrl F 已經按到哭&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;把設定值抽出去丟到設定檔之後，我們就得到了：集中管理設定值、方便修改和替換、減少程式碼中又重複又寫死的臭東西等等好處。&lt;/p&gt;
&lt;p&gt;而在 .Net Core 開始的 .Net API 框架裡，&lt;strong&gt;這個設定檔就是 appsettings.json&lt;/strong&gt;。&lt;br/&gt;前面提到的像是日誌等級、功能旗標之類的這些設定值，就會放在 appsettings.json 裡面。&lt;/p&gt;
&lt;p&gt;而當我們想要從 appsettings.json 把這些設定值給讀出來的時候，&lt;br/&gt;就可以使用我們的 IOptions 啦！&lt;/p&gt;
&lt;h2 id=&#34;使用-ioptions-來註冊--注入&#34;&gt;使用 IOptions 來註冊 &amp;amp; 注入&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;提醒：這篇的示範會用到一些些 .Net 依賴注入（DI）相關的操作。沒接觸過的朋友可以考慮先閱讀&lt;a href=&#34;https://igouist.github.io/post/2021/11/newbie-6-dependency-injection/&#34;&gt;菜雞新訓記：依賴注入&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假設我們有個專案，叫做大漢防禦管理系統。專案內的 appsettings.json 有以下內容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;StrongholdInfo&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;劍閣&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Enabled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;General&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;姜維&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;廖化&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;張翼&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;董厥&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們正好在開發一個新功能，需要抓到這段設定值。現在就來示範一下：&lt;/p&gt;
&lt;p&gt;首先，讓我們建立一個類別，等等用來放設定值內容（通常後綴會用 Options）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 關隘資訊&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StrongholdInfoOptions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 關隘編號&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Index { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 關隘名稱&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; } = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 關隘啟用狀態&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Enabled { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 駐守人員&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[]? General { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著使用 &lt;code&gt;Configure&amp;lt;T&amp;gt;&lt;/code&gt; 來註冊，並且用 &lt;code&gt;Configuration.GetSection&lt;/code&gt; 來指定這段設定值在 appsettings.json 裡的位置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 原本就有的一些註冊...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddControllers();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddEndpointsApiExplorer();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.AddSwaggerGen();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 Configure 註冊 Option&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.Configure&amp;lt;StrongholdInfoOptions&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    builder.Configuration.GetSection(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StrongholdInfo&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;註冊好了之後，就可以使用 &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; 注入到我們要用的地方囉&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ApiController]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Route(&amp;#34;[controller]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemoController&lt;/span&gt; : ControllerBase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; StrongholdInfoOptions _info;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用 IOptions&amp;lt;T&amp;gt; 注入，並用 .Value 取得內容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DemoController(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IOptions&amp;lt;StrongholdInfoOptions&amp;gt; info)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _info = info.Value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [HttpGet(&amp;#34;IOption&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; Get()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _info;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mcQSwu0.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;收工，搞定。就是這麼簡單。&lt;/p&gt;
&lt;h2 id=&#34;補充addoptions--對-ioptions-加入驗證&#34;&gt;補充：AddOptions &amp;amp; 對 IOptions 加入驗證&lt;/h2&gt;
&lt;p&gt;前面我們在註冊時，是使用 &lt;code&gt;Configure&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 Configure 註冊 Option&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.Configure&amp;lt;StrongholdInfoOptions&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    builder.Configuration.GetSection(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StrongholdInfo&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其實也可以使用 &lt;code&gt;AddOptions&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 Configure 註冊 Option&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services.Configure&amp;lt;StrongholdInfoOptions&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    builder.Configuration.GetSection(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StrongholdInfo&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 或是使用 AddOptions，這兩個做法最後都會呼叫 Configure&amp;lt;StrongholdInfoOptions&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// see: https://github.com/dotnet/extensions/issues/514&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ps: `BindConfiguration` 是比較新的語法，以前會使用 `Bind() + builder.Configuration.GetSection()`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddOptions&amp;lt;StrongholdInfoOptions&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .BindConfiguration(StrongholdInfoOptions.SectionName);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這兩個語法最終會做同樣的事情，因為 &lt;code&gt;Bind()&lt;/code&gt; 會去呼叫 &lt;code&gt;Configure()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/55762813/what-is-the-difference-between-services-configure-and-services-addoptionst&#34;&gt;c# - 在 ASP.NET Core 中加載配置時，services.Configure() 和 services.AddOptions&lt;T&gt;().Bind() 之間有什麼區別？- Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/extensions/issues/514&#34;&gt;Question: AddOptions&lt;T&gt;() vs. Multiple Configure&lt;T&gt;(…) · Issue #514 · dotnet/extensions (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只是 &lt;code&gt;AddOptions&lt;/code&gt; 比較晚出現，並且後來又加入了更多自定義，用起來比較靈活。&lt;/p&gt;
&lt;p&gt;例如我們可以用 &lt;code&gt;ValidateDataAnnotations&lt;/code&gt; 來啟用屬性驗證：&lt;br/&gt;（可參考 Microsoft Learn &lt;a href=&#34;https://learn.microsoft.com/zh-tw/dotnet/core/extensions/options#options-validation&#34;&gt;選項模式&lt;/a&gt; 的「選項驗證」小節）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Required]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[RegularExpression(@&amp;#34;^[\u4e00-\u9fa5]&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)] // 限定 1~10 個中文字
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;builder.Services
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .AddOptions&amp;lt;SettingsOptions&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .Bind(Configuration.GetSection(SettingsOptions.ConfigurationSectionName))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .ValidateDataAnnotations()  &lt;span style=&#34;color:#75715e&#34;&gt;// 會在呼叫 .value 的時候進行驗證&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// .Validate(config =&amp;gt; {})     // 也可以自訂驗證邏輯&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// .ValidateOnStart()          // 也可以要求在啟動時就驗證&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 假如加了 ValidateDataAnnotations 的話，取值驗證失敗會噴 OptionsValidationException&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SettingsOptions options = _config.Value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (OptionsValidationException ex)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; failure &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; ex.Failures) &lt;span style=&#34;color:#75715e&#34;&gt;// 畢竟可能一堆東西沒通過驗證嘛&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _logger.LogError(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Validation error: {FailureMessage}&amp;#34;&lt;/span&gt;, failure);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果需要自訂驗證器，可以搜尋 &lt;code&gt;IValidateOptions&lt;/code&gt;，可以自己實作 &lt;code&gt;Validate()&lt;/code&gt;，但我個人還沒遇到這麼複雜的狀況，這邊就不詳述。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Configure&lt;/code&gt; 直接又簡單，但 &lt;code&gt;AddOptions&lt;/code&gt; 比較靈活。&lt;br/&gt;我個人比較喜歡粗暴直接的做法，所以目前是都直接呼叫 &lt;code&gt;Configure&lt;/code&gt; 而已。供各位參考&lt;/p&gt;
&lt;h2 id=&#34;補充ioptionsioptionsmonitorioptionssnapshot&#34;&gt;補充：IOptions、IOptionsMonitor、IOptionsSnapshot&lt;/h2&gt;
&lt;p&gt;提了 IOptions 就不能不提他的兩位哥哥：IOptionsMonitor、IOptionsSnapshot&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ApiController]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OptionsMonitorDemoController&lt;/span&gt; : ControllerBase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 我們有三種 IOptions 相關的介面來取得設定檔內容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IOptions&amp;lt;StrongholdInfoOptions&amp;gt; _options;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IOptionsMonitor&amp;lt;StrongholdInfoOptions&amp;gt; _optionsMonitor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IOptionsSnapshot&amp;lt;StrongholdInfoOptions&amp;gt; _optionsSnapshot;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這邊也迅速筆記一下。有興趣的朋友可以直接閱讀相關文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wenhx/p/ioptions-ioptionsmonitor-and-ioptionssnapshot.html&#34;&gt;IOptions、IOptionsMonitor 以及 IOptionsSnapshot - wenhx - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/options?view=aspnetcore-8.0#options-interfaces&#34;&gt;ASP.NET Core 中的選項模式 | Microsoft Learn&lt;/a&gt; 的「選項介面」小節&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ioptions&#34;&gt;IOptions&lt;/h3&gt;
&lt;p&gt;用起來最簡單方便，個人推👍&lt;/p&gt;
&lt;p&gt;IOptions 會註冊為 Singleton，所以大家都會用同一組。也只有第一次建立的時候會抓設定檔的內容。後面就算跑去偷改檔案，也不會被影響（想更新？重啟站台吧）&lt;/p&gt;
&lt;p&gt;如果設定檔不太常改動的話，直接用這個簡單做一做是最方便的，也省資源。&lt;/p&gt;
&lt;h3 id=&#34;ioptionsmonitor&#34;&gt;IOptionsMonitor&lt;/h3&gt;
&lt;p&gt;IOptionsMonitor 同樣也會註冊為 Singleton，但是它會去偷聽設定檔有沒有更新。&lt;br/&gt;當設定檔有更新的時候 IOptionsMonitor 也會一起更新，所以能夠隨時取得目前版本的設定值&lt;/p&gt;
&lt;p&gt;取值的方法名稱也很明確表達這點，大家都是 &lt;code&gt;_options.Value&lt;/code&gt;，&lt;br/&gt;但 IOptionsMonitor 的是 &lt;code&gt;_options.CurrentValue&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_options = _options.Value,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_optionsMonitor = _optionsMonitor.CurrentValue,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我們的功能非常依賴設定值，而且又希望隨時更新的時候，就可以考慮使用。&lt;br/&gt;但要小心如果 API 正在處理 Request，然後又剛好正在修改設定檔的話，可能會有一些靈異現象&lt;/p&gt;
&lt;p&gt;弄這篇筆記的時候也動手試了一下 IOptionsMonitor，但有點小佔版面，就放在最後的附錄（讓我之後可以回來抄）了。&lt;/p&gt;
&lt;h3 id=&#34;ioptionssnapshot&#34;&gt;IOptionsSnapshot&lt;/h3&gt;
&lt;p&gt;IOptionsSnapshot 會註冊為 Scope，所以每個請求進來的時候，都會各自去拿一次目前的設定檔內容，並且就用這一份設定檔內容處理這一次請求&lt;/p&gt;
&lt;p&gt;我個人感覺最中規中矩。吃得到設定檔的變動，但也不會像 &lt;code&gt;IOptionsMonitor&lt;/code&gt; &lt;br/&gt;搞到前一秒還是 true 下一秒就是 false🤔&lt;/p&gt;
&lt;p&gt;如果有改動 Config 的需求，又希望同個請求之間不要太奇異的時候就可以考慮使用&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大概這樣。但我個人平常都還是 IOptions 優先，&lt;br/&gt;如果真的有需要即時反應設定檔的變動時，再把另外兩個拿出來討論吧。&lt;/p&gt;
&lt;h2 id=&#34;延伸閱讀&#34;&gt;延伸閱讀&lt;/h2&gt;
&lt;p&gt;前面介紹了 .Net Core 裡 &lt;code&gt;appsettings.json&lt;/code&gt; 和 &lt;code&gt;IOptions&lt;/code&gt; 的基本操作，也順便補充了一些簡單介紹。其他相關的操作，就放在延伸閱讀這邊，有興趣的朋朋們可以看看。&lt;/p&gt;
&lt;p&gt;如果想根據不同環境（Dev, Prd 之類的）切換不同 appsettings.json：&lt;br/&gt;
&lt;a href=&#34;https://blog.darkthread.net/blog/appsetting-by-environment/&#34;&gt;ASP.NET Core 依環境載入不同 appsetting.json 設定 - 黑暗執行緒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你正在搞功能旗標（Feature Flag/Feature Toggle）然後看到這篇的話，&lt;br/&gt;也可以嘗試看看 &lt;code&gt;FeatureManagement&lt;/code&gt;：&lt;br/&gt;
&lt;a href=&#34;https://igouist.github.io/post/2024/08/dotnet-feature-flag-and-feature-management/&#34;&gt;.Net: 使用 FeatureManagement 套件來實作 Feature Flag 功能切換吧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果覺得到處都是 IOptions，想要降低對 IOptions 的依賴的話，可以綁到強型別裡：&lt;br/&gt;
&lt;a href=&#34;https://marcus116.blogspot.com/2021/11/aspnet-core-Configuration-Avoiding-IOptions-injection.html&#34;&gt;[NETCore] ASP.NET Core 使用強型別取代 IOption&lt;T&gt; 注入配置 ~ m@rcus 學習筆記&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/?view=aspnetcore-8.0&#34;&gt;ASP.NET Core 的設定 | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/options?view=aspnetcore-8.0&#34;&gt;ASP.NET Core 中的選項模式 | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marcus116.blogspot.com/2019/03/how-to-get-value-appsettingsjson-in-netcore.html&#34;&gt;[.NETCore] 如何取得 appsettings.json 組態設定 ~ m@rcus 學習筆記 (marcus116.blogspot.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/wenhx/p/ioptions-ioptionsmonitor-and-ioptionssnapshot.html&#34;&gt;IOptions、IOptionsMonitor以及IOptionsSnapshot - wenhx - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@ludmal/net-configuration-with-ioptions-ioptionsmonitor-and-ioptionssnapshot-76e0efb0ad87&#34;&gt;.NET Configuration with IOptions, IOptionsMonitor, and IOptionsSnapshot | by Ludmal De Silva | Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;附錄試一下-ioptionsmonitor&#34;&gt;附錄：試一下 IOptionsMonitor&lt;/h2&gt;
&lt;p&gt;簡單比較一下修改 appsettings.json 後，IOptions 和 IOptionsMonitor 的資料差異，方便我以後需要複製貼上，或是哪天需要甩給朋友時使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OptionsMonitorDemoController(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IOptions&amp;lt;StrongholdInfoOptions&amp;gt; options, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IOptionsMonitor&amp;lt;StrongholdInfoOptions&amp;gt; optionsMonitor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _options = options;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _optionsMonitor = optionsMonitor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HttpGet(&amp;#34;api/Demo/GetWithMonitor&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;&amp;gt; GetWithMonitor()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; before = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OptionsName = _options.Value.Name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OptionsMonitorName = _optionsMonitor.CurrentValue.Name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 在這裡下中斷點，打開 appsettings.json 手動改資料&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 把 &amp;#34;Name&amp;#34;: &amp;#34;劍閣&amp;#34; 改成 &amp;#34;Name&amp;#34;: &amp;#34;羅馬&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.Threading.Thread.Sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; after = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OptionsName = _options.Value.Name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OptionsMonitorName = _optionsMonitor.CurrentValue.Name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { before, after };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// [&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//   {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     &amp;#34;optionsName&amp;#34;: &amp;#34;劍閣&amp;#34;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     &amp;#34;optionsMonitorName&amp;#34;: &amp;#34;劍閣&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//   },&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//   {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     &amp;#34;optionsName&amp;#34;: &amp;#34;劍閣&amp;#34;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     &amp;#34;optionsMonitorName&amp;#34;: &amp;#34;羅馬&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//   }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>九日　白金！</title>
      <link>https://igouist.github.io/post/2024/08/nine-sols/</link>
      <pubDate>Thu, 01 Aug 2024 07:00:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2024/08/nine-sols/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zhwxf9c.png&#34; alt=&#34;Image&#34;&gt;
&lt;img src=&#34;https://i.imgur.com/K2vqk3j.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;終於過了！九日沒有慣例的「完成所有成就」的盃，但是放結局獎盃又怕結局名字雷到路過的朋友，就截普通模式通關的盃吧。&lt;/p&gt;
&lt;p&gt;按照慣例，留一篇筆記來聊聊心得和體驗，以下有雷。&lt;/p&gt;
&lt;p&gt;首先，必須感謝當初募資的大大們有開出劇情模式，讓我解完其中一條結局（被易公痛扁）之後，可以馬上讀檔開劇情模式看另一條。（逃離研究中心的電影運鏡很棒啦，但我實在不想再走一次了囧）&lt;/p&gt;
&lt;p&gt;看完兩個結局後，能理解為什麼蠻多人會說后羿射日結局才是真結局。原本覺得只是「不同的選擇」，但通關之後我也比較喜歡這個結局，易公第三階段和最後射日的演出令人印象深刻，也充滿故事結束的感覺。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這次的戰鬥和地圖探索體驗都很不錯，但果然首先要提的還是「道教龐克」的部份。&lt;/p&gt;
&lt;p&gt;一開始有點水土不服，就是有點熟悉感又覺得怪怪的。但越玩越覺得「哇這很不錯」。像是嗑毒草的阿農、墳墓是虛擬實境裝置、煉丹的丹藥其實是基因改造，另外還有很潮的&lt;a href=&#34;https://forum.gamer.com.tw/C.php?bsn=74687&amp;amp;snA=152&#34;&gt;太陽語&lt;/a&gt;（說是古漢語發音和倉頡拼字來的？）等等。&lt;/p&gt;
&lt;p&gt;蠻喜歡這種充滿各種腦洞的詮釋，感覺還有很多發展空間，不知道以後會不會有道教龐克宇宙？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/auSDWXh.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外一些破台時比較有印象的部分，首先就是臭菜（想了一下才發現是在嘴香菜）。還有李耳墓，通過三位大佬的測試、聽了李耳的寓言，然後才意會到門口就是被砍翻的那三位大佬，體驗良好。&lt;/p&gt;
&lt;p&gt;哦對，還有茱麗葉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/J1U4qxS.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而最有記憶點的，果然還是第一次經過扶蝶他家門口的時候的 jump scare。&lt;/p&gt;
&lt;p&gt;發現畫面開始無限 Loop 的時候，我就躲得離螢幕超超超遠。事後還上巴哈求助詢問後面還有沒有這種嚇人玩意，真的差點嚇到棄坑 = =&amp;quot;&lt;/p&gt;
&lt;p&gt;但提到扶蝶就要稱讚一下，扶蝶戰的體驗和音樂真的很讚。&lt;/p&gt;
&lt;p&gt;節奏雖然很快，但是從 1 隻、3 隻再到 7 隻分身，這種逐漸加快、越來越密集的感覺打起來非常舒服。應該是我打完九日過程中覺得戰鬥體驗最讚的 Boss，勘比易公&lt;/p&gt;
&lt;p&gt;故事裡成員們陷入超級虛擬實境不想醒、搭配夢蝶的意境也很不錯。對戰中從後腦長出蝴蝶也很有 Feel，音樂更是相當有感（&lt;a href=&#34;https://www.youtube.com/watch?v=SQnSdBNwXuI&#34;&gt;Smile at My Cursed Dream ~Lady Ethereal&amp;rsquo;s Theme~&lt;/a&gt;），就是背景和跑圖太陰間了點&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/SQnSdBNwXuI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;除了扶蝶戰以外，也聊聊其他比較有印象的戰鬥&lt;/p&gt;
&lt;p&gt;截全戰的印象九成都在背景音樂上，就是那首「&lt;a href=&#34;https://www.youtube.com/watch?v=J0CocEg0s9U&#34;&gt;苦難！哈！鑄英雄！&lt;/a&gt;」（有一段聽起來超像「人真好！郭富城！」的那首）。戰鬥過程就是中規中矩的你一刀我一刀。但截全的人氣好像蠻高的？常常看到相關的圖。&lt;/p&gt;
&lt;p&gt;另一場印象比較深的是姬的戰鬥，尤其是占卜可以自己踩想要的，所以踩得準就可以自己選補血，一直補一直爽。飛劍可以格檔、黑洞可以打斷，實在非常貼心，所以說這種神秘又古老的角色就是棒。奄老還是乖乖顧倉庫去吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tP9Htjv.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;至於最終戰的易公，只能說齁勝。剛進場的時候覺得揮刀速度明明很慢，卻一直抓不到格檔的感覺。有種被教鞭教訓的感覺（這就是師傅嗎）&lt;/p&gt;
&lt;p&gt;戰鬥過程中基本上就是鏘鏘鏘一直檔，檔完就抓空隙上符做輸出（不如說我八成輸出都是靠符），無量反擊用好才能進一步喝水跟補刀。打著打著有種夢回隻狼的 Feel&lt;/p&gt;
&lt;p&gt;當然第三階段被完全看不懂的飛天劍打成智障又是另一個故事了。易公第三杯水強得跟鬼一樣，難怪他會覺得變怪物是種進化，我被打到都快信了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RTBD3vG.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;整輪打下來的戰鬥心得是：&lt;strong&gt;一定要格檔，一定要貼符&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多輸出空間（像是扶蝶和易公）都只能靠貼符，越打到後期越覺得符才是主要輸出，刀反而是裝了玉石加減砍來治內傷的&lt;/p&gt;
&lt;p&gt;戰鬥充滿格檔和互動，體驗非常良好。&lt;/p&gt;
&lt;p&gt;故事部分也相當不錯，像山海 9000 支線到最後找到朋友和照片，還有風氏兄妹奢糜背後的原因（開打之前：人都死光了你們還開趴？　打完之後：太悲哀了QQ）、阿農一路走到帶領村人等等。&lt;/p&gt;
&lt;p&gt;有一小段和軒軒下棋的對話我也蠻喜歡：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「咦！我是不是要贏了！」&lt;/p&gt;
&lt;p&gt;『對，其實下到一半我就知道自己贏不了。 &lt;br/&gt;
　恭喜你，接下來可以去找下一名對手了。』&lt;/p&gt;
&lt;p&gt;「哈哈，才不要，我又不是為了贏，我只是想跟大哥下棋」&lt;/p&gt;
&lt;p&gt;『不為輸贏嗎？　&lt;br/&gt;
　哈，看來我該學的東西還真不少。』&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最後，偷偷許願，希望九日有機會像隻狼那樣出個單純和 Boss 對戰的模式。&lt;/p&gt;
&lt;p&gt;像是扶蝶、易公都是那種會讓人想再打的 Boss。如果能手癢就上去擋兩把就好了呢～&lt;/p&gt;
&lt;p&gt;大概醬子，白金封片。感謝九日。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ErPzjaG.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】轉貼 100 篇文章之後</title>
      <link>https://igouist.github.io/repost/2024/04/0429-repost-100-days/</link>
      <pubDate>Mon, 29 Apr 2024 23:59:59 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0429-repost-100-days/</guid>
      <description>&lt;p&gt;今天單純分享一下。在持續轉貼文章之後，我得到了幾個不錯的東東：&lt;/p&gt;
&lt;p&gt;首先是寫作力的復甦（？），畢竟部落格已經斷更好一陣子，要寫點東西都有點抗拒，也懶懶的。&lt;/p&gt;
&lt;p&gt;但藉著簡單的轉貼文章、以及「只需要加上一點整理和心得」的小小門檻，漸漸地好像對花時間寫點東西不再那麼抗拒，並且開始習慣每天花 15~60 分鐘在閱讀文章和整理筆記，感覺很不錯，就像是一種寫作復健。&lt;/p&gt;
&lt;p&gt;除了培養習慣以外，也能夠把自己喜歡的文章分享出來、給更多人認識，這也是一件很棒的事情。&lt;br/&gt;&lt;del&gt;壓線摸魚的部份不算的話&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;而在轉貼的過程中，也被推薦了更多文章，有時也會挖到寶藏。如果有觀念落後的地方，也能得到前輩們的補充。也許這就是公開學習的好處吧！（雖然也有因為菜而看不懂的時候就是了 xD）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;講完收穫之後，來聊聊最近的想法。&lt;/p&gt;
&lt;p&gt;隨著存到筆記庫的文章多了起來，有些時候卡片就會散散的。看著這堆散散的筆記，就開始有了些想法&lt;/p&gt;
&lt;p&gt;像是想把時間投入在相近的主題，集中火力把這些卡片之間的網路建起來；或是消滅那些放了很久卻沒看的書，乾脆用書本當主軸來展開每天的筆記等等。&lt;/p&gt;
&lt;p&gt;最重要的是：想用同樣的方式再一小步一小步走，就像是轉貼一些文章這樣的小事就很好。&lt;/p&gt;
&lt;p&gt;如此如此這般這般，總之就決定就把每天轉貼的這串緩下來了。接著打算每天整理一小篇筆記，先把相關主題或是同一本書籍的卡片吃完，剩下的就再看看吧。&lt;/p&gt;
&lt;p&gt;如果是欣梅爾的話，也一定會這樣做的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後想貼幾則之前轉貼過（或沒轉貼過？）的文章，給有興趣的朋友閱讀，同時也讓我自己複習：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10209415&#34;&gt;鐵人賽——30天可以給自己多大轉變？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我本來就是初學者，我為什麼要害怕讓別人知道我不夠強呢XD？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://life.huli.tw/2018/09/26/procrastination-ba12754ada49/&#34;&gt;致跟我一樣的拖延症患者：動力是需要刻意創造的&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他說：「還能怎麼辦，都花幾萬塊了，結業之後一定要找到工作啊，就只能拼命自己學」&lt;br/&gt;
那時我才意識到動力是可以被創造出來的，可以被另外一件重要的事情創造出來。所以你要找到對你來說真的重要的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.playpcesor.com/2023/10/flow.html&#34;&gt;面對拖延糾結、恐懼沒時間，我幫助自己進入心流靠一個關鍵步驟&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用「設計適合自己的挑戰」，取代「能力焦慮」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.darencademy.com/article/view/id/16883&#34;&gt;明知要改變，卻怎麼也踏不出第一步？你需要的是「心理戰術」！&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在接下來的每一步告訴自己：我還沒有真的要下定決心，&lt;br/&gt;
或者說，我也可以不急著決定，我只是把眼前的小步驟做好，而且隨時可以退出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://hyuanverse.com/how-to-deal-with-self-judgement/&#34;&gt;當我覺得自己做的很爛時，我會做些什麼？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你還沒有達到某個特定的點，你並不需要因此對自己太過苛責。&lt;br/&gt;
你無法讓時間流速變快，也沒辦法改變你每天需要完成的重複次數。&lt;br/&gt;
你唯一能控制的只有：下一次重複。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/agile-coffee/%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3-ea93fdb194ab&#34;&gt;《原子習慣》細微改變帶來巨大成就的實證法則｜心得筆記&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這個過程只有簡單的兩步驟：&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;決定你想要成為什麼樣的人&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;透過生活中的小勝利來向自己證明&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;那麼，今天的小心得就到這裡，希望大家也能體會到轉貼文章對我們菜雞的好。可能下篇轉貼再見 &amp;gt;&amp;lt;&amp;quot;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】原子習慣</title>
      <link>https://igouist.github.io/repost/2024/04/0428-atomic-habits/</link>
      <pubDate>Sun, 28 Apr 2024 23:16:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0428-atomic-habits/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;「&lt;strong&gt;人很容易高估一個決定性瞬間的重要性，也很容易低估每天都做些小改善的價值&lt;/strong&gt;」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在想一些關於習慣培養的事情，正好整理到這篇關於《原子習慣》的筆記。&lt;br/&gt;寫得很不錯，推薦大家過去看看：&lt;br/&gt;
&lt;a href=&#34;https://medium.com/agile-coffee/%E5%8E%9F%E5%AD%90%E7%BF%92%E6%85%A3-ea93fdb194ab&#34;&gt;《原子習慣》細微改變帶來巨大成就的實證法則｜心得筆記 - 德瑞克 Derek&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那麼按照慣例，節錄文章的一些片段參雜個人心得來丟筆記庫。&lt;/p&gt;
&lt;p&gt;首先要認識這本書，就要先從「習慣帶來的複利」開始：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果每天都能進步 1％，持續一年，最後你會進步 37 倍；&lt;br/&gt;相反地，若是每天退步 1％，持續一年，到頭來你會弱化到趨近於零。&lt;/p&gt;
&lt;p&gt;習慣就是「自我改善」這件事的複利。&lt;br/&gt;如同錢財透過複利加倍，習慣的效果也在你重複執行的過程中加倍。&lt;/p&gt;
&lt;p&gt;隨便挑一天來看，習慣的效應似乎很小，&lt;br/&gt;但幾個月、甚至幾年下來，它們就可能造成極巨大的影響。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XaMGv2l.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們每天的進步和退步，都會延續到下一天。這樣長久下來，就像是複利一樣。&lt;/p&gt;
&lt;p&gt;不管是生產力、知識、壓力或是負面想法，這些東西都會形成迴圈、不斷累積下去。&lt;br/&gt;因此，累積好的習慣是很重要的。&lt;/p&gt;
&lt;p&gt;但是，要建立持久的習慣是很難的。其中一個困難點就是「&lt;strong&gt;失望之谷&lt;/strong&gt;」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在你跨越一個關鍵門檻、解鎖新等級的表現之前，習慣往往看起來沒什麼影響。&lt;/p&gt;
&lt;p&gt;在任何追尋的前期或中期，常常出現所謂的「失望之谷」 — — 你期待有線性的進展，但在前幾天、幾週，甚至幾個月，效果都很不顯著，令人感到挫敗。&lt;/p&gt;
&lt;p&gt;建立持久習慣之所以如此困難，這便是核心因素之一。&lt;br/&gt;我們做了一點小小的改變，沒能看見有形的成果，就決定要放棄。&lt;/p&gt;
&lt;p&gt;你心想：「我每天都跑步，跑了一個月，怎麼身材沒有任何變化？」&lt;br/&gt;一旦萌生這樣的念頭，好習慣就很容易被拋諸腦後。&lt;/p&gt;
&lt;p&gt;然而，想要造成有意義的差異，你必須維持一個習慣夠久，以突破這個停滯期，稱之為「潛伏之力的停滯期」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bdSmbJU.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;而要突破它，我們必須忽視目標、專注於系統上。其中最關鍵的做法，就是「&lt;strong&gt;改變身份認同&lt;/strong&gt;」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;許多人在展開改變習慣的過程時，都把重點放在想要達成什麼。&lt;br/&gt;這會將我們引至以結果為基礎的習慣。&lt;/p&gt;
&lt;p&gt;替代做法是建立以身份認同為基礎的習慣&lt;br/&gt;在這種方式下，我們一開始就把重點放在希望成為什麼樣的人。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目標不是讀一本書，而是成為讀書的人&lt;/li&gt;
&lt;li&gt;目標不是跑一趟馬拉松，而是成為跑步的人&lt;/li&gt;
&lt;li&gt;目標不是學會一種樂器，而是成為演奏音樂的人&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做正確的事很容易，畢竟當你的行為與身份認同完全一致，你便不再追求行為的改變。&lt;br/&gt;你只是相信自己是某種人，然後去做那種人會做的事而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;決定你想要成為什麼樣的人，透過生活中的小勝利來向自己證明&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我很喜歡其中一個例子；「我在戒菸」或是「我不抽菸」，&lt;br/&gt;兩者產生的力量其實並不一樣，因為他們對自己的看法截然不同。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;當我們有了新的身份認同，接著就是認識培養習慣的步驟和方法。&lt;/p&gt;
&lt;p&gt;要形成一個習慣，會經過四個步驟：「&lt;strong&gt;提示、渴望、回應、獎賞&lt;/strong&gt;」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;法則一（提示）：讓提示顯而易見&lt;/li&gt;
&lt;li&gt;法則二（渴望）：讓習慣有吸引力&lt;/li&gt;
&lt;li&gt;法則三（回應）：讓行動輕而易舉&lt;/li&gt;
&lt;li&gt;法則四（獎賞）：讓獎賞令人滿足&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然，它們也可以用來戒除壞習慣：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;法則一的反轉（提示）：讓提示隱而不現&lt;/li&gt;
&lt;li&gt;法則二的反轉（渴望）：讓習慣毫無吸引力&lt;/li&gt;
&lt;li&gt;法則三的反轉（回應）：讓行動困難無比&lt;/li&gt;
&lt;li&gt;法則四的反轉（獎賞）：讓獎賞令人不滿&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;關於這一段，書裡面用了四個章節來逐一說明，還搭配各種小技巧。&lt;br/&gt;因為真的太長了，有興趣的朋友可以直接抓書來看。&lt;/p&gt;
&lt;p&gt;（備註：在習慣戒除的這段，除了原子習慣以外，我個人也很推薦《&lt;strong&gt;多巴胺國度&lt;/strong&gt;》）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;但同樣的習慣，我們執行的動力還是會慢慢變少。要怎麼讓習慣持續吸引我們呢？&lt;br/&gt;書上提了「金髮女孩原則」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;當執行的任務恰好位在當下能力的邊緣，人便會感受到最高程度的動力&lt;/strong&gt;。&lt;br/&gt;不要太難，也不要太簡單，恰到好處就對了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;總覺得這邊有種「舒適圈」和「成長圈」的感覺。畢竟，太舒適就會無聊了嘛：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;成功最大的威脅不是失敗，而是無聊&lt;/strong&gt;。我們之所以對習慣感到倦怠、無聊，是因為它們不再帶來愉悅感，結果變得可以預期。&lt;/p&gt;
&lt;p&gt;而當習慣變得平凡無奇，我們就會為了尋找新鮮感，而讓進步脫離正軌。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;現在我們已經認識了習慣的力量。然後呢？我們要怎麼藉由習慣來變強、變得精通呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想要讓潛能最大化，追求菁英級的表現，就需要更細膩的做法。&lt;br/&gt;你不能盲目重複做一樣的事，卻期待自己變得突出。&lt;/p&gt;
&lt;p&gt;追求精通，習慣是必要的，但只有習慣並不夠，你需要的是自動化習慣與刻意練習的組合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;精通是一個過程，你在此過程中將焦點鎖定在成功的一個微小元素，&lt;br/&gt;不斷重複該技能，直到將其內化&lt;/p&gt;
&lt;p&gt;然後以這個新習慣為基礎，往個人發展的下一個疆界前進。第二次執行時，就任務變得比較容易，但整體難度並沒有下降，因為現在你要把能量投入下一個挑戰中。&lt;/p&gt;
&lt;p&gt;每個習慣都為更高層次的表現解鎖，這是個無止境的循環。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;……總覺得看這段的時候有種看見那群極速開發恐怖份子的 feel 🤔&lt;/p&gt;
&lt;p&gt;利用有目標、有回饋的刻意練習，搭配培養習慣帶來的複利。&lt;br/&gt;這樣一個習慣一個習慣的踏下去，我們的飛輪就轉起來了&lt;/p&gt;
&lt;p&gt;沒錯！這時候就是複習我們第二天轉貼過的「&lt;a href=&#34;https://igouist.github.io/repost/2024/01/0105-bizthinkingkeeplearning/&#34;&gt;學習永動機&lt;/a&gt;」的時候了 XD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後想貼一下這篇文章裡我很愛的一段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最有自制力的，通常是最少用到自制力的人&lt;/strong&gt;。&lt;br/&gt;當你不需要常常動用自制力，就比較容易克制自我。&lt;/p&gt;
&lt;p&gt;你或許可以抵抗誘惑一次或兩次，但不大可能每次都讓抑制裡凌駕於欲望。與其讓每次想要做正確的事情時都鼓起意志力，倒不如把能量用來優化所處的環境，避免無謂的外界干擾。&lt;/p&gt;
&lt;p&gt;這就是自制力的秘密：讓好習慣的提示顯而易見，讓壞習慣的提示隱而不現。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;共勉之。&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這裡。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】為什麼你「不需要」所謂的人生管理系統</title>
      <link>https://igouist.github.io/repost/2024/04/0427-big-note-system/</link>
      <pubDate>Sat, 27 Apr 2024 22:11:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0427-big-note-system/</guid>
      <description>&lt;p&gt;最近在動手整理之前的筆記，也找了一些相關的文章。今天要轉貼的是讓我有點反思的這篇：&lt;br/&gt;
&lt;a href=&#34;https://blog.kyomind.tw/less-is-more/&#34;&gt;為什麼你「不需要」所謂的人生管理系統 - Code and Me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人生管理系統是指那些「全方位自我管理」、「可以改變你的人生」、「提高生產力的方法論」的厲害東西。通常還會有兩個特徵：複雜、流程化。&lt;/p&gt;
&lt;p&gt;而這篇文章開場就說清楚了主要論點：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;打造大而全的「人生管理系統」，期望它全面提升你的生產力，可能不是一個好主意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我相信對大部分人而言，真正有效的提升並不在於建立一個龐大而複雜的系統。反而一些簡單的做法，往往更有效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沿著主要論點，作者提出了三個理由，以下依序用我的理解來筆記一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成本過高&lt;/strong&gt;：要維持這麼大的系統，要花費更多的心力和時間，例如大量的紀錄和手動操作，但這些投入並不會有相應的回報&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適得其反&lt;/strong&gt;：為了跑完複雜、龐大的流程，反而需要做更多不重要的瑣事，變相減少整體產出的價值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;追求完整&lt;/strong&gt;：複雜的系統容易激發我們追求完整的本能，尤其是要改變人生的系統，會讓我們想要講究每個細節、填滿每個空白&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而這些問題組合起來，就變成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在大系統中，我們可能花很多時間思考系統本身的設計、優化管理方法，而忽略了真正對我們重要的事情，也就是系統「本來」想達到的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;追求完整的本能，再結合複雜的系統設計，最終可能導致我們的生產力「下降」，而非提升。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這篇的三個理由各自都有一小段進行說明。其中我覺得這句最有打到我：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分時候，產出價值的關鍵在於「把事情做好」，而不是「做好多事情」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為我個人就是那種喜歡筆記庫放一堆東西看了就開心的類型。文章中一小段也直接命中：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;簡言之，基於一種「完整記錄」的偏好，你可能會增加一些實際上沒多少用處，但會「讓人感覺很好、很完整」的欄位。&lt;/p&gt;
&lt;p&gt;這些欄位在 Notion 閱讀管理資料庫中經常出現，但它們更多是為了追求「完整性」，而非實際的閱讀效益而設計，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;書籍封面圖片&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一項我就中了。我的 Notion 裡放書籍資訊的地方，每一則都放了美美的封面圖= =&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XzacN35.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那麼，像我們這些喜歡存筆記，但又容易被龐大複雜的筆記架構卷進去絞死的朋友們可以怎麼做呢？&lt;/p&gt;
&lt;p&gt;作者提了一種更可行的思路：&lt;strong&gt;「局部實現」&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;局部實現，是一種心法或價值觀，說穿了沒什麼，就是「緊扣著需求尋找並選定方法，需要多少才投入多少」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（這邊讓我有種「如無必要，勿增實體」或是 YAGNI 原則的 feel）&lt;/p&gt;
&lt;p&gt;而對於局部實現，作者也提了兩個點，其中適可而止這項我個人還蠻認同的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、方法改進宜適可而止&lt;/p&gt;
&lt;p&gt;如果當前方法已能做出 80 分成果，一定程度滿足需求了，就不要再繼續追尋「更有效方法」——宜適可而止。&lt;/p&gt;
&lt;p&gt;必須強調，這裡不是指結果一律只追求 80 分就好。&lt;/p&gt;
&lt;p&gt;而是，&lt;strong&gt;如果結果已經有 80 分，但你想要進一步提升，建議不要試圖從「手段、方法」上去改進&lt;/strong&gt;。更不需要去建立一個複雜的系統。&lt;/p&gt;
&lt;p&gt;無論什麼系統，對於已有 80 分的產出結果，很可能已不構成影響。再從方法上改進，企圖更進一步提升產出品質，往往只是緣木求魚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;二、分別而非整體：謹慎關聯&lt;/p&gt;
&lt;p&gt;「系統」二字最讓我害怕的，就是它隱約暗示著系統的各個元件之間，存在著巧妙的「關聯」，所以它們能共同組合成一個「工作流」。&lt;/p&gt;
&lt;p&gt;我的建議是：謹慎關聯。&lt;/p&gt;
&lt;p&gt;可以的話，不要關聯，因為所有關聯都是有「代價」的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而關聯的這一項，作者又說：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;追求完整往往帶來&lt;strong&gt;不必要的複雜&lt;/strong&gt;，而「關聯」正是複雜小惡魔們誕生的溫床&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這，我的筆記之間「耦合」了，難以維護了是吧。好像真的蠻像的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;看完這篇有點反思：會不會很多時候，真的就只是沉迷在一些複雜又龐大的方法裡，而忽略了本來的目的；太執著在一些多餘的操作，而放棄了內容的品質？&lt;/p&gt;
&lt;p&gt;會不會就像一些被濫用的、太過度設計的架構，讓太多的工用在無聊的細微末節，反而讓我們交付價值的速度被拖累？&lt;/p&gt;
&lt;p&gt;但這些我可能還要消化一下。這邊就引用作者的一小段思考來結束吧：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我認為，保持方法的殘缺與遺憾，是一種「&lt;strong&gt;高明的妥協&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;小方法比大系統更容易掌握，更可能讓我們專注於「畫作」本身。&lt;/p&gt;
&lt;p&gt;接受殘缺並不意味著放棄進步，而是在進步的過程中，試著學會區分：哪些只是手段，而哪些才是本質。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見。&lt;/p&gt;
&lt;p&gt;延伸閱讀：&lt;a href=&#34;https://blog.kyomind.tw/four-thousand-weeks-01/#%E6%95%88%E7%8E%87%E9%99%B7%E9%98%B1&#34;&gt;《人生 4 千個禮拜》筆記（一）病態的生產力 #效率陷阱&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】存密碼的正確姿勢</title>
      <link>https://igouist.github.io/repost/2024/04/0423-how-to-save-password/</link>
      <pubDate>Tue, 23 Apr 2024 23:43:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0423-how-to-save-password/</guid>
      <description>&lt;p&gt;前兩天貼了編碼、加密、雜湊的文章，今天接著貼它的續集：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/starbugs/how-to-store-password-in-database-sefely-6b20f48def92&#34;&gt;聽說不能用明文存密碼，那到底該怎麼存？ - Starbugs Weekly 星巴哥技術專欄&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇列了幾個方案，從編碼到雜湊，搭配圖文解釋，非常適合貼給同事然後叫他們密碼不要亂存。&lt;/p&gt;
&lt;p&gt;真的，只要你同事一說「那我們就用 bas&amp;hellip;」就直接把這篇甩在他臉上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：剛剛收到另一篇，感覺也可以拿來甩：&lt;a href=&#34;https://medium.com/@brad61517/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8-%E5%AF%86%E7%A2%BC%E5%AD%98%E6%98%8E%E7%A2%BC-%E6%80%8E%E9%BA%BC%E4%B8%8D%E7%9B%B4%E6%8E%A5%E5%8E%BB%E8%A3%B8%E5%A5%94%E7%AE%97%E4%BA%86-%E6%B7%BA%E8%AB%87-hash-%E7%94%A8%E9%9B%9C%E6%B9%8A%E4%BF%9D%E8%AD%B7%E5%AF%86%E7%A2%BC-d561ad2a7d84&#34;&gt;密碼存明碼，怎麼不直接去裸奔算了？淺談 Hash , 用雜湊保護密碼&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此外黑大也有寫過相關的科普，有興趣的朋友可以參考參考：&lt;a href=&#34;https://blog.darkthread.net/blog/store-pwd-safely/&#34;&gt;密碼要怎麼儲存才安全？該加多少鹽？-科普角度&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按慣例，這邊也迅速節錄一下、收進筆記庫。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案一base64-編碼&#34;&gt;方案一：Base64 編碼&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/svSoCYf.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;先回顧上一篇的這句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所謂的編碼並不會修改資料、也沒有任何加密的效果&lt;/strong&gt;，單純就是換個方式來表達資料而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒有加密效果！沒有加密效果！沒有加密效果！而且 base64 的 &lt;code&gt;==&lt;/code&gt; 真的太好認了= =&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;經過 Base64 後的結果很常都是 = 或 == 結尾，所以如果有一天資料庫真的洩漏出去了，駭客也會在第一時間就發現可以用 Base64 解開，然後在很短的時間內得到原本的密碼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那如果不要用 base64，用一些比較冷門的編碼呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也不行，雖然這些編碼演算法比較少人在用，但頂多騙騙不懂電腦的路人甲乙。真正的駭客很可能會使用各種方法嘗試要 decode 密碼，所以不管用哪一種編碼都是不安全的，結論就是不要使用編碼來儲存密碼！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案二aes256-加密&#34;&gt;方案二：AES256 加密&lt;/h3&gt;
&lt;p&gt;那用加密呢？加密就會牽涉到保管 key 的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因爲使用者要登入時，後端必須確認使用者輸入的密碼加密後跟資料庫內的 password 是否符合，所以還是&lt;strong&gt;必須把 key 放在 server 上&lt;/strong&gt;。既然是放在 server 上，那駭客就還是有機會拿到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因為公司內的員工可能會知道 key，所以就可以從資料庫得到使用者的密碼。如果你知道 Facebook 的工程師只要想要就能得到所有人的密碼，應該也不太放心吧，尤其很多人都在多個網站使用同樣的密碼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;結論就是&lt;strong&gt;因為無法保證 key 的安全，所以不建議用加密的方式保存密碼&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案三sha1-雜湊&#34;&gt;方案三：SHA1 雜湊&lt;/h3&gt;
&lt;p&gt;雜湊代表是不可逆的，通常是拿到密碼之後再雜湊一次比對結果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當使用者 Luka 要登入時，就把他輸入的密碼拿去經過 SHA1 雜湊，&lt;strong&gt;如果算出來的雜湊值跟資料庫內那一大串一樣，那就代表 Luka 有極高機率輸入了正確的密碼&lt;/strong&gt;，所以就放行讓他登入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但因為現在的電腦已經很猛了，所以針對一些長度很短的、常出現的密碼，其實就可以直接拿來比對 SAH1，結果就還是會被猜出來&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;剛剛的 love1234 之所以可以被破解其實是因為他太簡單了，只要把長度為 8 的字串雜湊值都算過一遍就好。而且小寫字母加上數字也才 36 個字元，算一算 36⁸ 大約才 2.8 兆種組合，很快就可以建一個表出來&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你的密碼又臭又長又亂、包含了大小寫甚至還有一些怪怪的字元，像是 -y]@7k[BSB@3m]r$.&amp;gt;&amp;ldquo;R，那以現在電腦的計算速度就還無法破解，因為長度 20 以內由數字、大小寫還有特殊字元組成的字串太多了，算到天荒地老都不見得能算出來&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（只到這步的話，感覺平常只要密碼夠長就沒啥問題？）&lt;/p&gt;
&lt;p&gt;補充：感謝前輩提醒，SHA1 已經在 2017 年被攻破（&lt;a href=&#34;https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html&#34;&gt;Announcing the first SHA1 collision -  Security Blog&lt;/a&gt;），並在 2020 年被公認不再安全（&lt;a href=&#34;https://web.archive.org/web/20200419222030/https://media.ntu.edu.sg/NewsReleases/Pages/newsdetail.aspx?news=ffbd7ab8-233f-42e2-9107-da8dbe784aae&#34;&gt;Critical flaw demonstrated in common digital security algorithm&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;因此&lt;strong&gt;建議不要再用 SHA1 了，請改用更舒適安全的雜湊，例如 SHA256&lt;/strong&gt; 🤔&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案四加鹽--sha256&#34;&gt;方案四：加鹽 &amp;amp; SHA256&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;哦？&lt;strong&gt;聽起來只要密碼夠長、夠亂就沒問題了，那我能不能自己產生隨機字串，把使用者的密碼加長呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;答案是可以，這就是所謂的 &lt;strong&gt;加鹽（Salt）&lt;/strong&gt;。如果今天有一個新的使用者要註冊，這時我們的後端系統就隨機生成一個長度十的字串稱作 Salt，計算 Hash 時就把使用者輸入的密碼跟 Salt 合在一起算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSTfPcWb4-GYn_62s_B440BgoGonmSEw1asWD2NUgPV5g&amp;amp;s&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我現在碰到的密碼處理幾乎都是這種，安心實在。&lt;/p&gt;
&lt;p&gt;原本攻擊者遇到簡單的雜湊，可能都已經把各個密碼對應的表都算好了（延伸閱讀：&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/%E5%BD%A9%E8%99%B9%E8%A1%A8&#34;&gt;彩虹表&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;但只要加了鹽，這張準備好的小抄就不能用啦～只要多一兩個步驟，就可以讓駭客算到天荒地老，何樂而不為呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案五bcrypt&#34;&gt;方案五：Bcrypt&lt;/h3&gt;
&lt;p&gt;完全沒看過的東西！馬上節錄文章內的介紹：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然 Bcrypt 的名字裡面有個 crypt，但他並不是加密法，而是跟 SHA1 一樣是雜湊演算法，唯一的差別是&lt;strong&gt;他計算很慢&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;計算慢有什麼好處呢？前面有提到 SHA1 的雜湊值之所以可以被查表查出來，就是因為現今的電腦計算太快了，就連建個表反查也不需要太多時間&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;而 Bcrypt 則是可以透過設定疊代次數讓他變慢，以疊代五次的 Bcrypt 來說，他的計算速度大概比 SHA1 慢 1000 倍。也就是說，假如你原本用 SHA1 計算三天就能反查出所有使用者的密碼，現在卻要花大概八年的時間才可以&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;竟然就只是，算很慢？但想想還是很有道理，畢竟現在的玩法就是炸裂駭客的時間成本讓他去找別人，這樣看起來其實挺有用的？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;補充argon2&#34;&gt;補充：Argon2&lt;/h3&gt;
&lt;p&gt;這篇上推之後，發現蠻多朋朋提到 Argon2 這個香東西，第一次認識。怕忘記，先抓兩篇丟上來：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#argon2id&#34;&gt;Password Storage Cheat Sheet - OWASP Cheat Sheet Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://debugpointer.com/security/argon2-hash-overview&#34;&gt;What is Argon2 Hash? - debugpointer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前看起來最大的特色是可以自訂 Time Cost、Memory Cost 跟 Parallelism Factor，然後因為太吃記憶體(?) 所以打擊用 GPU 的挑戰者特有效？&lt;/p&gt;
&lt;p&gt;晚點再研究研究，先補充上來🤔&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後標一下總結的這一小句。我發現有很多朋友曾經跟我有一樣的迷思：&lt;br/&gt;「安全是不是就等於完全無法被攻破？」但其實不是這樣的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在資安領域沒有所謂絕對的安全，&lt;strong&gt;你只能不斷提高攻擊者的成本&lt;/strong&gt;，當那個成本高到攻擊者無法負荷時（像是破解一個密碼要租超級電腦連續計算十年），那就可以說是足夠安全了XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們下次（不敢說明天了）見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】編碼、加密、雜湊</title>
      <link>https://igouist.github.io/repost/2024/04/0419-encoding-encrypt-and-hashing/</link>
      <pubDate>Sat, 20 Apr 2024 00:23:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0419-encoding-encrypt-and-hashing/</guid>
      <description>&lt;p&gt;今天在群組剛好看有人在討論加密跟雜湊，馬上把收藏已久的這篇拿出來：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c&#34;&gt;一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash - Starbugs Weekly 星巴哥技術專欄&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章依序介紹編碼、加密和雜湊，並且都有給範例和應用，很適合剛認識的朋友。（也可以拿去丟給每次都講錯的朋友）&lt;/p&gt;
&lt;p&gt;那按照慣例，我們也迅速筆記一下，讓我收到卡片庫裡：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先是編碼。&lt;strong&gt;編碼其實就是換個方式表達資料而已&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如跟朋友約好 ㄅ=A, ㄆ=B&amp;hellip; 這樣轉換下去，基本上只要知道對應的內容就可以馬上轉回來，摩斯密碼就是這類。&lt;/p&gt;
&lt;p&gt;（題外話，以前還在紙條上用過&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/%E8%B1%AC%E5%9C%88%E5%AF%86%E7%A2%BC&#34;&gt;豬圈密碼&lt;/a&gt; xD）&lt;/p&gt;
&lt;p&gt;延伸閱讀：&lt;a href=&#34;https://life.huli.tw/2022/05/20/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/&#34;&gt;為什麼打開檔案時會看到亂碼？跟著小明一起從傳紙條學習編碼&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接著認識一下二哥：加密。&lt;/p&gt;
&lt;p&gt;加密不只是像編碼一樣單純轉換而已，而是&lt;strong&gt;需要使用金鑰&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如 ㄅ=A, ㄆ=B 之後，這時候我們約好 key=2，代表字母要往下數幾格，這時候就變成 ㄅ=C, ㄆ=D，如果不知道 key=2 就可能會數錯了&lt;/p&gt;
&lt;p&gt;當然現在用的加密還是比較正經一點，被暴力解都要跑超久那種的。此外，根據加解密是不是用同一把 Key，還會分對稱式跟非對稱式&lt;/p&gt;
&lt;p&gt;有興趣的朋友可以閱讀內文，以及延伸閱讀：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@RiverChan/%E5%9F%BA%E7%A4%8E%E5%AF%86%E7%A2%BC%E5%AD%B8-%E5%B0%8D%E7%A8%B1%E5%BC%8F%E8%88%87%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-de25fd5fa537&#34;&gt;基礎密碼學(對稱式與非對稱式加密技術) - Chan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/mr-efacani-teatime/%E5%9C%96%E8%A7%A3-%E9%9D%9E%E5%B0%8D%E7%A8%B1-%E8%88%87-%E5%B0%8D%E7%A8%B1-%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-37c01f3651dc&#34;&gt;圖解“非對稱”與“對稱”加密技術&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;最後是雜湊，雜湊沒在跟你還不還原的，直接就是打爛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把各個欄位/字元 丟進去某個公式計算的方式就叫做雜湊（Hash），而這個計算公式就稱為雜湊函數（Hash function），過程可能會做各種加減乘除，最後算出一個值或字串。&lt;/p&gt;
&lt;p&gt;因為最後一個數字是經由前幾個數字計算、濃縮出來的，所以理所當然不可能由雜湊後的結果回推出前幾個數字分別是什麼，所以&lt;strong&gt;雜湊的過程是不可逆的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這邊想貼另一篇的說明，也非常好懂：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10208884&#34;&gt;[資料結構] 雜湊 (Hash)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;舉例來說，雜湊函數就像一台果汁機，我們把蘋果香蕉你個芭樂 (資料) 都丟進去打一打、攪一攪，全部變得爛爛的很噁心對吧？！這時候出來的產物 (經過雜湊函數後的值)，是獨一無二的，沒有辦法反向組合成原來的水果 (資料)。倘若我們把蘋果改成紅龍果，出來的產物 (經過雜湊函數後的值) 就會跟著改變，變成桃紅色的，不再是原來的淡黃色。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我個人通常是在存密碼的時候碰到，反正就算要比對的話，只要照同樣步驟打爛兩次結果長的一樣就好了吧～&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後引用一下這篇文章簡潔有力的小結，結束這一回合：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;編碼（Encoding）
&lt;ul&gt;
&lt;li&gt;只是換個方式表達資料&lt;/li&gt;
&lt;li&gt;不需要 Key 即可解碼（不安全）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加密（Encrypt）
&lt;ul&gt;
&lt;li&gt;用 Key 來保護資料的機密性&lt;/li&gt;
&lt;li&gt;加密跟解密都需要 Key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雜湊（Hashing）
&lt;ul&gt;
&lt;li&gt;把資料丟進一串公式計算出一個結果&lt;/li&gt;
&lt;li&gt;無法反推回原字串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，明天見～&lt;/p&gt;
&lt;p&gt;&lt;del&gt;打爐石打到超時 XD，新模式也太好玩&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】精準提問術</title>
      <link>https://igouist.github.io/repost/2024/04/0418-question/</link>
      <pubDate>Thu, 18 Apr 2024 17:07:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0418-question/</guid>
      <description>&lt;p&gt;最近專案進行得熱烈，團隊間的溝通也比較頻繁。決定來轉貼這一篇：&lt;br/&gt;
&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10213376&#34;&gt;第一天上班就該學會的精準提問術&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇提供了我們菜鳥朋朋們一些工作上溝通要注意的事情，例如「讓對方感受到你有尊重他的時間」、「溝通頻率一天不要超過三次」等等。&lt;/p&gt;
&lt;p&gt;除此之外，還列了一些小技巧。&lt;br/&gt;例如&lt;strong&gt;想要從對方身上獲得資訊的時候，可以描述一下預期結果和實際結果的差異&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「你原本認知的事情是要跑 A 流程，但試著執行後卻發現出現預期外的 B 結果，想詢問自己認知是否有錯」&lt;/p&gt;
&lt;p&gt;「我看了你的 UI 畫面，本來是認為從 A 頁面要連到 B 頁面應該是用 slide 轉場，但是我看到了 C 頁面好像跟我預期想像的動畫轉場好像不一樣，你可以描述你心目中的正確轉場方式嗎？」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或是&lt;strong&gt;要請別人替你處理事情時，可以試試提供選擇題&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「這個問題困擾了我很久，我想到 A、B、C 作法，但不知道哪個比較好，你可以幫我看看哪個比較適合呢？」&lt;/p&gt;
&lt;p&gt;「主管你臨時插件的 B 案子我覺得沒問題，那你要先做這個 B 案子嗎？如果是這樣 本來 A 案今天下班前就可以給你，就會變成 後天下班前才能給你，這樣 ok 嗎？」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搭配同個系列的這兩篇服用，效果更佳：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10213477&#34;&gt;專業就是連麻瓜都聽得懂的溝通術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10214057&#34;&gt;工程師如何與 PM 溝通 - 菜鳥工程師必修的 30 堂溝通課&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;如果想繼續了解「我該怎麼發問」，或是希望自己至少上班的時候不要問出白癡問題的話，&lt;br/&gt;&lt;strong&gt;絕對絕對要閱讀這一篇經典&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way&#34;&gt;提問的智慧 (How To Ask Questions The Smart Way)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果真的沒時間，至少可以看看〈好問題跟蠢問題〉以及〈不該問的問題〉兩小節。拜託。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;反正我現在看到怪怪的問題都直接把這篇文甩過去&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們下篇見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】電子書的背光與前光</title>
      <link>https://igouist.github.io/repost/2024/04/0416-frontlight-and-backlight/</link>
      <pubDate>Tue, 16 Apr 2024 22:29:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0416-frontlight-and-backlight/</guid>
      <description>&lt;p&gt;這幾天被某台新出的彩色電子閱讀器燒到，剛好眼睛也開始有點不太舒服，整個非常心動。&lt;/p&gt;
&lt;p&gt;但其實我一直不是很懂電子書閱讀器的發光功能是要幹嘛用的，查資料翻到這兩篇，決定轉貼上來：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jackscogito.blogspot.com/2021/03/blog-post.html&#34;&gt;彩色電子紙的前光(背光)迷思 - Jack Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jackscogito.blogspot.com/2022/05/blog-post_19.html&#34;&gt;彩色電子紙開前光是否就失去了護眼的意義？ - Jack Black&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這兩篇還有科普了電子書的一些迷思，例如「光線太暗會傷眼」、「亮度越亮顏色越鮮豔」等等&lt;/p&gt;
&lt;p&gt;但因為我之前的迷思主要在「如果我用閱讀器開了這個燈，那不是跟我用平板一樣？」，因此主要節錄一些前光和背光的部份來筆記就好。&lt;/p&gt;
&lt;p&gt;首先讓我們看看電子書的發光方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所謂電子紙的前光源，是裝置在電子紙紙面側邊上方的 LED 燈珠&lt;/strong&gt;，它發出的光會透過導光板均勻的分佈到紙面中間上方並照射墨水分子，而墨水分子再把這個光反射回來給我們看到，因此也是反射光&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;彩色電子紙的前光源其實跟環境的人工照明光源（如檯燈）並無不同&lt;/strong&gt;，一樣都是光線照射到墨水分子後再反射墨水分子的顏色光到使用者的眼睛，與液晶螢幕、OLED、Mini or Micro LED 這些使用背光源照明直射成像的方式不一樣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;電子書閱讀器的是「前光」，就是其實有個很近的檯燈照到文字，再反射到眼睛上。&lt;/p&gt;
&lt;p&gt;而不是像平板那種直接在液晶背後發光的「背光」，也就不會有背光為了顯示而必須比環境還亮、造成眼睛負擔的問題了&lt;/p&gt;
&lt;p&gt;（當然，如果用前光或檯燈然後跟環境光源差異很大，例如房間超暗檯燈超亮，還是會造成負擔）&lt;/p&gt;
&lt;p&gt;大概是這樣，今天認識了「前光」和「背光」。感覺從名字就能看出差異🧐&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那我們什麼時候要把電子書的背光打開呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上開啟前光的時機只有一個原則：&lt;strong&gt;當螢幕距離眼睛必須要小於 30 公分才有辦法看清楚字或圖片的輪廓時，就必須要開前光&lt;/strong&gt;，因為這個時候代表對比度已經太差了，開始要多用眼力與腦力的狀態。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當發現身子不由自主地一直想靠近的時候，應該就是警訊了。就像另一段所說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正造成眼睛過大負擔的其實是近距離長時間用眼，例如字太小為了要讀清楚而拉近距離，或是太暗想看清楚而拉近距離，造成睫狀肌持續收縮得不到休息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要離螢幕太近！不要離螢幕太近！不要離螢幕太近！&lt;br/&gt;&lt;del&gt;替每次都把整個把臉貼在螢幕上的朋朋默哀&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;大 Guy 這樣。今天的轉貼就來點豆知識，我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】CAP 定理與 Remembrance Inc.</title>
      <link>https://igouist.github.io/repost/2024/04/0415-cap-and-remembrance-inc/</link>
      <pubDate>Mon, 15 Apr 2024 23:43:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0415-cap-and-remembrance-inc/</guid>
      <description>&lt;p&gt;今天要推薦的是這篇 CAP 的小故事：&lt;br/&gt;
&lt;a href=&#34;http://ksat.me/a-plain-english-introduction-to-cap-theorem&#34;&gt;A plain english introduction to CAP Theorem - Kaushik Sathupadi&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;為了怕有朋友跟我一樣對 CAP 不太熟，這邊先筆記一下。&lt;/p&gt;
&lt;p&gt;首先讓我們認識 CAP 各自代表的意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt;：使用者總是可以查到最新的資料&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可用性（Availability）&lt;/strong&gt;：使用者總是可以正常讀寫，不會突然送你個 Error&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分區容錯性（Partition tolerance）&lt;/strong&gt;：即使系統之間斷訊了，大家各自還是得做事，做完還要能同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CAP 定理是指&lt;strong&gt;在一致性、可用性、分區容錯性這三項之中，我們只能滿足其中兩項&lt;/strong&gt; :(&lt;/p&gt;
&lt;p&gt;通常來說，我們會先拿著 P 確保服務活著，然後在 C 一致性跟 A 可用性之間痛苦地抉擇&lt;/p&gt;
&lt;p&gt;例如保證可以操作，但是還沒同步完所以會查到舊資料（AP）；或是被卡著乖乖等到資料同步完才能查（CP）等等&lt;/p&gt;
&lt;p&gt;這部分想進一步了解的朋友可以參考最後的延伸閱讀。現在讓我們回到今天推薦的這篇文章&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這篇小故事從「幫客人記得事情」的一人公司(?)開始，&lt;br/&gt;隨著客戶數量變多，老闆決定請老婆進來一起幫忙記東西（殊不知這就是分散式惡夢的開端）&lt;/p&gt;
&lt;p&gt;他們經歷了第一次查詢失敗危機、想出一些同步機制，然後面對可怕的休假等等&lt;/p&gt;
&lt;p&gt;最後…… 結局就留給各位自己看了。&lt;/p&gt;
&lt;p&gt;總之，以後有人問起 CAP 的問題，我決定就甩這篇給他們了 xD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;延伸閱讀，想多認識 CAP 一點的可以繼續看看下面這些文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/henryr/cap-faq&#34;&gt;The CAP FAQ - henryr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/cap%E5%AE%9A%E7%90%86101-3fdd10e0b9a&#34;&gt;CAP 定理 101 — 分散式系統，有一好沒兩好 - 後端新手村&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.puritys.me/docs-blog/article-461-%E4%BB%80%E9%BA%BC%E6%98%AF-CAP-%E5%AE%9A%E7%90%86.html&#34;&gt;什麼是 CAP 定理 - puritys.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】Code Review 的壞味道</title>
      <link>https://igouist.github.io/repost/2024/04/0414-bad-smells-on-code-review/</link>
      <pubDate>Sun, 14 Apr 2024 22:48:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0414-bad-smells-on-code-review/</guid>
      <description>&lt;p&gt;剛剛收件閘巡到一篇 Code Review 的文章，感覺挺適合轉貼上來分享給大家：&lt;br/&gt;
&lt;a href=&#34;https://www.huanlintalk.com/2024/04/code-review-good-and-bad.html&#34;&gt;Code review 的好處與 bad smells - Huan-Lin 學習筆記&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我們在 &lt;a href=&#34;https://igouist.github.io/repost/2024/01/0113-code-review&#34;&gt;1/13&lt;/a&gt; 的時候分享過 Code Review 的這兩篇：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://william-yeh.net/post/2023/09/on-code-review/&#34;&gt;從 Code Review 的小事看大事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cythilya.tw/2020/11/01/google-how-to-do-a-code-review/&#34;&gt;Google 教我如何進行 Code Review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;經由這些文章，我們能大約知道 Code Review 該看哪些東西，又有什麼好處等等（問就是 FOUR EYES!）&lt;/p&gt;
&lt;p&gt;而今天轉貼的這篇 Huan-Lin 大大的〈Code review 的好處與 bad smells〉，則提到了另一個有趣的點：&lt;strong&gt;有問題的 Code Review 會有哪些壞味道？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文章裡面列了三項，並且每一項都用了一小段來解釋。這邊就按照慣例，簡單收一下筆記：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;馬馬虎虎&lt;/strong&gt;：我很忙，看個意思意思就好&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合作無間&lt;/strong&gt;：自個兒人，幫個忙唄&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;粗魯評論&lt;/strong&gt;：挑毛病、戰習慣、叫你改就改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有採用 Code Review 的朋朋們，也可以觀察一下團隊有沒有提到的這些狀況&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fate/Samurai Remnant　白金！</title>
      <link>https://igouist.github.io/post/2024/04/fate-samurai-remnant/</link>
      <pubDate>Sun, 14 Apr 2024 05:20:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2024/04/fate-samurai-remnant/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nzs7CTb.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;要開玩 DLC 的時候跳了盃，按照慣例來發一下白金心得文～&lt;/p&gt;
&lt;p&gt;以下簡單列一下個人覺得的優點（當然有雷）&lt;/p&gt;
&lt;p&gt;伊織和 Saber 這對主從很有特色。尤其是主角伊織的成長很有感，也有反應在遊戲性上，後期拿到空之架式的時候割草很爽快。在師徒決戰、伊織使出祕劍的時候，身為 Fate 玩家和動畫宅真的看得非常開心。&lt;/p&gt;
&lt;p&gt;除此之外，&lt;strong&gt;二週目增加劇情、開始能漸漸窺見到主角內心異常的部份很棒&lt;/strong&gt;。劍鬼意外地很有魅力，最後的對戰和收尾方式也相當舒服，應該是歷代精神狀況最令人「蛤？」的主角了吧。真不錯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/K4XVKnH.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了兩位主角之間的互動，其他主從之間的互動也還處理得還不錯，尤其是正雪和鄭成功。像是「我好好地遵守著您的命令！」這一段的張力很夠。&lt;/p&gt;
&lt;p&gt;也有可能是因為我意外地蠻喜歡「&lt;strong&gt;切換視角到其他陣營的角色來認識他們&lt;/strong&gt;」的處理方式吧。但當然也有一些橋段讓我，呃，不是很理解，例如三郎，到底在幹嘛？即使通關後已經幾個月的現在，這角色還是讓我充滿疑惑，而且操作起來也很難用。真的很難用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CsLn2eJ.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;既然都聊到三郎了，接著來補一下個人認為的缺點：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;戰鬥時的破盾很煩，很拖時間&lt;/strong&gt;。可以理解說身為人類打這些妖怪是很麻煩啦，可是我都打到後期了還在幫他們刮痧，真的很拖棚。&lt;/p&gt;
&lt;p&gt;另外，&lt;strong&gt;有些角色的戲份少到令人意外&lt;/strong&gt;。例如第十五騎，劇情鋪了這麼久，不會真的只是為了出來打個招呼而已吧？也許 DLC 會交代吧。也許。&lt;/p&gt;
&lt;p&gt;最後，也是最令我崩潰的則是踩到超臭 Bug：&lt;br/&gt;
&lt;strong&gt;千辛萬苦蒐集完畢之後，居然沒跳白金！沒跳白金！沒跳白金！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;害我浪費了一堆時間爬文、哀號。直到放棄之後，大約四個月之後才等來了官方修復。太傷害了。&lt;/p&gt;
&lt;p&gt;如此如此，準備來開玩 DLC 慶安神前比武了。最後就貼個完成度紀念一下吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/V6FKDDw.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;哦對，然後豬真的很可愛。滿分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/I9q9FZo.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】程式設計是一座抽象化的金字塔</title>
      <link>https://igouist.github.io/repost/2024/04/0412-programming-is-a-pyramid-of-abstraction/</link>
      <pubDate>Fri, 12 Apr 2024 23:58:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0412-programming-is-a-pyramid-of-abstraction/</guid>
      <description>&lt;p&gt;最近對「每個人的抽象化思考能力有所不同」蠻有感的。想轉貼之前 vgod 大大的這篇：&lt;br/&gt;
&lt;a href=&#34;https://blog.vgod.tw/2008/10/10/divine-code-7/&#34;&gt;追求神乎其技的程式設計之道(七） - vgod&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個系列真的蠻好看的，但今天推的主要是文章中的這段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我覺得所有的程式都可以看成一個巨大的金字塔，頂端是這個程式的最終目標，一個模糊的概念；底部是細節的程式碼。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而中間是一個經由不斷切割與抽象化所構成的高塔&lt;/strong&gt;，每一個程式都是切割為許多的元件、模組，再切為更細的 class 和 function，再來是最底下的變數與邏輯判斷式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;接著讓我們看看像我這樣的菜鳥跟真正的專業人士，他們所看見的「金字塔」有什麼差別：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很有趣的是，&lt;strong&gt;不同的人看這個塔就會有不同的樣子。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初學者看到的塔只有兩層，他們和人溝通的方法是鉅細靡遺的描述程式碼：「我在這裡寫個 for，第一次把  i設成 0，在迴圈內每次檢查這個陣列的第 i 個元素…」&lt;/p&gt;
&lt;p&gt;在他們眼中只有程式的目標和程式碼本身，所以還可能會寫出下面這種讓人哭笑不得的註解：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = 1;  // 把 a 設為 1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;有些經驗後，會再多看到一層，利用 function 把一段程式碼包裝起來，賦予一個名字和獨特的意義。學會這個後，就可以利用抽象化後的 function 名稱來溝通，例如：「我在這個迴圈裡每次都用 isCaptial 來檢查這個字串是不是都是大寫…」&lt;/p&gt;
&lt;p&gt;再接下去呢，可以再利用 class，利用 design patterns，利用更大的模組、子系統來溝通，認真說起來，這其實是一個無止境的切割。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;隨著我們的經驗增長，我們漸漸可以切出更多的「層」或「模組」，從不同顆粒度的層次去檢視、溝通。這就是抽象化的力量。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後再截一段我很喜歡的段落：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在資訊科學這個領域，抽象化是個無窮無盡的必要行為。因為世間萬物實在太多太複雜，我們只好不斷把東西歸類，並賦予一個名稱、一個意義，經由這樣的過程我們才能用抽象的語言和符號來溝通，避免每次都要從最底層的瑣碎細節開始說起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而平凡和偉大的程式設計師，我覺得他們之間的差別就在於能看到多少這個高塔中間的分層&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;厲害的高手都很善於切換自己思考的高度，一下能跟你討論高階的系統架構設計，一下又能深入到最底下的組合語言和二進位除錯。他們腦中除了有這高塔每一層的詳盡平面圖，甚至也非常了解不同樓層之間的交互關係。&lt;/p&gt;
&lt;p&gt;平凡的程式設計師大多只能專注於自己所開發的範圍，對於其上的架構或其下的細節都不一定能理清頭緒，萬一出現 bug 也會搞不清楚到底是哪一層出了錯，而被完全無關的細節絆住手腳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望我們都能擁有更多不同層次的視野，共勉之。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這篇文章的後半段聊了一些被語言的慣例限制了思考方式的故事。&lt;/p&gt;
&lt;p&gt;對於這方面，我也推薦 &lt;a href=&#34;https://igouist.github.io/repost/2024/01/0110-language-affect-the-way-you-think-about-programming&#34;&gt;1/10&lt;/a&gt; 轉貼過的這篇：&lt;br/&gt;
&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10201905&#34;&gt;一個語言如果不改變你的思考方式，就不值得學？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一種語言，其實都是一種對資訊的選擇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】Git 同時推送到兩個遠端 Repo</title>
      <link>https://igouist.github.io/repost/2024/04/0411-git-add-push-remote/</link>
      <pubDate>Thu, 11 Apr 2024 23:58:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0411-git-add-push-remote/</guid>
      <description>&lt;p&gt;今天玩 Azure Function 玩太晚了，11:50 才想起來還沒寫推薦= = 果斷來轉貼一則小技巧&lt;br/&gt;
&lt;a href=&#34;https://blog.miniasp.com/post/2021/12/02/Working-with-multiple-git-remote-repositories&#34;&gt;如何讓 Git 可以用一個 git push 同時推送到多個遠端儲存庫 - The Will Will Web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中我個人最常用的就是這段推送到多個 Remote Repo 的部份：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有時候我們會需要一次推送變更到多個不同的 Git 遠端儲存庫，你其實可以設定一個 git push 命令就能同時推送到兩個不同的遠端儲存庫！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://images.plurk.com/4dgWrWvBI1XKSQKoaEepef.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;簡單來說就是先看一下 Repo 現在都抓了哪些遠端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git remote -v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origin  https://github.com/User/demo01.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origin  https://github.com/User/demo01.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後用 &lt;code&gt;git remote set-url&lt;/code&gt; 來把 push 時要推的遠端多設一組就好了～&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote set-url --add --push origin https://github.com/User/demo01.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote set-url --add --push origin https://github.com/User/demo02.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ps. 記得原本的 origin 也要先設一次，養成良好習慣 :)&lt;/p&gt;
&lt;p&gt;我體感上這個實用小技巧還蠻常(?)用到的啦，分享給大家&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，明明明天見！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】事後檢討：從失敗中學習</title>
      <link>https://igouist.github.io/repost/2024/04/0410-postmortem-culture/</link>
      <pubDate>Wed, 10 Apr 2024 23:16:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0410-postmortem-culture/</guid>
      <description>&lt;p&gt;團隊這幾天有發生需要回顧的問題，馬上收到這篇。剛好拿出來推給各位朋朋：&lt;br/&gt;
&lt;a href=&#34;https://sre.google/sre-book/postmortem-culture/&#34;&gt;Postmortem Culture: Learning from Failure - sre.google&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The cost of failure is education.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什麼是事後檢討postmortem什麼時候要寫&#34;&gt;什麼是事後檢討（Postmortem）？什麼時候要寫？&lt;/h3&gt;
&lt;p&gt;事後檢討就是在翻車之後，把「我們翻車了，翻了三圈半、我們都幹了些什麼來把車翻回來、到底為什麼會翻車、後續要怎麼避免翻車」等資訊記錄下來的東東。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The primary goals of writing a postmortem are to ensure that the incident is documented, that all contributing root cause(s) are well understood, and, especially, that effective preventive actions are put in place to reduce the likelihood and/or impact of recurrence.&lt;/p&gt;
&lt;p&gt;寫一份事後檢討的主要目標是&lt;strong&gt;確保事件被記錄下來，所有貢獻的根本原因都被充分理解，尤其是要採取有效的預防措施來減少再次發生的可能性和/或影響&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那什麼時候會需要寫檢討？這篇文章列了幾個狀況：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定比例的使用者不能使用&lt;/li&gt;
&lt;li&gt;掉資料&lt;/li&gt;
&lt;li&gt;工程師被叫去 on-call 退版&lt;/li&gt;
&lt;li&gt;花了有夠解還沒處理完問題&lt;/li&gt;
&lt;li&gt;監控整個失敗，拖到被人發現&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/i1KPUSy.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;無責任文化&#34;&gt;無責任文化&lt;/h3&gt;
&lt;p&gt;既然都要寫檢討了，大多時候就是有事情搞砸了。為了不要讓寶貴的學習機會淪為情緒發洩和攻擊別人的場合，這篇文前半段就開始提了「&lt;strong&gt;無責任（Blameless）&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;用我們比較熟悉的話來說，就是「對事不對人」，把目光放在「&lt;strong&gt;我們的服務哪些方面還可以改進&lt;/strong&gt;」，藉此得到變得更強大的機會&lt;/p&gt;
&lt;p&gt;從另一方面來說，如果放任大家互咬、培養出互相指責的扭曲文化，那很多問題就會被蓋牌，這樣其實更危險🤔&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a postmortem to be truly blameless, it must focus on identifying the contributing causes of the incident without indicting any individual or team for bad or inappropriate behavior.&lt;/p&gt;
&lt;p&gt;為了使事後檢討是真正無責任（Blameless）的，&lt;strong&gt;它必須專注於確定事件的發生原因，而不指責任何個人或團隊的不良或不適當行為&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;A blamelessly written postmortem assumes that everyone involved in an incident had good intentions and did the right thing with the information they had. If a culture of finger pointing and shaming individuals or teams for doing the &amp;ldquo;wrong&amp;rdquo; thing prevails, people will not bring issues to light for fear of punishment.&lt;/p&gt;
&lt;p&gt;一份無責任的事後檢討假設參與事件的每個人都有良好的意圖，並根據他們所擁有的信息做出正確的決策。如果存在一種指責和羞辱個人或團隊做出“錯誤”決策的文化，人們將因為害怕受罰而不敢揭示問題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;補充：如果想要看一些反例，可以讀前陣子的這篇&lt;a href=&#34;https://mp.weixin.qq.com/s/w7YzdxSrAsIqk2gXBks9CA&#34;&gt;〈迷失在阿里雲的年輕人〉&lt;/a&gt;裡&lt;br/&gt;「濫用的 Code Review 和故障復盤」這一小節。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;事後檢討的審查標準&#34;&gt;事後檢討的審查標準&lt;/h3&gt;
&lt;p&gt;寫完檢討書 v1 之後，會先在團隊內請資深工程師幫看一下 O 不 OK。要看的點有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相關的資料有沒有被收集起來給後人參考？&lt;/li&gt;
&lt;li&gt;影響評估有沒有完整？&lt;/li&gt;
&lt;li&gt;根本原因的分析有沒有足夠深入了？&lt;/li&gt;
&lt;li&gt;後續的行動計劃和修復工作都列好了嗎？有排好優先順序了嗎？&lt;/li&gt;
&lt;li&gt;我們有沒有跟利害關係人（stakeholders）說過結果了？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都搞定之後就可以開始散佈出去了，希望其他人能從我們翻車的姿態中學會教訓。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;wheel-of-misfortune&#34;&gt;Wheel of Misfortune!&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;這句有點咒語的 Feel，不知道怎麼翻，「衰鬼之輪」嗎？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;後半段一些文化相關的東西，像是讀書會、每月檢討等等的都很平常，但這個輪子還蠻有趣的&lt;/p&gt;
&lt;p&gt;基本上就是大家（抓著新來的菜鳥 SRE）一起，&lt;strong&gt;把過去的某次事故報告給調出來，現場就開始當劇本來跑團&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New SREs are often treated to the Wheel of Misfortune exercise (see Disaster Role Playing), in which a previous postmortem is reenacted with a cast of engineers playing roles as laid out in the postmortem. The original incident commander attends to help make the experience as &amp;ldquo;real&amp;rdquo; as possible.&lt;/p&gt;
&lt;p&gt;新進的 SRE（網站可靠性工程師）通常會參與「厄運之輪」的練習（參見災難角色扮演），在這個練習中，以前的事故回顧會被重新演繹，工程師們扮演著事故回顧中所規定的角色。原始的指揮官也會參與其中，以盡可能使體驗更加「真實」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事故還可以放個幾年之後拿出來當桌遊(?)，有種挺歡樂的感覺。這樣我很願意好好寫檢討書耶 xD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天嘗試用新的格式來推薦，本來想說看能不能縮短每次整理心得的時間&lt;/p&gt;
&lt;p&gt;不過反正每次要打利害關係人，都會打成厲害關西人，選字的時間就比縮短的時間久了，根本沒差= =&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】軟體開發者的價值</title>
      <link>https://igouist.github.io/repost/2024/04/0408-the-values-of-software-developer/</link>
      <pubDate>Tue, 09 Apr 2024 00:06:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0408-the-values-of-software-developer/</guid>
      <description>&lt;p&gt;今天朋友丟了卡米哥大大的另一篇文章給我，立馬選擇轉貼上來：&lt;br/&gt;
&lt;a href=&#34;https://etrexkuo.medium.com/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%83%B9%E5%80%BC-991ba03d140f&#34;&gt;軟體開發者的價值 - 卡米哥&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;身為一個軟體開發者，我一直以來都想知道我的價值到底在那裡。在我長期的觀察和思考，終於有了一個初步的答案，若站在老闆的角度來看，我的價值其實就是我寫下來的程式碼總共幫老闆賺了多少錢。&lt;/p&gt;
&lt;p&gt;因為老闆僱用你，就是希望你可以幫他打造一台自動賺錢機器，然後靠機器運轉來達成自動賺錢。若要深入探討的話，我想先談談什麼是價值，以及什麼是程式語言，從思考一行程式的價值開始，到思考軟體開發者的價值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;從這個出發點開始，作者大大一路思考：什麼是價值？什麼是程式語言？程式的價值呢？開發者的價值呢？&lt;/p&gt;
&lt;p&gt;其中一個思路我覺得不錯，那就是「&lt;strong&gt;程式的價值 = 執行次數 * 執行一次生成的平均價值&lt;/strong&gt;」，&lt;br/&gt;
也就是說：&lt;strong&gt;程式執行是會賺錢的&lt;/strong&gt;（當然有些程式的價值可能是負的 xD）&lt;/p&gt;
&lt;p&gt;而我們軟體開發者，就需要運用技術力來讓程式能夠繼續跑下去、繼續賺更多錢。&lt;br/&gt;
所以，開發者提升開發速度、提升程式碼品質等等，都是在提高讓程式能繼續跳表(?)的戰力&lt;/p&gt;
&lt;p&gt;這個觀點也能夠解釋為什麼我們應該追求上一篇文章提到的那些價值觀（程式碼品質、維護成本、修改成本等等），因為這些都影響了我們產出的價值&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;此外，還有幾個我特別標記的點。其中一項就是關於技術債的部份：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在我之前的工作經歷當中，大部分時間是在做新創公司的案子，而新創公司的客戶數通常趨近於零，我曾經開發並且上線一個新的網站，卻始終沒有用戶真的去使用，經營了一兩年，結果測試環境上的資料還比正式環境上的還多，在這種情況下，即便程式的效能再好，沒人來使用的網站所產生的價值其實是趨近於零。&lt;/p&gt;
&lt;p&gt;= &lt;strong&gt;沒有人在用的程式，產值是零&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;當時是案主付錢委託我們開發網站，所以我們有收到錢，只是網站並沒有替案主賺到錢。我們採用的技術很好，自動測試也寫的很完整，卻做出了一個垃圾，而在此同時，我接了另一個案子的長期維護，這個專案裡程式的架構很亂，欠了一堆技術債，而且都沒寫測試，但是客戶人數足夠而且一直有下訂單，所以反而這個案子就有在賺錢。&lt;/p&gt;
&lt;p&gt;= &lt;strong&gt;即便是充滿技術債的程式也能產生價值&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我發現像我這樣的菜鳥常常會有一種迷思：這專案的技術債有夠多！真沒價值！&lt;/p&gt;
&lt;p&gt;但不是這樣的，並不是臭不臭就可以斷定程式的價值。只要這個專案還是收入來源，它其實就還在產生價值。&lt;del&gt;你養蟲，蟲也養你&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;就像&lt;strong&gt;泳池的收入並不是取決於裡面的尿多不多，而是進來游的人多不多嘛&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而我們的目標就是用我們的技術力和解決問題的能力，替它排除更多的障礙、讓它繼續產生價值，然後把錢帶回來給我們(?)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那如果我們做不到呢？例如上頭就是想要你寫一些沒人用的東西？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然你在一家公司內可能不能決定要寫什麼程式，但你可以選擇要去哪一家公司寫程式，去能被執行最多次，且單次執行所生成價值最高的專案寫程式，則可以最大化自己的價值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒錯！是時候歡迎我們 &lt;a href=&#34;https://igouist.github.io/repost/2024/02/0227-change-your-company&#34;&gt;2/27&lt;/a&gt; 推薦過的這篇「&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10329311&#34;&gt;上游思維&lt;/a&gt;」的結論：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Change your company, or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change your company.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】軟體開發的價值觀</title>
      <link>https://igouist.github.io/repost/2024/04/0407-the-values-of-software-development/</link>
      <pubDate>Sun, 07 Apr 2024 23:02:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0407-the-values-of-software-development/</guid>
      <description>&lt;p&gt;收假前來看點故事吧，今天要推薦的是這篇：&lt;br/&gt;
&lt;a href=&#34;https://etrexkuo.medium.com/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%9F%B9%E9%A4%8A-8fee43c76195&#34;&gt;軟體開發者的培養 - 卡米哥&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇的主軸圍繞在作者 20 年來的學習歷程，以及過程中培養的各項價值觀&lt;/p&gt;
&lt;p&gt;從剛入門大家都有過的「寫了能跑、越短越好」開始，隨著問題越來越難、越複雜，也開始有了效能、可讀性、可維護性等等的考量&lt;/p&gt;
&lt;p&gt;作者很貼心的把培養出來的這些價值觀分項列點地說明。推薦大家直接過去看原文，段落明確，說明清晰，值得收藏&lt;/p&gt;
&lt;p&gt;但因為我畫的重點太多了（老毛病），多到沒辦法直接整車拉過來，因此今天也按照慣例，簡單粗暴地列一下內容收進我的筆記庫就好&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼執行成本效能&#34;&gt;程式碼執行成本（效能）&lt;/h3&gt;
&lt;p&gt;要處理的資料量變大了，程式寫爛了要跑半天了，得開始重視效能&lt;br/&gt;
➡️ 學習資料結構和演算法，辨別程式執行時間和實作方案的優劣&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼修改成本可維護性&#34;&gt;程式碼修改成本（可維護性）&lt;/h3&gt;
&lt;p&gt;專案開始被改來改去了，每次修改都要花成本&lt;br/&gt;
➡️ 如果能讓修改更方便快速，那當然就可以增加產能&lt;br/&gt;
➡️ 需要版本控制，以及改用能夠抽換實作的寫法&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼理解成本可讀性&#34;&gt;程式碼理解成本（可讀性）&lt;/h3&gt;
&lt;p&gt;改東西的時候會因為程式碼太亂，光是讀懂就花了大量時間&lt;br/&gt;
➡️ 專案規模越來越大，要讀的東西也越來越多，花的時間也越來越長&lt;br/&gt;
➡️ 只能動手整理程式碼，開始乖乖拆模組、好好取名等等&lt;/p&gt;
&lt;p&gt;（作者推薦看怦然心動的人生整理魔法，我也有點怦然心動）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼彈性&#34;&gt;程式碼彈性&lt;/h3&gt;
&lt;p&gt;開始觀察需求的生長方向來留擴充點，使用物件導向原則和設計模式來保留彈性&lt;/p&gt;
&lt;p&gt;（我個人感覺有點像是可維護性的延伸議題，而且我還菜，有時會分不出來彈性和過度設計 QQ）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼測試成本&#34;&gt;程式碼測試成本&lt;/h3&gt;
&lt;p&gt;重構（作者很誠實，他寫「重寫」）的時候很容易改壞之前寫好的部分&lt;br/&gt;
➡️ 專案規模越大也就代表測試成本越高&lt;br/&gt;
➡️ 需要開始碰自動化測試了&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;保留修改權保留反悔權&#34;&gt;保留修改權、保留反悔權&lt;/h3&gt;
&lt;p&gt;如果面臨兩個解決方案，想一想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選擇某個方案之後，要再進一步修改的成本有多高？&lt;/li&gt;
&lt;li&gt;選擇某個方案之後，想反悔了改成另一個方案的成本有多高？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如修改變數名稱的成本遠低於修改 DB 的欄位；或是存圖片的時候先保存完整圖片，把真的效能炸裂的時候換成保存壓縮後圖片的選項保留起來等等&lt;/p&gt;
&lt;p&gt;總之就是：&lt;strong&gt;避免做出悔不當初的選擇&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;學習前人經驗&#34;&gt;學習前人經驗&lt;/h3&gt;
&lt;p&gt;有一句我覺得作者講得挺好，切中我心，直接轉上來&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一開始會以為只會用套件做東西的人很弱，能自己實作才強，但現在完全不會這樣想。
&lt;strong&gt;只會靠自己累積經驗的學習方式最慢，能吸收他人經驗來加速學習，才能站在巨人的肩膀上。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;前面列了蠻多價值觀的，那如果這些價值觀衝突了呢？&lt;/p&gt;
&lt;p&gt;這時候就要根據情況對價值觀進行優先度的排序：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在不同的情況下，價值觀的優先序也會跟著不同，例如開發完成就不會再增加需求的小專案就不需要考慮修改成本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;價值觀的篇幅結束了之後，作者還談了一些通靈能力、協作能力的部分。例如多人開發的時候，就像同居時每個室友對乾淨的看法不同，勢必要先喬好，最好能留下規約，把髒亂的環境打掃成乾淨的環境&lt;/p&gt;
&lt;p&gt;但因為我信奉的是&lt;strong&gt;游泳池原則（軟體專案就像游泳池，每個人都會在裡面尿尿）&lt;/strong&gt;，所以就不特別截了。&lt;/p&gt;
&lt;p&gt;只是最後有一段讓我有被打到的港覺：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;身為資深軟體開發者，應該要有能力培養技術等級低的開發者，而不是排擠或邊緣化他們。一&lt;strong&gt;個有能力培養新進開發者的資深開發者是更有價值的。在遊戲裡，30% 團隊戰鬥力加成的靈氣，通常是很強的技能。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要是我們整隊都有 30% 靈氣還能疊加該有多強啊！這也許正是現在的我所缺少的。特別筆記下來。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;真的很喜歡看這些前輩們的觀念文或經驗談，感覺像是窺見前輩們思考裡的其中一角，正在挖的大泥球都變香了呢&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，我們明天見～&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
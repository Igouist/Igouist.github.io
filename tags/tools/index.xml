<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/tags/tools/</link>
    <description>Recent content in Tools on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <lastBuildDate>Mon, 10 Oct 2022 18:50:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 JMeter 來對 API 壓力測試吧</title>
      <link>https://igouist.github.io/post/2022/10/jmeter/</link>
      <pubDate>Mon, 10 Oct 2022 18:50:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2022/10/jmeter/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/sMw5vbw.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;前陣子協助某支 API 的壓力測試，趁機請 QA 朋朋指導指導一下，因此接觸了這款簡單好用的壓測工具 JMeter，趁現在記憶還在的時候記錄起來。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;往後其他同事只要說 API 弄好了可以串了，就先幫他打個一萬次壓壓驚，真是貼心&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jmeter.apache.org/&#34;&gt;JMeter&lt;/a&gt; 是款充滿暴力的壓力測試工具，只要告訴他：你要揍哪支 API？要揍幾拳？揍他個幾輪？它就會忠實地對你指定的 API 爆打一頓。&lt;/p&gt;
&lt;h2 id=&#34;下載與開啟-jmeter&#34;&gt;下載與開啟 JMeter&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JMeter 會需要 Java，如果還沒有 Java 的朋友可以先安裝一下：&lt;a href=&#34;https://www.java.com/zh-TW/download/ie_manual.jsp?locale=zh_TW&#34;&gt;下載 Windows 適用的 Java&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先讓我們到 JMeter 官網的 &lt;a href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34;&gt;Download 頁面&lt;/a&gt; 來下載，這邊我選擇 zip：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mBnMtJj.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;下載並解壓縮後，可以在 &lt;code&gt;/bin&lt;/code&gt; 找到 &lt;code&gt;jmeter.bat&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/N2WX2Ff.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;點開之後就會開啟 JMeter 的介面囉！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/d38R9nN.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;更改語言&#34;&gt;更改語言&lt;/h3&gt;
&lt;p&gt;雖然 JMeter 的中文翻譯有些殘缺，但對英文弱弱的我來說，介面有太多英文會讓心理壓力變得太大，果然還是得先更改語言：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gTPOjr5.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著就會看到介面的大部分都變成中文囉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qdtnfqJ.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;批次呼叫指定的-api&#34;&gt;批次呼叫指定的 API&lt;/h2&gt;
&lt;p&gt;雖然 JMeter 支援了一堆測試功能，例如 TCP 之類的，但身為一個 CRUD 工程師，我們當然要用呼叫 API 來當作範例囉！&lt;/p&gt;
&lt;p&gt;在先前的 &lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi/&#34;&gt;API 筆記&lt;/a&gt;，我們已經建立過簡單的「查詢卡片」API：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET https://localhost:44304/card
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這次就用 Local 的這支 API 作為範例來操作 JMeter 吧。&lt;/p&gt;
&lt;h3 id=&#34;建立-thread-group&#34;&gt;建立 Thread Group&lt;/h3&gt;
&lt;p&gt;讓我們回到 JMeter，可以看到預設已經有一組測試計畫了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bvkLSBy.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;而我們將會在測試計畫中加入幾個元素，利用這些元素的組合來達到我們測試 API 的目標。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先我們會需要一個執行緒群組（Thread Group）&lt;/strong&gt;，用來告訴 JMeter 我們打算如何規劃這些 Thread 的行動。可以當作我們正在寫一個迴圈，現在才正要訂迴圈的內容而已。&lt;/p&gt;
&lt;p&gt;讓我們在預設的測試計畫上按右鍵，新增一個執行緒群組：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/iheogno.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著應該就會看到我們的測試計畫下多了一個群組，並且進入了該群組的設定畫面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MOvw1JB.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這邊要特別注意的是右側的「執行緒屬性」，我們白話一點來說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;執行緒數量：要打幾次&lt;/li&gt;
&lt;li&gt;啟動延遲：幾秒內要打出去&lt;/li&gt;
&lt;li&gt;迴圈次數：要打幾輪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如說，我們想要模擬一百個使用者，在一秒內湧進網站，然後這狀況持續三輪，那就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;執行緒數量 = 100&lt;/li&gt;
&lt;li&gt;啟動延遲 = 1&lt;/li&gt;
&lt;li&gt;迴圈次數 = 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這時候也就決定了這次測試的總數（執行緒數量 * 迴圈次數）&lt;/p&gt;
&lt;p&gt;此外，迴圈次數下的「Same user on each iteration」會讓每次迴圈時都用同一批使用者，如果想要每次都模擬全新的使用者，例如把前面的例子改成三百名使用者，分三批湧進網站，這時候就可以取消勾選。&lt;/p&gt;
&lt;p&gt;而定時器則是讓我們設定在執行前先延遲多久、執行多久後自動停止，這邊例子不會用到，就不開啟了。&lt;/p&gt;
&lt;p&gt;現在我們已經把執行緒群組建好了，讓我們指派任務給這個群組吧！&lt;/p&gt;
&lt;h3 id=&#34;建立-http-request&#34;&gt;建立 Http Request&lt;/h3&gt;
&lt;p&gt;在執行緒群組上右鍵 &amp;gt; 新增，可以看到一排能指派給這群組的任務，其中「取樣」就是指我們這次的目標。這邊讓我們選擇「取樣 &amp;gt; HTTP 要求」：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/a2Qsovz.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著可以看到 HTTP Request 的設定畫面，如同前面所說的，我們這次的目標是 &lt;code&gt;GET https://localhost:44304/card&lt;/code&gt;，因此將 API 的資訊填到對應的欄位中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Vm2tW4M.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 API 的路由等資訊填好後，下方可以設定呼叫時要帶的參數，例如 Body 或上傳檔案等等。&lt;/p&gt;
&lt;h3 id=&#34;補充設定-http-request-header&#34;&gt;補充：設定 Http Request Header&lt;/h3&gt;
&lt;p&gt;很多時候我們要測試的 API 會要求在 Header 帶著 Token 才能使用，這邊也記錄一下掛 Header 的做法。&lt;/p&gt;
&lt;p&gt;對執行緒群組右鍵 &amp;gt; 新增，選擇「設定元素」，裡面就會有一票設定值可以選，這邊選擇「HTTP 標頭管理員」：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HYbxiCs.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如我們要指定 Post 的 Body 為 Json，就可以掛一個 &lt;code&gt;content-type&lt;/code&gt; = &lt;code&gt;application/json&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/IAPpOCu.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣就會加到 Header 上囉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6Df2gvq.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;不過我們這次的範例只是一支簡單的查詢卡片，這邊就不用加上啦。讓我們進行下一步吧！&lt;/p&gt;
&lt;h3 id=&#34;建立-listener&#34;&gt;建立 Listener&lt;/h3&gt;
&lt;p&gt;當我們的小弟們去解決了目標之後，就必須要回來報告給我們知道。這邊讓我們一樣在執行緒群組上右鍵新增，並且選擇「接聽（Listener）」，先嘗試建立一個「檢視結果樹」：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/PsNUHkJ.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了檢視結果樹以外也可以新增別的試試看，方便打完 API 之後確認，這邊再加上一個「Summary Report」，現在群組應該會長得像這樣：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LVfx6r7.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;等等打完之後再來確認這兩頁的內容。現在讓我們戳戳看 API 吧！&lt;/p&gt;
&lt;h3 id=&#34;開始執行測試&#34;&gt;開始執行測試&lt;/h3&gt;
&lt;p&gt;在最上面找到大家都很熟悉的綠色三角，戳下去就會執行這次的測試計畫，也就是照著剛剛的計畫烙一群小弟去揍 API&lt;/p&gt;
&lt;p&gt;它旁邊還有發現不對勁時使用的 STOP，更旁邊的神奇掃把是用來在結束之後滅證用的清除結果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UHKKu0W.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;總之，用力給他按下綠色三角！&lt;/p&gt;
&lt;p&gt;這邊就先意思意思揍個一拳，執行之後就可以來看看我們的檢視結果樹：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rNVpHQD.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到結果樹中會顯示剛剛執行的結果，假設你打了兩百次這邊就會有兩百筆；右側則是這次 API 回傳的結果，通常都是看有沒有好好回 200 OK 就是了 xD&lt;/p&gt;
&lt;p&gt;此外也可以切換上面的頁籤，看這次 API 回傳的內容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OEkzdit.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著切換到剛剛新增過的 Summary Report，可以看 API 回來的時間等資訊：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BhUNjbc.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣就完成一次測試啦！&lt;/p&gt;
&lt;p&gt;為了慶祝完成來打個一萬次 API 先（？）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DX6uzQW.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;
&lt;p&gt;這次筆記了 JMeter 這套壓力測試工具的簡單使用方式，在大多數對 API 做測試的場合中，只需要新增幾個 JMeter 提供的元件就可以完成任務，可以說是相當方便。&lt;/p&gt;
&lt;p&gt;同時 JMeter 也提供了更多進階場景時用到的工具，來幫助我們在 Request 發送前後進行處理：例如在這次工作上用到的場景來說，就需要從設定元素中新增 CSV Data Set Config 來從 CSV 讀出需要的資訊，利用 &lt;code&gt;${參數名稱}&lt;/code&gt; 的語法來把參數加到我們的 HTTP 請求：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/442wtcA.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xwrJur8.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6i8kVCO.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;又或是新增前置處理器，如 JSR223 PreProcesser 來撰寫 JavaScript 腳本，先對參數進行處理等等：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Dv3eiya.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UZFyHTf.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;當然除了從 CSV 設定參數以外，JMeter 也提供了簡單的邏輯控制，像是從一數到十這種是完全沒問題的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Mdwio69.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;有這些工具可以進行組合，可以說是相當方便。但大多時候我們只會需要用到基本的 Http Request。有興趣嘗試的朋友可以參考 Yuanchieh&amp;rsquo;s Blog 的這篇：&lt;a href=&#34;https://yuanchieh.page/posts/2021/2021-06-26-jmeter-%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8-+-%E8%87%AA%E5%AE%9A%E7%BE%A9%E8%AE%8A%E6%95%B8%E4%BD%BF%E7%94%A8/&#34;&gt;壓測工具：JMeter 使用教學 + 自定義變數使用&lt;/a&gt;，以及官方文件 &lt;a href=&#34;https://jmeter.apache.org/usermanual/index.html&#34;&gt;Apache JMeter - User&amp;rsquo;s Manual&lt;/a&gt; 來試試，這邊就不再贅述。&lt;/p&gt;
&lt;p&gt;雖然 JMeter 還是有一點小問題，例如那個只有一半的翻譯，還有&lt;a href=&#34;https://stackoverflow.com/questions/53502142/apache-jmeter-showing-different-result-in-windows-and-linux-for-same-test&#34;&gt;跑在 Linux 的表現會比 Windows 好&lt;/a&gt;之類的現象&lt;/p&gt;
&lt;p&gt;但這無損它是個功能完善又簡單使用的壓力測試工具。需要的時候還是可以打開 JMeter，簡單掛個執行緒群組就揍起來，同事 API 寫好就直接把它打爛，不亦樂乎。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;雖然我的後端前輩最後跑去用更新更潮的 &lt;a href=&#34;https://k6.io/&#34;&gt;K6&lt;/a&gt; 了，嘖。我筆記都寫完了欸，讓我看看是有多潮……&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/81n6ddE.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;那麼今天的筆記就到這邊，我們下次見！&lt;/p&gt;
&lt;h2 id=&#34;參考資料與延伸閱讀&#34;&gt;參考資料與延伸閱讀&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ＱＡ同事的工作坊&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lufor129.medium.com/%E6%B8%AC%E5%A5%BD%E6%B8%AC%E6%BB%BF-%E4%B8%80-%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6jmeter-5356b5335628&#34;&gt;測好測滿(一) : 壓力測試Jmeter | by LUFOR129 | Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10203900?sc=hot&#34;&gt;Day 20 Jmeter 壓力測試工具 - iT 邦幫忙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yuanchieh.page/posts/2021/2021-06-26-jmeter-%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8-+-%E8%87%AA%E5%AE%9A%E7%BE%A9%E8%AE%8A%E6%95%B8%E4%BD%BF%E7%94%A8/&#34;&gt;壓測工具：JMeter 使用教學 + 自定義變數使用 | Yuanchieh&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotblogs.com.tw/yc421206/2022/10/15/load_stress_test_tool_for_jmeter&#34;&gt;負載壓力測試工具 - JMeter - 余小章 @ 大內殿堂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.astralweb.com.tw/jmeter-website-stress-testing-tutorial/&#34;&gt;JMeter-網頁壓力測試教學 - Astral Web 歐斯瑞有限公司&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/105285382&#34;&gt;jmeter 撒的一个谎，你可能都已经信以为真了 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jmeter.apache.org/usermanual/index.html&#34;&gt;Apache JMeter - User&amp;rsquo;s Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>在 Chrome 使用翻譯套件 ImTranslator 的嵌入式翻譯來逐行中英對照吧</title>
      <link>https://igouist.github.io/post/2022/09/imtranslator/</link>
      <pubDate>Sun, 18 Sep 2022 10:55:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2022/09/imtranslator/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0XXKTrd.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;嗨各位朋朋，又到了替文章數灌水的好用工具時間！&lt;/p&gt;
&lt;p&gt;今天要介紹的是 &lt;a href=&#34;https://chrome.google.com/webstore/detail/imtranslator-translator-d/noaijdpnepcgjemiklgfkcfbkokogabh?hl=zh-TW&#34;&gt;ImTranslator&lt;/a&gt;，它是一款 Chrome 的翻譯套件。由於有&lt;strong&gt;嵌入式翻譯（Inline Translator）&lt;/strong&gt;，意外地在辦公室的詢問度還蠻高的，這就來寫一篇介紹來推廣給和我一樣英文苦手的朋朋們！&lt;/p&gt;
&lt;p&gt;首先讓我們到 &lt;a href=&#34;https://chrome.google.com/webstore/detail/imtranslator-translator-d/noaijdpnepcgjemiklgfkcfbkokogabh?hl=zh-TW&#34;&gt;Chrome 線上應用程式商店的 ImTranslator 頁面&lt;/a&gt; 將套件安裝到瀏覽器中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/v8ADxhi.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;安裝完之後預設會是翻譯成世界語，因此我們要先到擴充功能選項調整一下語言：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UekSSix.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到左邊有四種翻譯模式，我們先把翻譯語言都調整一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6WJqXzZ.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這邊也可以更改翻譯來源，我個人是都用預設的 Google 翻譯。此外像是嵌入式翻譯結果的文字顏色也可以在這邊修改。&lt;/p&gt;
&lt;p&gt;接著我們來看看這四種翻譯模式吧：&lt;/p&gt;
&lt;p&gt;首先是我個人最常用的嵌入式翻譯（Inline Translator），只要將翻譯目標的句子反白起來，按下 &lt;strong&gt;Alt + C&lt;/strong&gt;，就會在翻譯目標的句子後方插入翻譯結果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bE49bME.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果想清除翻譯結果可以按下 Alt + X：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ULRFWJd.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著是彈出視窗（Pop-up Bubble），顧名思義就是彈出式視窗。不過由於我不喜歡彈一塊視窗出來擋畫面，平常都是關閉的，只有嵌入式翻譯會讓版面跑版的時候才從右鍵選單使用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/llDpDnC.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著是窗口翻譯（ImTranslator），就是彈出視窗的獨立視窗版，好處是可以用滑鼠拖移：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vNKPRY4.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後是網頁翻譯（Webpage Translation），不過這功能就和 Chrome 右鍵的「翻譯成 繁體（中文）」意思一樣，就不再贅述，我也沒用過。&lt;/p&gt;
&lt;p&gt;看過一輪上面的翻譯模式後，應該可以發現這套件最香的還是嵌入式翻譯，可以中英對照對我這種不擅長英文又怕被機器翻譯幹掉術語的人來說真是一大救贖，善哉善哉。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我相信真的有人用中英對照來練習英文閱讀啦，但我是真的看不懂= =a&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;這邊就推薦給各位和我一樣的朋朋，省卻複製貼上到 Google 翻譯的時間吧！&lt;/p&gt;
&lt;h2 id=&#34;參考資料推坑來源&#34;&gt;參考資料（推坑來源）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2017/12/imtranslator-firefox.html&#34;&gt;ImTranslator 我選擇的 Firefox 即時翻譯套件，好看順手多功能 (playpcesor.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DevToys —— 開發人員的瑞士刀工具箱</title>
      <link>https://igouist.github.io/post/2022/08/devtoys/</link>
      <pubDate>Sat, 20 Aug 2022 08:00:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2022/08/devtoys/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/veler/DevToys/raw/main/assets/logo/300x300.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;嗨各位朋朋，又双叒叕到了「同事推薦的好用工具」時間！&lt;/p&gt;
&lt;p&gt;今天要介紹的是 &lt;a href=&#34;https://devtoys.app/&#34;&gt;Devtoys&lt;/a&gt;：這是一套包含了許多貼心小工具的工具箱，例如 UUID 產生器、Base64 編碼解碼、JSON Format 都可以在這邊找到，省下 Google 這些小工具的時間。&lt;/p&gt;
&lt;p&gt;進入&lt;a href=&#34;https://devtoys.app/&#34;&gt;官網&lt;/a&gt;或 &lt;a href=&#34;https://www.microsoft.com/store/apps/9pgcv4v3bk4w&#34;&gt;Store&lt;/a&gt; 下載之後，點開就能在畫面上看到一整堆小工具：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/C0fUpI2.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;左邊的工具列也有工具分類和搜尋可以使用，具體有哪些工具這邊就不再贅述。可以到 &lt;a href=&#34;https://github.com/veler/DevToys&#34;&gt;Github&lt;/a&gt; 上看一下工具列表，或是就直接下載下來看看更清楚：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6TdYfDu.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如說當我原本複製了一坨 Json，為了保護眼睛和心靈，我就得上網先找個 Json Formatter 來轉一下；現在我知道 Devtoys 就有，直接打開來用就可以。&lt;/p&gt;
&lt;p&gt;如果真的很常用到的工具，也可以加到最愛，就會直接出現在左上角的列表中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/IA0GvHL.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;同時 DevToys 也支援釘選到 Windows 的「開始」功能表，如果真的很常用也可以直接釘起來：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gcE827M.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tpp49cH.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;其他遇到的場景還有：複製了 JWT Token 想快速解開、想從 Unix 時間戳轉出時間等等&lt;/p&gt;
&lt;p&gt;例如我個人最近常跟排程類的服務打交道，就會需要時常調整 Crontab 語法，而 DevToys 當然也有提供工具來幫助我們迅速確認 Cron 的執行時間。&lt;/p&gt;
&lt;p&gt;像這種時候只要先確認一下 DevToys，也許就能找到對應的工具，下次再遇到就可以省下找工具的時間，可謂是方便方便。&lt;/p&gt;
&lt;p&gt;那麼這次的小工具分享就到這邊，&lt;del&gt;再度成功一個工具水一篇文&lt;/del&gt;，推薦大家下載試試！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ｑ：這類小工具箱還蠻多的吧？為什麼挑這款呢&lt;/p&gt;
&lt;p&gt;Ａ：因為它好看啊，好看就完事了&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Snispate —— 方便的截圖小幫手，放下剪取工具和小畫家吧</title>
      <link>https://igouist.github.io/post/2022/08/snispate/</link>
      <pubDate>Sun, 07 Aug 2022 11:44:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2022/08/snispate/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/w0SORqB.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;嗨各位朋朋，又到了「同事推薦的好用工具」時間！&lt;/p&gt;
&lt;p&gt;今天要推薦的是 &lt;a href=&#34;https://apps.microsoft.com/store/detail/snipaste/9P1WXPKB68KX?hl=zh-tw&amp;amp;gl=TW&#34;&gt;Snipaste&lt;/a&gt; 這套香香的截圖工具。&lt;/p&gt;
&lt;p&gt;在遠古時代的時候，我寫部落格或是測ＡＰＩ要貼圖附結果時，都是使用 Windows 內建的剪取工具（&lt;code&gt;Shift + Win + S&lt;/code&gt;）來螢幕截圖，之後貼到小畫家上再進行標記（例如畫底線、紅色框框等等）&lt;/p&gt;
&lt;p&gt;但有了 Snispate，這個動作就可以一氣呵成！&lt;/p&gt;
&lt;p&gt;Snipaste 可以直接按下 F1 進入截圖，這時候我們能用滑鼠拖曳來選取截圖範圍，也能夠用拖拉邊界、鍵盤慢慢移動一像素的方式來調整截圖範圍&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kQN8yzR.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中最方便的部份，就是滑鼠點擊某個區塊時，Snipaste 會嘗試幫你偵測該區塊的範圍，例如直接選取某個視窗，在截圖某些網頁的時候相當方便。此外也還有重複選取上次截圖範圍等貼心功能：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UJXahha.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;選取截圖範圍之後，就會跳出一排工具列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/yrbv0HT.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這時候我們就可以直接對截圖內容做標記和加註，例如用框框把重點框選起來，直接加入文字方塊說明，甚至把一些機密資訊馬賽克一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/51XAXWG.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;而編輯好了之後，就可以選擇最右邊的複製到剪貼簿或存檔囉！&lt;/p&gt;
&lt;p&gt;像我個人截圖時幾乎都是為了貼到別的地方，所以就時常使用 Snispate 直接 &lt;strong&gt;截圖 → 標記 → 複製 → 貼上&lt;/strong&gt;，一氣呵成！&lt;/p&gt;
&lt;p&gt;此外要特別講一下的就是複製左邊的這個&lt;strong&gt;釘選圖片&lt;/strong&gt;，它可以讓你把現在的截圖釘選在螢幕上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Z0JuAgk.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;有些時候我們可能正在整理資料，這時候就可以先用釘選的方式把截圖都卡在螢幕上，方便我們快速整合。&lt;/p&gt;
&lt;p&gt;這個釘選功能用起來，就會像一些警探／偵探片追查犯人時的牆壁和白板那樣，把照片和資料直接釘在上面看出關聯那樣 &lt;del&gt;用起來還蠻帥的&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;截圖軟體其實還蠻多套的，Snipaste 讓我用起來感覺相當順手，並且釘選貼圖功能也讓有多螢幕的我在整合資料的時候更加流暢。有興趣的朋友也可以試試看，這邊附上 Windows Store 載點：&lt;a href=&#34;https://apps.microsoft.com/store/detail/snipaste/9P1WXPKB68KX?hl=zh-tw&amp;amp;gl=TW&#34;&gt;Snipaste&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;參考資料&#34;&gt;參考資料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.snipaste.com/&#34;&gt;Snipaste&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2016/07/snipaste.html&#34;&gt;不只是優秀截圖軟體！ Snipaste 用貼圖創造多工神器 - 電腦玩物&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xiaoyao.tw/2017/06/snipaste.html&#34;&gt;Snipaste 超乎想像的截圖軟體，桌面就是編輯區 - 逍遙の窩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>7&#43; Taskbar Tweaker —— 簡單方便的 Windows 工作列調整工具</title>
      <link>https://igouist.github.io/post/2020/12/7_taskbar/</link>
      <pubDate>Sun, 06 Dec 2020 23:49:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/12/7_taskbar/</guid>
      <description>&lt;p&gt;故事是這樣的——&lt;/p&gt;
&lt;p&gt;Win10 工作列的合併設定有這些選項：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/yZypwQD.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;當選擇「一律、隱藏標籤」時，工作列上同樣的程式就會摺疊起來：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8JvOmkJ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而「永不」和「當工作列滿時」則會將工作列展開：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BqA2ERo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;好的，那麼像我個性這麼麻煩的人，如果覺得顯示名字很佔位置，可是又不想要摺疊之後按兩次才能打開我要的應用程式，偏偏又很愛開一整排 IDE 的話，有沒有什麼簡單的辦法&lt;strong&gt;不要讓圖示合併，但也不要顯示名字呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果有個小工具，可以讓這些工作列的設定更彈性就好了，會有嗎？&lt;/p&gt;
&lt;p&gt;有的！&lt;/p&gt;
&lt;p&gt;今天要記錄的是 &lt;strong&gt;7+ Taskbar Tweaker&lt;/strong&gt; 這個小東東，他的畫面是長這樣的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bSDYzFO.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以調整的部分挺多的，可以隨個人喜好進行調整，從滑鼠操作工作列一路到時間要不要顯示秒都有。&lt;/p&gt;
&lt;p&gt;例如我前面想要的需求，就可以把分組的部分改成「&lt;strong&gt;不分組&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UePSYB9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣工作列的圖示就變成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XJHECgm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;就是這樣！&lt;/p&gt;
&lt;p&gt;另外如果對這些選項仍然不滿足的朋友，也可以右鍵開啟&lt;strong&gt;進階選項&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TrJ7IhJ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;像我就有開啟大 icon，看了就是比較舒服&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/oTshGL4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外也能自訂一些滑鼠操作、鍵盤快速鍵等等，能微調的地方蠻多的，很適合有興趣的朋友可以自己研究看看。另外也要感謝巴哈的這篇 &lt;a href=&#34;https://forum.gamer.com.tw/C.php?bsn=60030&amp;amp;snA=525114&#34;&gt;徹底爆改&lt;/a&gt; 多挖了很多小玩具可以玩，哈。&lt;/p&gt;
&lt;p&gt;那麼今天就介紹到這裡，絕對不是玩小工具和逛耶誕城結果就廢掉沒寫文囧，抱歉啦催稿的碰油，我們下次見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dark Reader —— 暗黑模式愛好者的 Chrome 必備套件</title>
      <link>https://igouist.github.io/post/2020/11/dark-reader/</link>
      <pubDate>Sun, 08 Nov 2020 23:39:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/11/dark-reader/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/G4OjUzE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不能信任那些 Terminal 或編輯器用白底的人。&lt;/br&gt;
—— &lt;a href=&#34;https://github.com/CodeTengu/JokeKappa/blob/master/jokekappa/jokes/codetengu_weekly.json&#34;&gt;JokeKappa&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這禮拜推薦了個常用的 chrome 套件給同樣喜歡黑色背景的同事，這邊也推薦給大家。&lt;/p&gt;
&lt;p&gt;&lt;s&gt;絕對不是因為隻狼更新了不小心砍太爽，結果來不及寫介面隔離只能介紹套件水一下，Heiya～&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;今天要介紹的就是這款 &lt;a href=&#34;https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh&#34;&gt;Dark Reader&lt;/a&gt;，這是我用 chrome 時首選的暗黑模式擴充套件，在俺寫文的這時候已經超過了三百萬次的下載次數，現在就讓我來記錄一下這款擴充套件的一些特色唄。&lt;/p&gt;
&lt;p&gt;照慣例先上個預覽圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OOEraiY.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;當我們安裝完成之後，就可以從 Chrome 右上角的擴充套件區看到 DarkReader 的 icon。點開就可以看到它的選單：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rveo4TK.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由上而下分別就是最常用的主要調整，左上角可以選擇是否套用，右上則是套件開啟關閉和快捷鍵。接著是一些對比度、亮度等等的調整，可以隨著個人喜好條找到舒適的程度。&lt;/p&gt;
&lt;p&gt;其中我覺得最中意的就是最下面的「&lt;strong&gt;僅適用於ＯＯＯ&lt;/strong&gt;」的功能，這代表我們可以將上面的設定&lt;strong&gt;僅僅針對某個特定網站作變更&lt;/strong&gt;，而不會遇到在Ａ網站辛辛苦苦調整後覺得順眼了，結果到了Ｂ網站同樣的配置卻相當刺眼的狀況。&lt;/p&gt;
&lt;p&gt;如此一來，對於某幾個常用的網站，我們完全可以自主微調再套用，甚至針對一些不太適合轉黑色的網站也能夠選擇關閉，這個彈性對我來說是相當實用的功能，幾乎是我最後愛用這款暗黑模式套件的主因。&lt;/p&gt;
&lt;p&gt;這些紀錄是否要開啟黑色模式的網站，就會記錄在第二個「網站列表」的頁籤。雖然可以手動增加，但我個人是不常用到，在首頁設定即可。&lt;/p&gt;
&lt;p&gt;而在第三個「更多」的頁籤，就有一些有趣的設定可以調整了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2IMcXW4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先是文字描邊的部分。由於黑暗主題下的白色字會 &lt;a href=&#34;https://www.u-walker.com/news/2464.html&#34;&gt;讓人覺得字的筆劃較粗&lt;/a&gt;，因此大多時候字體就會經過調整。但如果覺得太超過了太細怎麼辦呢？這邊可以調整&lt;strong&gt;文字描邊&lt;/strong&gt;，讓字看起來不要看不見，也不要過眩過粗。&lt;/p&gt;
&lt;p&gt;再往下則是有四種模式可以設定，預設是動態模式，這邊直接上圖給各位感受一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;過濾
&lt;img src=&#34;https://i.imgur.com/6I58vhi.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;過濾+
&lt;img src=&#34;https://i.imgur.com/FvCr7iQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-靜態
&lt;img src=&#34;https://i.imgur.com/NISE8xa.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;-動態
&lt;img src=&#34;https://i.imgur.com/sQ6YreP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中靜態會有一個編輯畫面，可以自己加入 CSS 達到完全客製。&lt;/p&gt;
&lt;p&gt;而動態則是就交給 Dark Reader 幫你算，像我這種懶人仔就是一路動態到底；像我這種會喜歡 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme&#34;&gt;One Dark Pro&lt;/a&gt; 主題，這類非純黑、漸層質感配色的人，動態的結果也比較符合我的口味
。&lt;/p&gt;
&lt;p&gt;當然，動態產生的 CSS 也是能修改的，點選下面的開發者工具就可以看到完整的 CSS 囉。像本部落格也是基於 &lt;a href=&#34;https://github.com/flysnow-org/maupassant-hugo&#34;&gt;maupassant&lt;/a&gt; 這款好看的白色主題，再加上 Dark Reader 處理後產生的暗黑模式當底來逐步修改出來的。這方面真的要感謝製作主題和套件的大大們呢。&lt;/p&gt;
&lt;p&gt;今天的介紹就到這裡囉，推薦喜歡暗黑模式又想懶人用套件的朋友可以試試這款套件，真的相當好用！那麼，我們下次見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Powershell 美化作戰 —— 字型、執行原則和 oh-my-posh</title>
      <link>https://igouist.github.io/post/2020/08/powershell-beauty/</link>
      <pubDate>Sat, 15 Aug 2020 18:00:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/08/powershell-beauty/</guid>
      <description>&lt;p&gt;最近在兩天內經歷了記憶體死去、系統毀損、機殼碎裂等等，終於電腦重灌。一堆設定都要重弄，正好也是個機會，這篇順手記一下常用好幫手 Powershell 的美化步驟。&lt;/p&gt;
&lt;p&gt;先放一張施工後的圖鎮樓：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/417skJs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以在開始圖示上用右鍵打開選單，之後點選 Powershell；或是 Win + X 打開選單，然後按 I 或 A （後者會以系統管理員身分開啟）就能開啟了。&lt;/p&gt;
&lt;p&gt;如果選單打開還是 CMD 而不是 Powershell 的，可以先去切換成 Powershell，真的是比較好用啦（&lt;a href=&#34;https://www.microsoft.com/zh-tw/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab&#34;&gt;Windows Terminal&lt;/a&gt; 笑而不語）&lt;/p&gt;
&lt;p&gt;剛打開的畫面是這樣的：
&lt;img src=&#34;https://i.imgur.com/JE6BTSU.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;抱歉，光細明體我就不太行了。所以接下來就從字型這些內建設定開始！&lt;/p&gt;
&lt;h2 id=&#34;基本設定&#34;&gt;基本設定&lt;/h2&gt;
&lt;p&gt;在上方的標題列按下右鍵，選擇內容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MkWyIv7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先就讓我們修改&lt;strong&gt;字型&lt;/strong&gt;，我這邊還是採用習慣的 &lt;a href=&#34;https://github.com/be5invis/Sarasa-Gothic&#34;&gt;更紗黑體&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外還有一些推薦的字體，可以參閱前陣子整理的 &lt;a href=&#34;https://igouist.github.io/post/2020/03/visualstudio&#34;&gt;Visual studio 環境設定 —— 字型、套件、快捷鍵&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：還有擴充了 &lt;a href=&#34;https://www.nerdfonts.com/cheat-sheet&#34;&gt;Nerd Fonts&lt;/a&gt; 的等距更紗黑體：&lt;a href=&#34;https://github.com/jonz94/Sarasa-Gothic-Nerd-Fonts&#34;&gt;Sarasa-Gothic-Nerd-Fonts&lt;/a&gt; 可以選擇，Nerd Fonts 能提供許多精美的 icon 讓我們後續改主題的時候大大加分！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/93httvP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了字型以外，我個人還推薦可以修改一個設定，保證質感 UPUP，那就是&lt;strong&gt;透明度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OGR98I8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我個人習慣採用 80~85% 左右的透明度，搭配黑色背景。在桌面使用的時候看起來就像這樣：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XBFVEmU.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以拉回去和一開始的預設狀況做比較，透明感＝質感。&lt;/p&gt;
&lt;p&gt;另外，背景透明還有意想不到的好處，那就是——&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4Yh5SvJ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打指令偷看可以不用切換視窗！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基於以上兩點，推薦可以調整透明度，找個適合自己的區間。但要注意，如果太透明的話會讓字跟背景糊在一起，很容易眼花，自己斟酌一下。&lt;/p&gt;
&lt;p&gt;以上就做完了基本設定，沒意外要做兩次（一般身分和系統管理員）&lt;/p&gt;
&lt;h2 id=&#34;安裝-posh-git&#34;&gt;安裝 posh-git&lt;/h2&gt;
&lt;p&gt;然而我們並不打算在此停止！因緣際會之下，我拜讀了這篇 &lt;a href=&#34;https://blog.poychang.net/setting-powershell-theme-with-oh-my-posh/&#34;&gt;使用 oh-my-posh 美化 PowerShell 樣式&lt;/a&gt;，頓時驚為天人，跟預設的（請自己再拉回去比對第一張圖）實在是相當有差距，於是當時就直接安裝下來了。&lt;/p&gt;
&lt;p&gt;畢竟這是第二次安裝了，接下來的區段就記錄一下安裝 &lt;a href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh&#34;&gt;oh-my-posh&lt;/a&gt; 主題的流程。&lt;strong&gt;oh-my-posh&lt;/strong&gt; 是受到 Linux 上 &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;oh-my-zsh&lt;/a&gt; 的&lt;strong&gt;啟發&lt;/strong&gt;誕生的，總之就是個挺讚讚的主題載入工具。&lt;/p&gt;
&lt;p&gt;而且安裝相當方便，只需要從 Microsoft Store 或直接打 &lt;code&gt;Install-Module&lt;/code&gt; 指令，就能從 &lt;a href=&#34;https://www.powershellgallery.com/&#34;&gt;PowerShell Gallery&lt;/a&gt; 把模組安裝下來囉！&lt;/p&gt;
&lt;p&gt;在安裝 oh-my-posh 之前，由於顯示的內容包含 Git ，因此我們還要先下載另一個套件 &lt;code&gt;posh-git&lt;/code&gt;。讓我們用&lt;strong&gt;系統管理員&lt;/strong&gt;身份開啟 Powershell，並輸入以下指令來進行安裝：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Install-Module posh-git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到這一步，會有幾種狀況：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提示安裝 NuGet：安裝就行了&lt;/li&gt;
&lt;li&gt;提示不安全儲存庫：安啦，選是就對了&lt;/li&gt;
&lt;li&gt;跳出錯誤，顯示「因為這個系統上已停用指令碼執行」云云，則接著看下一段落&lt;/li&gt;
&lt;li&gt;什麼事都沒發生，很順利地裝好了，請跳過下一段落&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;執行原則&#34;&gt;執行原則&lt;/h2&gt;
&lt;p&gt;如果跳出「因為這個系統上已停用指令碼執行…」的情況，代表遇到&lt;strong&gt;執行原則&lt;/strong&gt;的部份。因為安全性考量，預設是不能執行 Powershell 腳本的，連帶也不能使用 Install-Module 這類方法。&lt;/p&gt;
&lt;p&gt;關於執行原則，可以參閱這篇 &lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10028377&#34;&gt;Windows PowerShell 基本操作 - 執行 Windows PowerShell 腳本&lt;/a&gt; 的說明。該系列也挺實用的，值得一看，這邊我們就節錄一段來說明執行原則的種類：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Restricted&lt;/strong&gt; ：&lt;strong&gt;關閉腳本檔的執行功能&lt;/strong&gt;，這是&lt;strong&gt;預設&lt;/strong&gt;的設定值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AllSigned&lt;/strong&gt; ：只允許執行&lt;strong&gt;受信任發行者&lt;/strong&gt;簽署過的腳本檔。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RemoteSigned&lt;/strong&gt; ：在&lt;strong&gt;本機電腦所撰寫的腳本檔，不需要簽署就可執行&lt;/strong&gt;；但是從網際網路（例如：email、MSN Messenger）下載的腳本檔就必須經過受信任發行者的簽署才能執行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unrestricted&lt;/strong&gt; ：&lt;strong&gt;任何腳本檔皆可被執行&lt;/strong&gt;，但是於執行網際網路下載的腳本檔時，會先出現警告的提示視窗。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要確認目前的執行原則，可以使用 &lt;code&gt;Get-ExecutionPolicy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這個分類也是為了保護使用者，不要亂執行一些來路不行了奇怪腳本，整個電腦打包起來送人。不過我們身為 &lt;del&gt;白目&lt;/del&gt; 工程師，難免會有要裝套件和自己寫腳本的時候，這邊就直接調整為 Unrestricted 全面開啟吧！&lt;/p&gt;
&lt;p&gt;調整執行原則的語法如下（必須在系統管理員身分時才有效果呦）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set-ExecutionPolicy Unrestricted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;調整完就可以繼續下載囉！&lt;/p&gt;
&lt;p&gt;像我重灌的狀況，提示會如下圖，如果已經安裝過 Nuget 提供者，提示應該會更少。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UoGkW7o.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安裝-oh-my-posh&#34;&gt;安裝 oh-my-posh&lt;/h2&gt;
&lt;p&gt;接著讓我們安裝 oh-my-posh：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Install-Module oh-my-posh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LQuE2hD.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安裝完畢後就可以來試試看囉！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更新：Oh-my-posh 也可以從 Microsoft 搜尋並安裝囉！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3WoVsvL.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;設定主題&#34;&gt;設定主題&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;更新：由於 Oh-my-posh 設定主題的語法已經改變，因此移除 2020 時的內容，改為 2023 重灌電腦時找到的指令。&lt;/p&gt;
&lt;p&gt;因為 Oh-my-posh 還蠻頻繁更新的，建議後續的操作可以開著 &lt;a href=&#34;https://ohmyposh.dev/docs/installation/customize&#34;&gt;Oh My Posh&lt;/a&gt; 的官方文檔來排查一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;要更改主題的話，我們會需要使用 &lt;code&gt;oh-my-posh init pwsh&lt;/code&gt; 這個指令，並且將該主題的 Json 檔案傳遞給 &lt;code&gt;--config&lt;/code&gt;&lt;/strong&gt;，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh-my-posh init pwsh --config &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$env&lt;span style=&#34;color:#e6db74&#34;&gt;:POSH_THEMES_PATH/powerlevel10k_rainbow.omp.json&amp;#34;&lt;/span&gt; | Invoke-Expression
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我們丟了一個 powerlevel10k_rainbow 這個主題的 Json 檔案路徑給 oh-my-posh，然後呼叫 &lt;code&gt;Invoke-Expression&lt;/code&gt; 執行它，這時候主題就會變啦～&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：這邊用到一組環境變數 &lt;code&gt;$env:POSH_THEMES_PATH&lt;/code&gt; 實際上是一個資料夾路徑，Oh-my-posh 安裝的主題都會放在這個資料夾裡：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lWBHJc3.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你有自己下載的主題，可以也丟到 &lt;code&gt;POSH_THEMES_PATH&lt;/code&gt; 的位置，或是直接更改 &lt;code&gt;--config&lt;/code&gt; 的路徑就可以了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每個主題的樣式都不大一樣，可以翻一下 Oh-my-posh 的 &lt;a href=&#34;https://ohmyposh.dev/docs/themes&#34;&gt;Themes&lt;/a&gt; 頁面挑個喜歡的。&lt;/p&gt;
&lt;h2 id=&#34;撰寫腳本&#34;&gt;撰寫腳本&lt;/h2&gt;
&lt;p&gt;聰明的你一定發現了，每次重開都要重輸入一次 &lt;code&gt;init&lt;/code&gt; 實在是很麻煩。因此我們接著要設定讓它能一打開就載入主題。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;當 Powershell 開啟時，預設會去讀取使用者的設定檔（Profile）&lt;/strong&gt;，我們就是要把這些指定加到設定檔裡，讓 Powershell 一打開就能美美的。&lt;/p&gt;
&lt;p&gt;在 Powershell 裡輸入 &lt;code&gt;$PROFILE&lt;/code&gt; 就能取得當前的設定檔位置，通常來說會在 &lt;code&gt;我的文件\WindowsPowerShell&lt;/code&gt; 底下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kRKV112.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：Powershell 啟動時會依序檢查四個位置來載入設定檔，分別為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有使用者及所有 Shell: &lt;code&gt;$PSHOME\profile.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有使用者的 Powershell: &lt;code&gt;$PSHOME\Microsoft.PowerShell_profile.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目前登入者的所有 Shell: &lt;code&gt;$Home\My Documents\WindowsPowerShell\profile.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目前使用者的 Powershell: &lt;code&gt;$Home\My Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中的變數&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$PSHOME&lt;/code&gt; 是指 Powershell 的安裝目錄，通常在 system32 的 WindowsPowerShell 底下&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$Home&lt;/code&gt; 則是使用者的主目錄，也就是大家熟悉的 users/{你的名稱}&lt;/li&gt;
&lt;li&gt;而前面提到的 &lt;code&gt;$PROFILE&lt;/code&gt; 就是指「目前使用者的 Powershell」這組&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對設定檔有興趣的朋友可以參照保哥的文章及官方文檔：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miniasp.com/post/2013/01/02/How-to-auto-load-ps1-script-using-Windows-PowerShell-Profiles&#34;&gt;如何在 Powershell 開啟時自動引入常用的 ps1 指令檔腳本 | The Will Will Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2&#34;&gt;關於設定檔 - PowerShell | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著我們就前往此處去修改 Powershell 的腳本，如果發現並沒有這個檔案，那還請自己建立一個，檔名和路徑請和 &lt;code&gt;$PROFILE&lt;/code&gt; 一致，像我就取 &lt;code&gt;Microsoft.PowerShell_profile.ps1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/eJ8A5iY.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;之後開啟檔案，貼上我們引入套件和設定主題的指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ps1&#34; data-lang=&#34;ps1&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh-my-posh init pwsh --config &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$env:POSH_THEMES_PATH&lt;span style=&#34;color:#e6db74&#34;&gt;/powerlevel10k_rainbow.omp.json&amp;#34;&lt;/span&gt; | Invoke-Expression
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;再次補充：oh-my-posh 改版之後一些語法有改變，如果有在 &lt;code&gt;Set-Theme&lt;/code&gt; 這步的時候遇到「無法辨識…」問題的朋友，可以嘗試改成用 &lt;code&gt;Set-PoshPrompt -Theme Paradox&lt;/code&gt; 試試看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著讓我們重開 Powershell&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1kYjQSO.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看見它已經順利載入主題囉！&lt;/p&gt;
&lt;p&gt;因為我覺得切主題前跑那些 Powershell 提示之類的有點醜，所以我會回去 Profile 補一行 Clear：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ps1&#34; data-lang=&#34;ps1&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh-my-posh init pwsh --config &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$env:POSH_THEMES_PATH&lt;span style=&#34;color:#e6db74&#34;&gt;/powerlevel10k_rainbow.omp.json&amp;#34;&lt;/span&gt; | Invoke-Expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clear
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;也可以在這裡寫一些 function 來使用，像我個人之前做 &lt;a href=&#34;https://igouist.github.io/post/2020/03/bandon-1-selenium&#34;&gt;我要訂便當&lt;/a&gt; 因為懶得每次都 cd 到腳本所在的位置還要 Pyhton 執行，所以就直接包成 &lt;code&gt;Get-Bandon&lt;/code&gt; 的方法直接叫，真的舒服，推薦嘗試&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果有想要自己試試新增主題，或是想像我一樣做小修改的，可以到 &lt;code&gt;$env:POSH_THEMES_PATH&lt;/code&gt; 這個路徑的資料夾，找到 &lt;code&gt;.omp.json&lt;/code&gt; 檔案來動手&lt;/p&gt;
&lt;p&gt;例如說把 &lt;code&gt;powerlevel10k_rainbow.omp.json&lt;/code&gt; 開啟後，就可以看見組出那一串資訊的過程，也就可以隨意更改囉。我就特愛把一些 icon 都改成 &lt;code&gt;°д°&lt;/code&gt;，感覺活潑多了（？）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：該路徑會根據安裝 &lt;code&gt;oh-my-posh&lt;/code&gt; 的位置而變動，基本上開 Powershell 直接從環境變數的路徑下去找比較快。真的找不到的話也可以下載別人的主題改一改，再修改 `&amp;ndash;config`` 的路徑指到自己改好的 json 就好囉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;順便提一下，載入使用者設定對用到 Powershell 的地方都有效喲！&lt;/p&gt;
&lt;p&gt;例如 Visual Studio Code 的 Powershell&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fqtRmwR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;或是 Visual Studio 的開發人員用 Powershell&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ulEehB0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;都是會吃到個人使用者的設定的。&lt;/p&gt;
&lt;p&gt;那麼今天就到這裡，最後再把完成品跟預設狀況比對一次吧～&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JE6BTSU.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/99DaSVP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2023 回來更新文章，順便附個現況：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JOVI7hg.jpg&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;同場加映：&lt;/p&gt;
&lt;p&gt;跟朋友志得意滿地說明了 Powershell 美化作戰後，對方只說了淡淡的一句&lt;/p&gt;
&lt;p&gt;「哦，我都直接 &lt;a href=&#34;https://cmder.app/&#34;&gt;Cmder&lt;/a&gt;」&lt;/p&gt;
&lt;p&gt;那又是另一個故事了……&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.poychang.net/setting-powershell-theme-with-oh-my-posh/&#34;&gt;使用 oh-my-posh 美化 PowerShell 樣式 - POY CHANG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ppundsh.github.io/posts/ad6e/&#34;&gt;PowerShell 美化：oh my posh - Flymia 凡事用心之事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pcion123.github.io/2020/03/08/powershell-improve/&#34;&gt;美化PowerShell - oh-my-posh - Pcion&amp;rsquo;s note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10028377&#34;&gt;Windows PowerShell 基本操作 - 執行 Windows PowerShell 腳本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://officeguide.cc/powershell-set-execution-policy-remote-signed/&#34;&gt;PowerShell 更改執行原則，解決無法執行 ps1 指令稿問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Pocket —— 稍後閱讀，想看再看</title>
      <link>https://igouist.github.io/post/2020/07/pocket/</link>
      <pubDate>Sat, 18 Jul 2020 10:17:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/07/pocket/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;前言：由於我這人特喜歡發完文之後一想到就回去改改，因此現在還在修改上一篇物件導向的內容囧。講好聽是有持續交付的精神，講難聽就是比較後知後覺一點。因此這幾篇仍會像之前我要買便當系列一樣，主軸間穿插個幾篇小工具或心得，以這個節奏前進。所以這邊就介紹一下我幾乎每天都會用到的小工具：&lt;strong&gt;Pocket&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在兩個多月前，我們介紹過將文章用 RSS 訂閱集中起來的工具 &lt;a href=&#34;https://igouist.github.io/post/2020/04/feedly/&#34;&gt;Feedly&lt;/a&gt;。但是，有些時候雖然對文章挺有興趣的，但並&lt;strong&gt;不適合馬上看&lt;/strong&gt;（例如在公司或學校的時候，看到社論、科技新聞等等）；或是像我個人平常休息時逛逛一些論壇或是文檔，這時候如果遇到一些&lt;strong&gt;比較長的、主題式的文章&lt;/strong&gt;，就會想要把文章存放起來，等晚些時候再看。&lt;/p&gt;
&lt;p&gt;雖然 Feedly 也有提供 Read Later 的功能，只要勾個標籤就可以之後再到 Read Later 的頁面去觀看。但懶惰如我，就會想要把所有稍後再看的文章集中在一塊，因此必須尋找一個前述場景都共用的做法，這時我就遇上了 Pocket。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://getpocket.com/&#34;&gt;Pocket&lt;/a&gt; 是一個簡單直接的「稍後閱讀」服務，操作方便，只需要擴充套件或分享，和一段能靜下來好好閱讀的時間即可服用&lt;/strong&gt;。在開始介紹之前，有幾件事必須報告：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果你和我一樣可能變成倉鼠型玩家，看到什麼都想加到稍後閱讀，可能要當心。建議可以先閱讀一下 &lt;a href=&#34;https://www.playpcesor.com/2011/10/blog-post.html&#34;&gt;用「稍後閱讀」過濾資訊洪水的五種層次與六個方法 - 電腦玩物&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就像在 Feedly 介紹中提到的：這類工具是用來幫助我們完成&lt;strong&gt;被動接收資訊＋主動篩選資訊&lt;/strong&gt;的，莫要忘記原則，否則真的很容易看不完看到超載，心會很累。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你是 Android 或 iOS 的使用者，由於 Pocket 有提供網頁和 APP 等平台，但本篇以電腦的操作為主，使用手機操作的朋友可以參考 &lt;a href=&#34;https://www.kocpc.com.tw/archives/266659&#34;&gt;Pocket 稍後閱讀 APP，收藏想看的文章和網頁！&lt;/a&gt; 這篇的說明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你已經決定要尋找稍後閱讀功能的工具，可以參考 &lt;a href=&#34;https://pickydigest.com/productivity/read-it-later-bookmark-app-competition/&#34;&gt;10個稍後閱讀書籤服務大評比！Pocket、Instapaper、Diigo還有更多！&lt;/a&gt;本篇並不會提到別的工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;介紹&#34;&gt;介紹&lt;/h2&gt;
&lt;p&gt;首先，我們得先到 &lt;a href=&#34;https://getpocket.com/&#34;&gt;Pocket&lt;/a&gt; 申請一個帳號，我個人是直接使用 Google 帳號做登入。成功登入之後應該能到 Pocket 的大廳：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JHo0YQh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們之後儲存的文章就會出現在這裡。上方工具列還有探索的功能，但我個人試過之後大多都是英文文章，對我這種英文白癡派不上什麼用場。&lt;/p&gt;
&lt;p&gt;接著讓我們安裝 Chrome 的 擴充套件：&lt;a href=&#34;https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj&#34;&gt;Save to Pocket&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;之後我們直接找個一篇文章做示範，然後讓我們按下擴充套件的 Pocket 按鈕…&lt;/p&gt;
&lt;p&gt;（如果是手機使用者，這邊就是把目標網頁分享給 Pocket App）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tjRP5o2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再回到 Pocket …&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SAlnwW4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;就成功把文章存下來啦！&lt;/p&gt;
&lt;p&gt;點進去之後可以發現，它和 Notion、Evernote 那些筆記軟體的擷取方式一樣，是&lt;strong&gt;將文章內容擷取出來&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HwQbPRP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;當然，作為一個閱讀服務，Pocket 服務該有的都有。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nyAVhSd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;畫面上方有一些基礎操作的工具列，例如替&lt;strong&gt;文章內容畫線、或是將文章加上分類標籤、進行封存和刪除等等&lt;/strong&gt;。此外，右上方也能調整閱讀版面的設定，但除了基本的&lt;strong&gt;主題色彩和字體大小&lt;/strong&gt;以外，更客製化的設定選項就必須付費才能取得了。&lt;/p&gt;
&lt;p&gt;（當然，如果像我這種有在使用 &lt;a href=&#34;https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll/related&#34;&gt;簡閱&lt;/a&gt; 這類閱讀擴充套件的話，這部分就不會有什麼問題了XD）&lt;/p&gt;
&lt;p&gt;Pocket 作為稍後閱讀的暫存站，我個人是免費就用得很開心。如果有需要無限期存放文章或是無限標籤等需求，請再前往 &lt;a href=&#34;https://getpocket.com/premium?ep=10&#34;&gt;升級頁面&lt;/a&gt; 參考。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註：Pocket 也有提供朗讀文章的功能，需要的時候可以用聽的，不過我個人沒有試過，因為遇到需要用聽的情景的話，我會跑去聽 Podcast。如果有聽文章習慣或是有興趣的朋友，可以參考&lt;a href=&#34;https://www.playpcesor.com/2016/02/pocket-reade-later.html&#34;&gt;[生活駭客3] 開始「聽」文章，日常時間加一倍的魔法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;稍後閱讀功能的服務還挺多的，我之所以最後選定使用 Pocket，有一大半原因是因為我發現它&lt;strong&gt;能和我的 Kobo 電子書閱讀器同步&lt;/strong&gt;。作為一個通勤搭車每天動輒一兩小時的上班族，搭車時間拿來看看書看看文章真是再愜意不過了。但由於我真的很懶，捷運又常常站著，書還是挺重的不方便帶來帶去，所以後來我還是毅然決然踏入閱讀器的世界，這時候我才發現了 Pocket。&lt;/p&gt;
&lt;p&gt;利用 Pocket 我就能把早上從 Feedly 看見的部分文章，挪到上下班搭車的時候再用輕便的電子書閱讀，豈不妙哉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cIkoRR1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;示意圖（單純只是想秀一下閱讀器）&lt;/p&gt;
&lt;p&gt;利用 Pocket 我就能把想讀的文章同步到網頁、APP 和閱讀器等各平台，並利用碎片時間來看個一兩篇，既分散了有時遇到太多篇想看的文章的那種壓迫，瑣碎時間也不用再煩惱要幹嘛就能順手看一下，對我這種懶得想當下要幹嘛的人，真的是挺有幫助啊。&lt;/p&gt;
&lt;h2 id=&#34;結語&#34;&gt;結語&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;所有的工具都是為了完成整體流程的某個環節而存在&lt;/strong&gt;，凡如開發功能、佈 CI/CD 環境、或是專案管理具等等，我們無不利用各項工具和技術的搭配來組合成我們需要的流程。當然，資訊篩選也是如此，Pocket 提供了延後閱讀的服務，但這個服務的使用方式取捨於個人的習慣。如果能像電腦玩物說的，在把文章丟進稍後閱讀時，能先想一想「&lt;strong&gt;這則資訊我真的想要認真讀它嗎？&lt;/strong&gt;」如果是，那麼我就相信 Pocket 一定能夠幫上忙。&lt;/p&gt;
&lt;p&gt;我個人現在的習慣方式是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;從 &lt;strong&gt;Feedly&lt;/strong&gt; 取得篩選來源的文章，或是有空閒時從常用的幾個論壇和網站，從中挑選有興趣的讀&lt;/li&gt;
&lt;li&gt;若是當天有興趣的太多，或是文章過長不適合當下閱讀，就利用 &lt;strong&gt;Pocket&lt;/strong&gt; 暫存起來&lt;/li&gt;
&lt;li&gt;閱讀後，將認為有價值或喜歡的文章存放到 &lt;strong&gt;Notion&lt;/strong&gt; 並分類&lt;/li&gt;
&lt;li&gt;需要的時候，例如用到相關技術或想分享文章給朋友，就從 &lt;strong&gt;Notion&lt;/strong&gt; 中的分類提取文章出來&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;藉由這些工具組成了一個每日固定的閱讀流程，並穩定地增加庫存（對我本質還是倉鼠型），目前為止我都還覺得挺不錯的，這邊分享給各位。&lt;/p&gt;
&lt;p&gt;最後的最後，因為真的覺得&lt;strong&gt;電子書很讚&lt;/strong&gt;，還是想推廣一下。如果有對電子書有興趣的朋友，可以看一下以下這兩篇，整理得相當不錯，優缺點都有列到，尤其是閱讀前哨站那篇的 Q&amp;amp;A 整理部份已經涵蓋最常遇到的問題，推薦在考慮入坑時讀個一遍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://readingoutpost.com/ebook-ereader-experience/&#34;&gt;2年讀100本書的全職科技人，電子書閱讀器使用心得與感想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aronhack.com/%E8%B3%BC%E8%B2%B7%E9%9B%BB%E5%AD%90%E6%9B%B8%E9%96%B1%E8%AE%80%E5%99%A8%E5%89%8D-%E5%BF%85%E8%AE%80%E5%84%AA%E7%BC%BA%E9%BB%9E%E5%8F%8A%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/&#34;&gt;購買電子書閱讀器前，必讀優缺點及心得分享&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那麼今天的分享就到這裡，如果有不錯的工具或是建議，也歡迎不吝提出。那麼，我們下周見！&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2011/10/blog-post.html&#34;&gt;用「稍後閱讀」過濾資訊洪水的五種層次與六個方法 - 電腦玩物&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2012/04/pocket-read-it-later.html&#34;&gt;Pocket Read it later 稍後閱讀同步、離線、免費行動口袋 - 電腦玩物&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2016/02/pocket-reade-later.html&#34;&gt;[生活駭客3] 開始「聽」文章，日常時間加一倍的魔法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pickydigest.com/productivity/read-it-later-bookmark-app-competition/&#34;&gt;10個稍後閱讀書籤服務大評比！Pocket、Instapaper、Diigo還有更多！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kocpc.com.tw/archives/266659&#34;&gt;Pocket 稍後閱讀 APP，收藏想看的文章和網頁！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Electron.net —— 把網頁包成桌面應用吧</title>
      <link>https://igouist.github.io/post/2020/06/electron-net/</link>
      <pubDate>Sun, 28 Jun 2020 19:41:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/06/electron-net/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/ElectronNET/Electron.NET/raw/master/assets/images/electron.net-logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;因緣際會下想要弄出一些單機小工具來跑，這時候正巧接觸到 &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET&#34;&gt;Electron.net&lt;/a&gt; 這個神器，特別紀錄一下以免忘記。這是 &lt;a href=&#34;https://www.electronjs.org/&#34;&gt;Electron&lt;/a&gt; 搭配 .net Core 的框架， &lt;strong&gt;Electron 是用 Chromium 和 Node.js 將網頁封裝成桌面應用程式&lt;/strong&gt;，像是 Visual Studio Code、Slack 也都有使用到 Electron。而 &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET&#34;&gt;Electron.net&lt;/a&gt; 顧名思義就是 .net 用的 Electron 框架囉。&lt;/p&gt;
&lt;p&gt;這邊記錄一下自己嘗試時載入套件和建置的流程，主要參考自黑大的 &lt;a href=&#34;https://blog.darkthread.net/blog/electron-net/&#34;&gt;用 ASP.NET Core 寫桌面 GUI 應用程式 - Electron.NET&lt;/a&gt; 和 &lt;a href=&#34;https://blog.darkthread.net/blog/electron-api-brief/&#34;&gt;Electron.NET API 快速巡覽&lt;/a&gt; 這兩篇文章，以及官方的 &lt;a href=&#34;https://github.com/ElectronNET/electron.net-api-demos&#34;&gt;API DEMO&lt;/a&gt;，特此感謝。&lt;/p&gt;
&lt;p&gt;本篇小節：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AE%89%E8%A3%9D%E5%A5%97%E4%BB%B6%E5%8F%8A%E7%92%B0%E5%A2%83%E8%A8%AD%E7%BD%AE&#34;&gt;安裝套件及環境設置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%89%8D%E5%BE%8C%E7%AB%AF%E5%82%B3%E5%80%BC-ipcmain-ipcrenderer&#34;&gt;前後端傳值 (IpcMain, IpcRenderer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%89%93%E5%8C%85%E6%88%90%E5%9F%B7%E8%A1%8C%E6%AA%94exe&#34;&gt;打包成執行檔（.exe）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%BE%8C%E8%A8%98&#34;&gt;後記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&#34;&gt;參考資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那麼首先從建立新專案開始，這邊用 .net Core MVC 來測試&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xf2fOwT.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/O0jwPZF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安裝套件及環境設置&#34;&gt;安裝套件及環境設置&lt;/h2&gt;
&lt;p&gt;建立專案之後，前往 Nuget 先把 &lt;strong&gt;ElectronNET API&lt;/strong&gt; 安裝下來&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hT5JZu0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安裝完畢之後，開始做一些前置動作，首先：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Program.cs&lt;/code&gt; 的部分，加上 &lt;code&gt;.UseElectron(args)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Vm7P1ds.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Startup.cs&lt;/code&gt; 的部分，加上 &lt;code&gt;Task.Run(async () =&amp;gt; await Electron.WindowManager.CreateWindowAsync()&lt;/code&gt;，讓專案啟動時一併啟動 Electron&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gvsXNx4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著打開命令提示字元或 Powershell ，輸入 &lt;code&gt;dotnet tool install ElectronNET.CLI -g&lt;/code&gt; 安裝 ElectronNET 工具。如果有安裝成功應該會看到下圖的回傳。如果已經安裝，就可以直接進到下一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hf4mg6u.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著移動到專案資料夾，並輸入 &lt;code&gt;electronize init&lt;/code&gt; 進行初始化，將會建立資料夾和必需檔案，這一步一定要確認成功並顯示 &lt;code&gt;Everything done&lt;/code&gt;，否則後面怎麼跑也起不來。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/q6RdjDm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：如果 &lt;code&gt;electronize init&lt;/code&gt; 的時候跳出 &amp;ldquo;Path cannot be null on init&amp;rdquo; 的錯誤，請移動到 &lt;code&gt;Startup.cs&lt;/code&gt; 或是 &lt;code&gt;Program.cs&lt;/code&gt; 所在的目錄再試一次。&lt;/p&gt;
&lt;p&gt;參考來源：&lt;a href=&#34;https://github.com/ElectronNET/Electron.NET/issues/245&#34;&gt;Electron.NET&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最後輸入 &lt;code&gt;electronize start&lt;/code&gt; 就可以準備看專案 On 起來囉！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HoSdpvU.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外除了 &lt;code&gt;electronize start&lt;/code&gt;，環境設置完畢後也可以直接從 Visual Studio 偵錯囉～&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/iFqkq6d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功從桌面應用開起來了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Y89i3HK.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;前後端傳值-ipcmain-ipcrenderer&#34;&gt;前後端傳值 (IpcMain, IpcRenderer)&lt;/h2&gt;
&lt;p&gt;在 Electron 中，會分成&lt;strong&gt;跑應用程式的主處理序 (main process)&lt;/strong&gt;、和&lt;strong&gt;處理網頁畫面的渲染處理序 (renderer process)&lt;/strong&gt;。而兩者之間的&lt;strong&gt;溝通則經由 &lt;code&gt;Ipc&lt;/code&gt; 開啟頻道傳遞訊息來實現&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這邊簡單嘗試一次，首先，我們先在 &lt;code&gt;Views/Home/index.cshtml&lt;/code&gt; 加上一個簡單的按鈕&lt;/p&gt;
&lt;p&gt;並且加上 JavaScript 發送訊息和接收訊息的方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DaNlQgS.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;ipcRenderer&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;electron&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 發送訊息，這邊傳送一個 Hello
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageToServer&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ipcRenderer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;channelToServer&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 接收訊息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ipcRenderer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;channelToClient&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;innerText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著到對應的 &lt;code&gt;Controllers/HomeController&lt;/code&gt; 的 &lt;code&gt;Index()&lt;/code&gt; 也加上接受到訊息之後加工並發出訊息的處理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Xw3AX8r.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IActionResult Index()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 接收訊息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Electron.IpcMain.On(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channelToServer&amp;#34;&lt;/span&gt;, (args) =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 傳送訊息，把接收到的訊息再加上 World&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; mainWindow = Electron.WindowManager.BrowserWindows.First(); &lt;span style=&#34;color:#75715e&#34;&gt;// 現在只有一個視窗所以直接拿&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Electron.IpcMain.Send(mainWindow, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channelToClient&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{args}, world!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; View();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著就讓我們執行看看，當我們按下按鈕&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qdkrpQ5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HYo0DUp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣就能成功在前後端之間傳值了！但要注意，它是建立一個 Channel 來傳遞訊息，所以&lt;strong&gt;兩邊的 channel 名稱可不能錯了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外也有提供同步版本的 &lt;code&gt;ipcRendered.sendSync()&lt;/code&gt; 與 &lt;code&gt;Electron.IpcMain.OnSync()&lt;/code&gt; 等等方法，相關的操作可以參照官方的 &lt;a href=&#34;https://github.com/ElectronNET/electron.net-api-demos&#34;&gt;API DEMO&lt;/a&gt; 中的 &lt;code&gt;Controllers/IpcController.cs&lt;/code&gt; 及 &lt;code&gt;Views/Ipc/Index.cshtml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而關於 IPC 的說明，可以參考這篇 &lt;a href=&#34;https://medium.com/@terracotta_ko/electron-ipc-%E6%A9%9F%E5%88%B6-2a1b087c9ae5&#34;&gt;[Electron] IPC 機制&lt;/a&gt;，以及官方文件：&lt;a href=&#34;https://www.electronjs.org/docs/api/ipc-main&#34;&gt;ipcMain&lt;/a&gt;、&lt;a href=&#34;https://www.electronjs.org/docs/api/ipc-renderer&#34;&gt;ipcRenderer&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;打包成執行檔exe&#34;&gt;打包成執行檔（.exe）&lt;/h2&gt;
&lt;p&gt;既然是桌面軟體，當然是要包裝成 exe 直接執行囉。畢竟總不能做了個小工具分享給朋友，還要「欸你自己開專案建置一下」吧 XD&lt;/p&gt;
&lt;p&gt;在專案資料夾下用命令列輸入指令 &lt;code&gt;electronize build /target win&lt;/code&gt; ，其中 &lt;code&gt;/target&lt;/code&gt; 除了 win 也可以指定 osx, liunx 等等&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4iSSuCC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;編譯需要一段時間，直到看見 &lt;code&gt;done&lt;/code&gt; 就可以了&lt;/p&gt;
&lt;p&gt;編出來的安裝包和執行檔會在 &lt;code&gt;bin\Desktop&lt;/code&gt; 和 &lt;code&gt;bin\Desktop\win-unpacked&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JKqNsVl.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;稍微打開看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ywg2CoQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以正常執行！&lt;/p&gt;
&lt;h2 id=&#34;後記&#34;&gt;後記&lt;/h2&gt;
&lt;p&gt;目前只做到專案成功跑起來和一些簡單的測試而已，幸虧黑大的文章跟網路上的一些教學相當完整，並沒有花費太多時間。但是畢竟約好了要玩玩看這個框架，且許多功能沒有試過，例如 &lt;a href=&#34;https://blog.darkthread.net/blog/electron-api-brief/&#34;&gt;Electron.NET API 快速巡覽&lt;/a&gt; 提到的大多功能，&lt;del&gt;因此還在煩惱後續的紀錄要集中在這一篇還是另外開成系列文，這部分等下週更新再說囉。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;6/29 更新: 最後還是決定把最近嘗試的都集中在這一篇了，畢竟我還是挺懶的，這樣比較好找嘛～&lt;/p&gt;
&lt;p&gt;另外有興趣自己試試的朋友，也可以參閱 &lt;a href=&#34;https://www.electronjs.org/docs&#34;&gt;官方文檔&lt;/a&gt; 其實相當完整。基本上只要會寫網頁，就能夠寫桌面 GUI，真是有夠賺。&lt;/p&gt;
&lt;p&gt;最後要特別感謝一下，當我開 Visual Studio 預設的範本時，赫然發現只有 Angular 和 React 的模板可以直接用，竟然沒有 Vue！真是嚇傻我了，幸好最後有找到 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alexandredotnet.netcorevuejs&amp;amp;ssr=false#overview&#34;&gt;VueJS with Asp.Net Core 3.1 Web API Template&lt;/a&gt; 才不致落得自造輪子的下場，感謝前輩們和社群的貢獻，南無南無。&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.darkthread.net/blog/electron-net/&#34;&gt;用 ASP.NET Core 寫桌面 GUI 應用程式 - Electron.NET - 黑暗執行緒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.darkthread.net/blog/electron-api-brief/&#34;&gt;Electron.NET API 快速巡覽 - 黑暗執行緒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10200819&#34;&gt;ElectronNET : .NET Core+NodeJS做跨平台桌面程式 - iT邦幫忙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@terracotta_ko/electron-ipc-%E6%A9%9F%E5%88%B6-2a1b087c9ae5&#34;&gt;[Electron] IPC 機制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.electronjs.org/docs&#34;&gt;Electronjs - Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>WakaTime —— 我 Coding 了多久？</title>
      <link>https://igouist.github.io/post/2020/06/wakatime/</link>
      <pubDate>Sun, 07 Jun 2020 22:10:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/06/wakatime/</guid>
      <description>&lt;p&gt;這一周又是 &lt;del&gt;偷懶週&lt;/del&gt; 繁忙週，因此就跟大家分享一個有趣的網站：&lt;a href=&#34;https://wakatime.com/&#34;&gt;WakaTime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WakaTime 能夠幫你自動記錄寫程式的時間、常用語言及專案，只要簡單地在常用的 IDE 設定好擴充套件就可以達成。 WakaTime 支援的 IDE 可以參閱 &lt;a href=&#34;https://wakatime.com/plugins&#34;&gt;WakaTime - Plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;註冊相當簡單，此處就不贅述。稍微介紹一下儀表板的各區塊的功能：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wd1LZLr.png&#34; alt=&#34;&#34;&gt;
左上會有最近的專案及花費時間，每個色塊都是一個專案，滑鼠移上去就會顯示專案名稱。&lt;/p&gt;
&lt;p&gt;點擊其中一天更會顯示當天的時間軸，可說是無所遁形。至於它判斷專案名稱的方法是看你編輯的檔案所在的資料夾名稱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2icNzlL.png&#34; alt=&#34;&#34;&gt;
右上是編寫和測試的所佔時間，不過我在使用的時候常常抓不到測試和建置的時間，因此沒在意過。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ic7NGAE.png&#34; alt=&#34;&#34;&gt;
正左則是當天的時間軸和某幾段時間正在處理的專案，可以清楚看到大概哪個時段在認真 Coding（因為都是公司專案，這邊就先碼一下）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Qzu0ucB.png&#34; alt=&#34;&#34;&gt;
正右則是達到目標的比例，WakaTime 可以到左側選單的 &lt;code&gt;Goal&lt;/code&gt; 設定個人目標，例如每週幾個小時，就可以在這邊看自己當天的達成率如何。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nu640EP.png&#34; alt=&#34;&#34;&gt;
左下則是最近常使用的語言和比例，主要是抓取編輯中檔案的副檔名自動判定。另外也能到 &lt;code&gt;Settings -&amp;gt; Custom Rules&lt;/code&gt; 去設定個人化的規則，例如我個人就會將 .ipynb 計時到 Python 中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Bu5df8N.png&#34; alt=&#34;&#34;&gt;
右下就很直覺，就是紀錄常用的 IDE 的時間，像我個人挺偏食的，就不常看到這裡。不過一些用瀏覽器的 Coding 方式就不太適用，像我常用的 Jupyter notebook 基本上就是抓不到，許願希望之後的 Chrome 能支援。&lt;/p&gt;
&lt;p&gt;除了上面這些區塊，往下拉也可以看到最近的專案耗費的時間，可以看看最近耗費比較多的專案有哪些。&lt;/p&gt;
&lt;h2 id=&#34;環境設定&#34;&gt;環境設定&lt;/h2&gt;
&lt;p&gt;WakaTime 主打的就是輕便、自動計時。因此設定步驟也相當簡單，各 IDE 的設定步驟可以從 &lt;a href=&#34;https://wakatime.com/plugins&#34;&gt;WakaTime - Plugin&lt;/a&gt; 裡點選自己用的 IDE 進去看安裝介紹。這邊就以我最常用的 Visual Studio 做示範。&lt;/p&gt;
&lt;p&gt;首先點選 Wakatime 右上角的 個人頭像，進入 Settings，確認左側在 Account，這時應該能看到自己的 API Key，點選顯示之後先複製下來。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/pvbaKAT.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;之後打開你的 Visual Studio，上方工具列點選 &lt;code&gt;延伸模組 -&amp;gt; 管理延伸模組&lt;/code&gt;，開啟模組管理員之後選擇 線上，搜尋 Wakatime 並安裝。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Aj6q2XL.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;重啟 Visual studio 並安裝完畢後，再度打開時應該會自動跳出設定畫面；如果沒有跳出來，也可以從上方工具列點選 &lt;code&gt;工具 -&amp;gt; WakaTime -&amp;gt; Settings&lt;/code&gt; 進入設定畫面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Agrd4QS.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;設定畫面如下，將剛剛複製的 API Key 貼上。如果是在公司或是有需要設定 Proxy 的地方記得也順便填一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/eFCfNv4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣就設定完囉！是不是很簡單呢？之後當使用 Visual Studio 寫程式的時候，就會自動記下 時間、程式類型、資料夾名稱並傳到 Wakatime 做統計囉&lt;/p&gt;
&lt;p&gt;當然，對於背景紀錄資料有疑慮的朋友，也可以直接翻 &lt;a href=&#34;https://github.com/wakatime&#34;&gt;WakaTime 的 Github&lt;/a&gt;。這個套件是完全開源的。如果嫌使用擴充太無聊或是想自己開發個比較好看的儀表板的朋友，也可以參閱 &lt;a href=&#34;https://wakatime.com/developers&#34;&gt;Wakatime 的開發者頁面&lt;/a&gt;呦。&lt;/p&gt;
&lt;p&gt;最後關於紀錄的部分，之前有看到實測說單純掛網走人是不會算時數的。不過會這樣做的人，本來也就沒什麼動機去用這類時間記錄的工具吧！&lt;/p&gt;
&lt;h2 id=&#34;後記&#34;&gt;後記&lt;/h2&gt;
&lt;p&gt;要注意，免費用戶只能看最近 14 天的紀錄，要看完整紀錄就必須 &lt;a href=&#34;https://wakatime.com/pricing?utm_source=magic-panda-engineer&#34;&gt;付費&lt;/a&gt;，我個人因為是看心情愉快的，因此免費版已經很符合我的需求。若是使用多個 IDE 或想當成時數管理的朋友，又或者是想戰 &lt;a href=&#34;https://wakatime.com/leaders&#34;&gt;排行榜&lt;/a&gt; 的朋友，可以使用一陣子再考慮囉。但要強調，紀錄時間只是做為參考使用，並非工作的標準喲！畢竟弄文件跟查 Bug 更花時間嘛。&lt;/p&gt;
&lt;p&gt;雖然又水了一篇，不過也是挺想把這東西介紹給大家用用看。雖然我個人做時間紀錄大多是使用 &lt;a href=&#34;https://www.playpcesor.com/2016/11/toggl-time-track.html&#34;&gt;Toggl&lt;/a&gt; 來計時，不過偶而開 WakaTime 看看自己最近花多少時間在 Coding？都在寫什麼？專案之間的時間分配得如何？就有種更能掌握自己最近都在忙些什麼的感覺。有時看到柱狀圖一排高聳，或是連續幾周達成目標，就會更有戰鬥力的感覺；若是發現最近時數低落，也會心虛想要彌補一點。如此也是挺有一番趣味，共勉之。&lt;/p&gt;
&lt;h2 id=&#34;延伸閱讀&#34;&gt;延伸閱讀&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/code-and-me/%E7%94%A8-wakatime-%E8%87%AA%E6%88%91%E7%9B%A3%E6%8E%A7-f59599144e28&#34;&gt;用 WakaTime 自我監控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magic-panda-engineer.github.io/tools/wakatime-for-time-management&#34;&gt;利用 Wakatime 來掌握寫程式的時間&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://demo.tc/post/visual%20studio%20%E5%B7%A5%E4%BD%9C%E6%99%82%E9%96%93%E8%A8%98%E9%8C%84%E5%A5%97%E4%BB%B6%20-%20codealike&#34;&gt;Visual Studio 工作時間記錄套件 - Codealike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2018/11/rescuetime.html&#34;&gt;RescueTime 拯救時間利器上手教學，自動時間記錄與生產力評分&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Json View —— 用 Chrome 打開 Json 的正確方式</title>
      <link>https://igouist.github.io/post/2020/05/jsonview/</link>
      <pubDate>Sun, 17 May 2020 15:39:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/05/jsonview/</guid>
      <description>&lt;p&gt;本來這週已經沒梗了，不過同學來問了個接 API 的問題還附了照片，頓時決定順手推一下好用的瀏覽器插件：&lt;a href=&#34;https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc&#34;&gt;Json View&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Json View 是一款 Chrome 的擴充套件，能幫忙把 Json 格式的資料重新排版，保護妳我的眼睛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：關於 JSON 可以參閱 &lt;a href=&#34;http://miniaspreading.github.io/guide-to-json/1-what-is-json.html&#34;&gt;JSON精要讀書紀錄&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;照慣例來張效果圖鎮樓
&lt;img src=&#34;https://i.imgur.com/VYg1Siy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;該同學傳來的圖片是長這樣的（示意圖，非當事 API，用 UBike 開放資源臨演）
&lt;img src=&#34;https://i.imgur.com/kaoOwTt.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;突然還以為咱們要玩威利在哪裡，這不是欺負我眼睛不好嘛。&lt;/p&gt;
&lt;p&gt;但畢竟只是小問題，不能開口就要人家給 Swagger 或用個 Postman（API測試神器，之後也來推薦一篇），用圖片描述也是無可厚非，但還是必須顧眼睛。因此現場直接就推薦同學安裝這款 chrome 插件：&lt;a href=&#34;https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc&#34;&gt;Json View&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安裝之後再度使用瀏覽器打開 API，就會是長這樣的：
&lt;img src=&#34;https://i.imgur.com/TgKKIUK.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;經過自動排版之後，這不是好看多了！&lt;/p&gt;
&lt;p&gt;這邊真心推薦用 Chrome 的朋友，就先裝下來吧；至於火狐似乎原本就會幫忙整理排版了；用 IE 的話，就當我沒說。另外也要感謝親愛的同學，&lt;del&gt;又讓我水了一篇&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;ps: 最後效果跟鎮樓圖有差別？因為我是黑色主題的愛好者，所以這就再推一個擴充套件囉：&lt;a href=&#34;https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh&#34;&gt;Dark Reader&lt;/a&gt;。謝謝觀看，咱們下次見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Carbon —— 把程式碼片段截成有質感的圖片吧</title>
      <link>https://igouist.github.io/post/2020/05/carbon/</link>
      <pubDate>Sun, 10 May 2020 23:57:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/05/carbon/</guid>
      <description>&lt;p&gt;開始挑戰每週寫文之後，發現最大的敵人根本不是寫文這件事，而是自己的惰性啊。像這次母親節假期過太爽，差點兒就忘記發文…… 所以這週就還是 &lt;del&gt;偷懶&lt;/del&gt; 工具介紹囉。&lt;/p&gt;
&lt;p&gt;今天要分享的是 &lt;a href=&#34;https://carbon.now.sh/&#34;&gt;Carbon&lt;/a&gt; 這個工具，它能夠&lt;strong&gt;將貼上的程式碼輸出成圖片，並且支援程式碼上色&lt;/strong&gt;，還可以自選字型、背景色等等，產出的圖可以說相當有質感。&lt;/p&gt;
&lt;p&gt;當傳送圖片比較快或排版比較好的場合（例如Line, Facebook..），或是在部落格和文件中想直接放漂亮圖片，以及&lt;strong&gt;需要示範給對方看可是又不想要對方直接複製貼上&lt;/strong&gt;的時候可謂是相當實用。&lt;/p&gt;
&lt;p&gt;先來一張成果圖鎮樓
&lt;img src=&#34;https://i.imgur.com/jM07HAC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Carbon 的操作相當直覺且簡單，進入 &lt;a href=&#34;https://carbon.now.sh/&#34;&gt;Carbon 的頁面&lt;/a&gt; 後，中央的程式碼區塊可以自由編輯，通常會直接將要做成圖片的程式碼貼於此處。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RT4XIqZ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而程式碼區塊的上方的兩個下拉選單分別是&lt;strong&gt;程式碼區塊的配色主題&lt;/strong&gt;和&lt;strong&gt;程式語言&lt;/strong&gt;，主要的樣式（例如程式碼上色）會以這兩個為主。&lt;/p&gt;
&lt;p&gt;接著的調色盤則是&lt;strong&gt;背景色&lt;/strong&gt;，即程式碼區塊外的顏色，也支援透明度。像我要將圖片放在部落格時，就可以讓背景色和部落格一致，使中央的程式碼區塊更強烈。&lt;/p&gt;
&lt;p&gt;最後的齒輪則是&lt;strong&gt;設定，字型和陰影等都可以從裡面做調整&lt;/strong&gt;。不過選項挺多的，建議可以自己都調看看，像我個人就固定會把上方的狀態列關閉。&lt;/p&gt;
&lt;p&gt;而右側就是&lt;strong&gt;匯出&lt;/strong&gt;的部分了，有發推特（真的有人會這樣發？我很懷疑）以及下載的選項，下載可以直接點選，或是下拉式輸入檔名和變更圖片大小格式等等。&lt;/p&gt;
&lt;p&gt;這邊就直接拿上一篇的 &lt;a href=&#34;https://igouist.github.io/post/2020/05/bandon-4-heroku/&#34;&gt;Line Notify 範例&lt;/a&gt; 的程式碼來試試吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JvWVrjQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而製作出來的效果就會像這樣子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jM07HAC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這工具對我個人來說挺喜歡的，有時候要傳程式碼給同學都會直接截圖，有了這個之後就可以傳得優雅一點（對我就是想叫你自己打）&lt;/p&gt;
&lt;p&gt;但還沒有用在部落格的打算，畢竟我身邊問過的人都表示：如果他們找到的網頁不給複製就會直接關掉。這… 我選擇妥協，真香。&lt;/p&gt;
&lt;p&gt;那麼今天的工具推薦就到這邊，歡迎立馬用你的同學 or 同事來試試看，保證能促進友誼、增加互動呦！&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://free.com.tw/carbon/&#34;&gt;Carbon 將程式碼轉為美麗圖片，在社群分享更引人注目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mnya.tw/cc/word/1088.html&#34;&gt;Carbon：將程式碼轉換成美觀的圖片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他相似工具&#34;&gt;其他相似工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://free.com.tw/codeimg-io/&#34;&gt;Codeimg 程式碼轉圖片，可自訂視窗陰影效果更適合分享社群網站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://free.com.tw/codezen/&#34;&gt;CodeZen 將程式碼轉為 JPG、PNG 圖片，上色後加入視窗及陰影效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Feedly —— 用 RSS 訂閱來主動篩選資訊吧</title>
      <link>https://igouist.github.io/post/2020/04/feedly/</link>
      <pubDate>Sun, 19 Apr 2020 23:56:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/04/feedly/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;「你看，我認為人的腦子本來就像一間空空的小閣樓，應該有選擇地把傢俱放進去，傻瓜才會把他見到的所有破爛一古腦兒的裝進去。這樣一來，那些對他有用的知識反而被擠了出來；或者，最多不過是和許多其他的東西摻雜在一起，在取用的時候也會很困難。所以一個會工作的人，在要把一些東西裝進他那間小閣樓似的頭腦中的時候，確實是非常小心謹慎的。」&lt;/p&gt;
&lt;p&gt;　　——《福爾摩斯探案記：血字的研究》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在咱們寫程式這行中，幾乎所有人都必須要在網路上找尋資料；而就算非這一行的朋友們，也會在網路上多方攝取資源。隨著時間的累積，都會開始有一份列表，諸如一些崇拜的大神或是固定追蹤的部落格，又或是文風比較喜歡、素質感覺比較高的新聞或評論等等。&lt;/p&gt;
&lt;p&gt;然而列表越來越長，就算加到書籤也總不能沒事就逛一大圈，也常常逛到不知道到底在幹嘛囧。因此把多個資訊來源集中起來整理就成了面對資訊爆炸的關鍵一步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://feedly.com/&#34;&gt;Feedly&lt;/a&gt; 就是一個協助資訊來源管理的工具，可以很方便地把不同訂閱來源整理在一起&lt;/strong&gt;，例如你可能追隨了五六個大神的部落格，只要這些大神都有提供 RSS 訂閱，Feedly 就會將大神更新的文章收集到平台上。&lt;/p&gt;
&lt;p&gt;每天只需要上去 Feedly 看一下有沒有哪位大神更新，就可以化主動為被動，穩定接收新資訊。並且由於集中管理的關係，也可以檢視是否有哪個資料來源，如新聞網站，實際上更新的文章並不太合你胃口，或是哪些已經停止更新了，就可以進行剪枝的動作，建立自己的篩選機制。&lt;/p&gt;
&lt;p&gt;Feedly 使用的是 RSS，是一種自古以來就存在(?)的訂閱方式。主要是&lt;strong&gt;將網站裡文章的標題和簡介等資訊整理成 XML 的文字格式&lt;/strong&gt;（例如本站的&lt;a href=&#34;https://igouist.github.io/index.xml&#34;&gt;RSS頁面&lt;/a&gt;）&lt;strong&gt;，使訂閱服務只需要去各個網站抓取輕便的文字檔就能夠得知網站是否更新、現在有哪些文章等資訊&lt;/strong&gt;。因此本身可以說是相當輕量簡單的服務。&lt;/p&gt;
&lt;p&gt;而我們就可以用 Feedly 定期去取得我們列好的 RSS 資訊，省下我們在網站間奔波的時間。類似的服務還有 Inoreader 等等，本質上並沒有太大的差別，可以挑喜歡的試用看看。&lt;/p&gt;
&lt;h2 id=&#34;開始使用如何訂閱&#34;&gt;開始使用＋如何訂閱&lt;/h2&gt;
&lt;p&gt;到 &lt;a href=&#34;https://feedly.com/&#34;&gt;Feedly&lt;/a&gt; 的首頁進行註冊之後，會先導到添加資訊來源的頁面如下（我的頁面是黑色的，是因為左側選單有黑暗模式可以開，點一下月亮就可以囉）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XbpJvdz.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;搜尋框裡面可以輸入 文字、網址和 RSS 網址 來進行搜尋，以本網站為例，貼上網址之後，Feedly 就會去找是否提供 RSS，有的話就會像這樣搜尋到，便可以按下 Follow；可以從圖片中看見現在只有我一個人追蹤我自己（泣）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/S71J7dM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按下追隨之後，可以按 + New Feed，&lt;strong&gt;這個 Feed 可以把它看作是一種分類&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WUrdijS.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由於本站大多分享程式相關的部分，因此我們這邊建立程式設計的分類&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qxPHVg0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;加完之後，就可以在左側看見剛剛建好的分類已經來源囉，分類及來源旁邊的數字則是這個分類下的新文章的篇數&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DIftHjN.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;為了之後說明方便，再多加幾個來源。下面是我一個挺喜歡的部落格&lt;a href=&#34;https://www.playpcesor.com/&#34;&gt;電腦玩物&lt;/a&gt;，分享挺多時間管理和生活流程等等的工具和技巧。像這種大神級只需要輸入名字搜尋就可以追蹤囉&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/29VwdC6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在這一步就可以把平常會看的技術部落格、週刊之類的都加進來，並且予以分類。&lt;/p&gt;
&lt;p&gt;往後&lt;strong&gt;如果需要訂閱新的來源，在左側選單的 &lt;code&gt;＋&lt;/code&gt; 就可以再回到增加來源的頁面囉！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;p&gt;訂閱了一些來源之後，就可以嘗試使用。我個人每天會來到 Feedly 從 Today 的部分挑選幾篇標題讓人感興趣的文章來看。可以從左上角點選 Today 就可以回到訂閱文的頁面。&lt;/p&gt;
&lt;p&gt;右上角可以選擇文章排列的模式，例如很像信箱的顯示標題，和我較喜歡的標題內文，另外也還有像卡片格狀排列的模式可以選，建議先選個喜歡的版面會提高每天閱讀的意願。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/GBsnQU3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;因此&lt;strong&gt;最主要的活動範圍就會在這個 Today 進行&lt;/strong&gt;，邊滑動邊選擇不同來源的文章來閱讀，也可以從左側選擇某個分類、甚至某個來源的文章來看。若是網站可以擷取的，&lt;strong&gt;點選文章之後就會從右側彈出文章的簡介，全文仍然要回到來源網頁閱讀&lt;/strong&gt;，為了排版舒適以及支持寫手的流量來看這是相當好的做法。故打開文章之後往下拉，可以看見 &lt;strong&gt;VISIT WEBSITE&lt;/strong&gt; 按下去就會到目標文章囉&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ER63IbJ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;此外也可以看見上面一排工具列，&lt;strong&gt;若是有購買付費服務，就可以和其他像是 Evernote 的工具連動，把文章傳送過去&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而上方工具列最左側的&lt;strong&gt;書籤圖案則是稍後閱讀 Read Later&lt;/strong&gt;，在這邊選取之後或是在 Today 文章列表有選取的話，&lt;strong&gt;就會記錄到左側選單的 Read Later&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7GVCm8l.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下來最重要的就是已讀功能，除了閱讀完單篇文章標示為已讀，以及在列表對某邊文章打勾以外，當 Today 或某個分類捲動到底時，會有一個 全部標示為已讀 的按鈕可以使用。或是上圖的右側也可以看到一個標著數字的打勾，也是全部已讀的意思。已讀之後就會收到過往已讀的清單中。靠著分類和已讀就可以將每天的資訊整個流動過去。&lt;/p&gt;
&lt;p&gt;此外，如果跟我一樣&lt;strong&gt;一開始就加上一堆來源的，文章的數量就會爆炸多，左邊的數字也會超級大&lt;/strong&gt;。但這並不用擔心，在資訊爆炸的年代，資訊本身就是看不完的，有些人會因此感到焦慮，但其實篩選比起暴飲暴食更為重要，因此我個人是建議&lt;strong&gt;排定文章分類的優先順序，並且懂得取捨&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我個人現在是分成 程式設計、知識、科技新聞、一般新聞 等類別，這也代表我個人對這些資訊的優先順序；時間少的時候就從優先順序高的開始看，例如技術大神的新文章，並直接捨棄新聞等較不重要的部分；時間充裕的時候才考慮大致瀏覽過一次去挑想看的來看。&lt;strong&gt;知識類的東西，看了也許有賺，但如果沒有時間看了，不看也不虧，因此並不要太過執著，必要的時候直接全部已讀也是合適的做法&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;來源管理&#34;&gt;來源管理&lt;/h2&gt;
&lt;p&gt;如果只是訂閱各網站集中起來，那麼和月刊和報紙等也沒什麼太大的差異。Feedly 最吸引我的一點就是對來源管理的方便度。在每個分類右上角的選單會有個管理來源&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lXgrTi2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;或是左下角的頭像中也可以進入&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HKnJ8pH.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;進入之後就會到資源管理的頁面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tB4w9J9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面會告訴你訂閱了幾個來源，有哪些來源已經有一段時間沒更新（有睡了跟死了兩個程度），&lt;strong&gt;每個來源也可以確認每個月的貼文數量，以及實際上每個月有點進去閱讀的數量&lt;/strong&gt;。藉此就可以掌握那些媒體可能過於嘈雜，或是哪些來源的文章其實並沒有興趣等等，可以按照自己的需求去管理資訊的來源。經過不斷的篩選和添加，就能夠讓整個頁面成為你的形狀。&lt;/p&gt;
&lt;h2 id=&#34;心得&#34;&gt;心得&lt;/h2&gt;
&lt;p&gt;這幾天和女友及同事聊到都逛哪些部落格之類的話題時，發現大多都還是有空的時候主動去巡查一遍，最多就到信箱訂閱或是 FB 按讚然後佛系看到這樣，讓我覺得應該推廣一下 Feedly 這股神器。雖然這篇和技術沒什麼直接關係，幸好六角的鼠年全馬有八篇心得文的扣打，就直接選擇用在這裡。&lt;/p&gt;
&lt;p&gt;有看過前幾篇文章的應該能夠了解，對我而言&lt;strong&gt;比起主動去做這些事情，不如建立一個自動化的機制被動去接收訊息，省去過程這段不必要的時間&lt;/strong&gt;；例如比起常常上去便當網或 PTT 找我要的東西出現了沒，我更喜歡讓電腦替我代勞並在出現之後提醒我的做法。因此想看的文章想追的網站多了，Feedly 對我來說就是一件神兵利器，節省了許多功夫。&lt;/p&gt;
&lt;p&gt;我曾聽過一句話：資訊不等於知識。我相信資訊的來源是需要主動去選擇的，這也就是開頭引用福爾摩斯的這句名言的原因。若是&lt;strong&gt;不管什麼東西都直接吃下肚，甚至不管多少都堅持吃完，那只會得到無邊的痛苦&lt;/strong&gt;。經過有系統的整理和篩選，最終才能建立方便又有效的流程。&lt;/p&gt;
&lt;p&gt;然而各大社群平台的演算法實在太謎，大多部落格也不會有月刊或信箱發送，因此還是要主動出擊去做篩選，不斷檢視過程和品質，留下自己想看並且素質值得期待的資訊來源，才能建立高品質的資訊閱讀，看得健康又有用。就像電腦玩物在 Feedly 的介紹文中說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「只有在自己為自己訂閱、整理資訊管道的過程中，你才能逐漸建立起自己的知識世界觀，開始思考自己需要什麼資訊，而這時候的資訊閱讀才是有效的。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;共勉之。&lt;/p&gt;
&lt;h2 id=&#34;延伸閱讀參考資料&#34;&gt;延伸閱讀、參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2018/04/rss-facebook.html&#34;&gt;RSS 不是臉書演算法解藥，我們真正需要的是垂直閱讀與實踐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bnext.com.tw/article/48743/can-rss-revival&#34;&gt;被演算法「毀掉」的閱讀習慣，用RSS救得回來嗎？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2017/08/feedly.html&#34;&gt;Feedly 新功能找回高品質資訊閱讀，自動過濾無效與噪音網站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2013/03/feedly-google-reader.html&#34;&gt;Feedly 完全上手教學，延續 Google Reader 閱讀器體驗 - 電腦玩物&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://iamfugue.net/news-aggregator/&#34;&gt;【工具】RSS 訂閱初體驗 - 微 GEEK 百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thelaziest.net/2019/12/rss-feedly.html&#34;&gt;免費 RSS 閱讀器 Feedly ，選擇真正需要的資訊，不再被演算法餵食垃圾內容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
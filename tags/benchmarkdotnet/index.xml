<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BenchmarkDotnet on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/tags/benchmarkdotnet/</link>
    <description>Recent content in BenchmarkDotnet on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <managingEditor>Igouist (Igouist)</managingEditor>
    <webMaster>Igouist (Igouist)</webMaster>
    <follow_challenge>
      <feedId>56200764111934464</feedId>
      <userId>41821085092905984</userId>
    </follow_challenge>
    <lastBuildDate>Sun, 13 Jun 2021 22:25:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/tags/benchmarkdotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#: BenchmarkDotnet —— 效能測試好簡單</title>
      <link>https://igouist.github.io/post/2021/06/benchmarkdotnet/</link>
      <pubDate>Sun, 13 Jun 2021 22:25:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2021/06/benchmarkdotnet/</guid>
      <description>&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/rhmeAUi.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;「你寫那什麼鬼東西？這個ＯＯＯ寫法比較好啦！」&lt;br/&gt;
『聽你在屁！明明是這個ＸＸＸ寫法快= =』&lt;/p&gt;
&lt;p&gt;哇喔！等等！&lt;strong&gt;想戰效能嗎&lt;/strong&gt;？那你一定需要這款 &lt;strong&gt;BenchmarkDotnet&lt;/strong&gt;！&lt;/p&gt;
&lt;h2 id=&#34;介紹與安裝&#34;&gt;介紹與安裝&lt;/h2&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://github.com/dotnet/BenchmarkDotNet/raw/master/docs/logo/logo-wide.png&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;我們在 Coding 的時候，或多或少都會有「不知道這兩個寫法哪個比較好？」、「聽說Ａ寫法比Ｂ寫法快，真的嗎？」這類關於效能的疑問。&lt;/p&gt;
&lt;p&gt;在遠古時期，當我們需要驗證這種想法，可能就要用記錄秒數的方式，或是搭配迴圈、然後再印在畫面上等等這類土法煉鋼的方式。&lt;/p&gt;
&lt;p&gt;然而這種單純計秒數的 Print 流測試，可能比較到了時間成本，卻忽略了吃掉的記憶體這些空間成本；又或是每次都要插一堆列印文字的語句，因為麻煩就萌生退意等等…&lt;/p&gt;
&lt;p&gt;這時候就是 BenchmarkDotnet 出場的時候啦！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BenchmarkDotnet 是一款簡單好用的效能比較工具，可以幫助我們比對多組程式碼，並告訴我們平均的執行時間、耗用的記憶體等等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要使用 BenchmarkDotnet 這個神奇妙妙幫手，它就能幫我們搞定這些麻煩的事情，讓我們可以專注在要測試的程式碼內容囉。&lt;/p&gt;
&lt;p&gt;接下來要記錄的部份有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AE%89%E8%A3%9D&#34;&gt;介紹與安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BD%BF%E7%94%A8-benchmark-%E4%BE%86%E6%8C%87%E5%AE%9A%E5%8F%83%E8%B3%BD%E9%81%B8%E6%89%8B&#34;&gt;使用 Benchmark 來指定參賽選手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BD%BF%E7%94%A8-memorydiagnoser-%E5%8A%A0%E4%B8%8A%E8%A8%98%E6%86%B6%E9%AB%94%E7%9A%84%E6%AF%94%E8%BC%83&#34;&gt;使用 MemoryDiagnoser 加上記憶體的比較&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BD%BF%E7%94%A8-jobs-%E4%BE%86%E6%8C%87%E5%AE%9A%E6%B8%AC%E8%A9%A6%E7%92%B0%E5%A2%83&#34;&gt;使用 Jobs 來指定測試環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BD%BF%E7%94%A8-exporters-%E4%BE%86%E7%94%A2%E7%94%9F%E5%A0%B1%E8%A1%A8&#34;&gt;使用 Exporters 來產生報表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%94%A8-params-%E4%BE%86%E6%8C%87%E5%AE%9A%E6%95%B8%E5%80%BC&#34;&gt;用 Params 來指定數值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%B5%90%E8%AA%9E%E8%88%87%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&#34;&gt;結語與參考資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊讓我們來實際上跑過一次基本用法並記錄吧！&lt;/p&gt;
&lt;p&gt;首先讓我們先到 Nuget 安裝 &lt;code&gt;BenchmarkDotnet&lt;/code&gt;，因為依賴套件蠻多的，可能需要等待一下。&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/aqv4KvE.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：本篇的專案範本是「主控台應用程式」，不過平常都是直接使用簡單好用的 &lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10193063&#34;&gt;Linqpad&lt;/a&gt; 快速測一下比較多。&lt;/p&gt;
&lt;p&gt;不過反正 BenchmarkDotnet 已經夠太簡潔方便了，各位朋友用順手的方式試試看就好囉。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;安裝完畢之後，就可以開始準備一下參賽選手的擂台啦～&lt;/p&gt;
&lt;h2 id=&#34;使用-benchmark-來指定參賽選手&#34;&gt;使用 Benchmark 來指定參賽選手&lt;/h2&gt;
&lt;p&gt;既然都說要比較效能了，今天就挑個前陣子同事提到過的主題來比較吧：&lt;/p&gt;
&lt;p&gt;「&lt;strong&gt;在需要回傳空串列的場合，使用 &lt;code&gt;Enumerable.Empty&lt;/code&gt; 會比 &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 更好一些&lt;/strong&gt;」&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;針對這個問題，附上補充資訊：&lt;a href=&#34;https://stackoverflow.com/questions/1894038/is-it-better-to-use-enumerable-emptyt-as-opposed-to-new-listt-to-initial&#34;&gt;Is it better to use Enumerable.Empty&lt;T&gt;() as opposed to new List&lt;T&gt;() to initialize an IEnumerable&lt;T&gt;? - Stackoverflow&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;現在讓我們用這個主題來測試吧，假定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;紅方選手：用 &lt;code&gt;Enumerable.Empty&lt;/code&gt; 來建立空串列&lt;/li&gt;
&lt;li&gt;藍方選手：用 &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 來建立空串列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為我們是要測試兩者做出空串列的差異，至少也要有個類別：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 協力單位，用來當成串列的填充物&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Guid Id { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar1 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar2 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar3 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar4 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar5 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後讓我們開始正式的佈置，先讓我們&lt;strong&gt;開一個 Class 來當作擂台&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 測試用擂台&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmptyVSNewList&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後請紅方選手上擂台：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 紅方選手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Benchmark]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Empty()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Enumerable.Empty&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及我們的藍方選手：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 藍方選手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Benchmark]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; NewList()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;補充：要直接 &lt;code&gt;Empty() =&amp;gt; Enumerable.Empty&amp;lt;Foo&amp;gt;();&lt;/code&gt; 也是可以的。&lt;/p&gt;
&lt;p&gt;我個人習慣都用同一個準備好的 BenchmarkDotnet 擂台，複製改改裡面的內容就拿來測試了，所以乖乖寫出整個 Function 改起來比較方便 XD&lt;/p&gt;
&lt;p&gt;但為了閱讀方便，本篇後續會整理成比較簡單的 lambda 寫法，請不要太在意。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;選手們就定位之後，&lt;strong&gt;替他們加上 &lt;code&gt;[Benchmark]&lt;/code&gt; 的屬性，作為參賽的證明&lt;/strong&gt;。現在擂台上應該是長這樣的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 測試用擂台&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmptyVSNewList&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 紅方選手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Empty()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Enumerable.Empty&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 藍方選手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; NewList()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著，讓我們回到 &lt;code&gt;Main&lt;/code&gt; 方法（或任何你要進行比試的地方），加上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; summary = BenchmarkRunner.Run&amp;lt;EmptyVSNewList&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;讓 BenchmarkRunner 去抓泛型裡面有 &lt;code&gt;[Benchmark]&lt;/code&gt; 的選手進行測試。&lt;/p&gt;
&lt;p&gt;以我們這次示範的主控台應用程式來說，可能就會像這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; BenchmarkDotnetTest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; summary = BenchmarkRunner.Run&amp;lt;EmptyVSNewList&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 測試用擂台&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmptyVSNewList&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 紅方選手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [Benchmark]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Empty()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Enumerable.Empty&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 藍方選手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [Benchmark]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; NewList()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 協力單位，用來當成串列的填充物&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Guid Id { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar1 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar2 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar3 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar4 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Bar5 { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就安排妥當啦！（其實也就加個測試用的 Class 和讓兩個測試方法而已囧）&lt;/p&gt;
&lt;p&gt;BenchmarkDotnet 必須在 release 環境下啟動，先讓我們切換一下組態：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/iKmHI8C.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小提示：如果跟我一樣，喜歡使用 Linqpad 的朋友，右下角切換成 &lt;code&gt;/o+&lt;/code&gt; 才是 Release 組態呦。還有記得要用系統管理員開啟嘿。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;現在雙方站定，讓我們開始比試吧！&lt;/p&gt;
&lt;p&gt;開始執行之後，會先列一下這次測試的環境資訊，接著就會看到很多輪的比試階段（對，你不用自己寫迴圈來重複測試）：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/UN7wXuS.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;最後就會有測試結果出爐啦：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/9UEWxFg.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// * Summary *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BenchmarkDotNet=v0.13.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, OS=Windows &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;.18363.1556 (&lt;span style=&#34;color:#ae81ff&#34;&gt;1909&lt;/span&gt;/November2019Update/19H2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Intel Core i7-&lt;span style=&#34;color:#ae81ff&#34;&gt;7700&lt;/span&gt; CPU &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;.60GHz (Kaby Lake), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; CPU, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; logical and &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; physical cores
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.NET SDK=&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;.300
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#66d9ef&#34;&gt;Host&lt;/span&gt;]     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1&lt;/span&gt;.15 (CoreCLR &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21202&lt;/span&gt;, CoreFX &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21402&lt;/span&gt;), X64 RyuJIT  [&lt;span style=&#34;color:#66d9ef&#34;&gt;AttachedDebugger&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DefaultJob &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1&lt;/span&gt;.15 (CoreCLR &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21202&lt;/span&gt;, CoreFX &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21402&lt;/span&gt;), X64 RyuJIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  Method |      Mean |     Error |    StdDev |    Median |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-------- |----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   Empty | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0016&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0067&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0062&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| NewList | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.6262&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0554&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0491&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.6267&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這邊可以看到當年統計課熟悉的那些平均值、標準差等等（不過平常戰效能的時候都直接看平均時間比較多啦）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：可以在擂台的類別上（在這個例子中就是 &lt;code&gt;EmptyVSNewList&lt;/code&gt;）加上&lt;br/&gt; &lt;strong&gt;&lt;code&gt;[MinColumn, MaxColumn]&lt;/code&gt;&lt;/strong&gt; 的 Attribute，就會多出最大值和最小值的資訊囉。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  Method |      Mean |     Error |    StdDev |    Median |       Min |       Max |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-------- |----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   Empty | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0005&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0015&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0014&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0054&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| NewList | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.7158&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0490&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0459&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.7072&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.6365&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8187&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;現在第一階段的結果出爐啦：&lt;code&gt;Enumerable.Empty&lt;/code&gt; 比 &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 快了好幾倍呢！&lt;/p&gt;
&lt;h2 id=&#34;使用-memorydiagnoser-加上記憶體的比較&#34;&gt;使用 MemoryDiagnoser 加上記憶體的比較&lt;/h2&gt;
&lt;p&gt;就像我們前面提到的：效能比較的時候，&lt;strong&gt;除了時間以外，也不能忘了空間&lt;/strong&gt;！也就是說，我們還必須考量到記憶體的用量才可以。&lt;/p&gt;
&lt;p&gt;我們在前一段知道了 &lt;code&gt;Enumerable.Empty&lt;/code&gt; 比 &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 快，但是記憶體的使用呢？現在就讓我們來確認一下吧。&lt;/p&gt;
&lt;p&gt;想要加上記憶體的測試，我們只需要在擂台的類別上，加上 &lt;code&gt;[MemoryDiagnoser]&lt;/code&gt; 就行啦：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 測試用擂台&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[MemoryDiagnoser]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmptyVSNewList&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Empty() =&amp;gt; Enumerable.Empty&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; NewList() =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著讓我們看看結果：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/D1hIAFl.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// * Summary *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BenchmarkDotNet=v0.13.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, OS=Windows &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;.18363.1556 (&lt;span style=&#34;color:#ae81ff&#34;&gt;1909&lt;/span&gt;/November2019Update/19H2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Intel Core i7-&lt;span style=&#34;color:#ae81ff&#34;&gt;7700&lt;/span&gt; CPU &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;.60GHz (Kaby Lake), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; CPU, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; logical and &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; physical cores
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.NET SDK=&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;.300
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#66d9ef&#34;&gt;Host&lt;/span&gt;]     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1&lt;/span&gt;.15 (CoreCLR &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21202&lt;/span&gt;, CoreFX &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21402&lt;/span&gt;), X64 RyuJIT  [&lt;span style=&#34;color:#66d9ef&#34;&gt;AttachedDebugger&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  DefaultJob &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1&lt;/span&gt;.15 (CoreCLR &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21202&lt;/span&gt;, CoreFX &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21402&lt;/span&gt;), X64 RyuJIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  Method |      Mean |     Error |    StdDev |    Median |  Gen &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; | Gen &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | Gen &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; | Allocated |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-------- |----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|-------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   Empty | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0028&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0048&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0040&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns |      - |     - |     - |         - |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| NewList | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8114&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0877&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1077&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8019&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0077&lt;/span&gt; |     - |     - |      &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; B |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以注意到，&lt;code&gt;Empty&lt;/code&gt; 根本沒有動用到記憶體，反而是 &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 占了一些空間，還觸發了 GC。&lt;/p&gt;
&lt;p&gt;由於 &lt;code&gt;Enumerable.Empty&lt;/code&gt; 在時間和空間都拿下了分數，因此這邊宣布：「在需要回傳空串列的場合，使用 &lt;code&gt;Enumerable.Empty&lt;/code&gt; 會比 &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 更好一些」－－&lt;strong&gt;正確&lt;/strong&gt;！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這邊補一下前面提到的 StackOverflow 回答：&lt;br/&gt;
&amp;ldquo;Even if you use an empty array or empty list, those are objects and they are stored in memory. The Garbage Collector has to take care of them.&amp;rdquo; &lt;br/&gt;
&amp;ldquo;Enumerable.Empty does not create an object per call thus putting less load on the GC.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;因此如果當你的查詢有需要返回空串列的時候（例如說搜尋條件沒有結果），試試看用 &lt;code&gt;Enumerable.Empty&lt;/code&gt; 吧！&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;使用-jobs-來指定測試環境&#34;&gt;使用 Jobs 來指定測試環境&lt;/h2&gt;
&lt;p&gt;現在我們已經考量了執行時間和記憶體，接下來要問的就是：&lt;strong&gt;那在不同的啟動環境之下會有差別嗎？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如說同樣的比較，在 .NET Core 跟 .NET framework 都成立嗎？不需要開好幾個專案來測，在 BenchmarkDotnet，我們可以用 &lt;code&gt;Jobs&lt;/code&gt; 來搞定。&lt;/p&gt;
&lt;p&gt;現在讓我們試試看在擂台上掛上對應 .NET Core 的 &lt;code&gt;[SimpleJob(RuntimeMoniker.NetCoreApp30)]&lt;/code&gt; 和 .NET Framework 4.7.2 的 &lt;code&gt;[SimpleJob(RuntimeMoniker.Net472)]&lt;/code&gt; 來試試吧：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 測試用擂台&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[MemoryDiagnoser]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[SimpleJob(RuntimeMoniker.Net472)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[SimpleJob(RuntimeMoniker.NetCoreApp30)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmptyVSNewList&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Empty() =&amp;gt; Enumerable.Empty&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; NewList() =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著我們要編輯專案檔，&lt;strong&gt;用多目標的方式把指定的框架加上去&lt;/strong&gt;，否則直接執行的話會跑出 &lt;code&gt;N/A&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TargetFrameworks&amp;gt;&lt;/span&gt;netcoreapp3.0;net472&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/TargetFrameworks&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PlatformTarget&amp;gt;&lt;/span&gt;AnyCPU&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PlatformTarget&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;小提示：專案檔就是 .csproj，除了直接開啟編輯外，也可以從 &lt;code&gt;方案總管 -&amp;gt; (對專案右鍵) -&amp;gt; 編輯專案檔&lt;/code&gt; 來開啟呦。&lt;/p&gt;
&lt;p&gt;此外，多目標的說明和加入方式，也可以參照 Gelis 技術隨筆 的這篇 &lt;a href=&#34;http://gelis-dotnet.blogspot.com/2019/12/targetframeworks-net72-netstandard21.html&#34;&gt;使用多目標 TargetFrameworks 來讓 net72 可參考 .netstandard2.1 通過編譯並可使用&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;以示範專案為例，加入後的 &lt;code&gt;csproj&lt;/code&gt; 檔案的 &lt;code&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; 可能會長得這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TargetFrameworks&amp;gt;&lt;/span&gt;netcoreapp3.0;net472&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/TargetFrameworks&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PlatformTarget&amp;gt;&lt;/span&gt;AnyCPU&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PlatformTarget&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;小提示：更改版本之後，如果編譯有發生遺失資源檔的錯誤，可以先卸載專案再重新載入試試呦。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;現在讓我們來執行一次試試吧：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/UqhTEPp.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// * Summary *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BenchmarkDotNet=v0.13.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, OS=Windows &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;.18363.1556 (&lt;span style=&#34;color:#ae81ff&#34;&gt;1909&lt;/span&gt;/November2019Update/19H2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Intel Core i7-&lt;span style=&#34;color:#ae81ff&#34;&gt;7700&lt;/span&gt; CPU &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;.60GHz (Kaby Lake), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; CPU, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; logical and &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; physical cores
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.NET SDK=&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;.300
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#66d9ef&#34;&gt;Host&lt;/span&gt;]               &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1&lt;/span&gt;.15 (CoreCLR &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21202&lt;/span&gt;, CoreFX &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21402&lt;/span&gt;), X64 RyuJIT  [&lt;span style=&#34;color:#66d9ef&#34;&gt;AttachedDebugger&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1&lt;/span&gt;.15 (CoreCLR &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21202&lt;/span&gt;, CoreFX &lt;span style=&#34;color:#ae81ff&#34;&gt;4.700&lt;/span&gt;.21.&lt;span style=&#34;color:#ae81ff&#34;&gt;21402&lt;/span&gt;), X64 RyuJIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .NET Framework &lt;span style=&#34;color:#ae81ff&#34;&gt;4.7&lt;/span&gt;.2 &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; .NET Framework &lt;span style=&#34;color:#ae81ff&#34;&gt;4.8&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4.8&lt;/span&gt;.4341.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), X64 RyuJIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  Method |                  Job |              Runtime |      Mean |     Error |    StdDev |    Median |  Gen &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; | Gen &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | Gen &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; | Allocated |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-------- |--------------------- |--------------------- |----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|-------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   Empty |        .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt; |        .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0563&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0310&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0583&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0370&lt;/span&gt; ns |      - |     - |     - |         - |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| NewList |        .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt; |        .NET Core &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.7849&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0734&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0686&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;3.7755&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0077&lt;/span&gt; |     - |     - |      &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; B |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   Empty | .NET Framework &lt;span style=&#34;color:#ae81ff&#34;&gt;4.7&lt;/span&gt;.2 | .NET Framework &lt;span style=&#34;color:#ae81ff&#34;&gt;4.7&lt;/span&gt;.2 | &lt;span style=&#34;color:#ae81ff&#34;&gt;2.4641&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0754&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0806&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;2.4815&lt;/span&gt; ns |      - |     - |     - |         - |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| NewList | .NET Framework &lt;span style=&#34;color:#ae81ff&#34;&gt;4.7&lt;/span&gt;.2 | .NET Framework &lt;span style=&#34;color:#ae81ff&#34;&gt;4.7&lt;/span&gt;.2 | &lt;span style=&#34;color:#ae81ff&#34;&gt;7.9914&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1877&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5139&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;7.8857&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0096&lt;/span&gt; |     - |     - |      &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; B |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到測試結果變成了兩組：&lt;strong&gt;在 &lt;code&gt;.NET Core 3.0&lt;/code&gt; 和 &lt;code&gt;.NET Framework 4.7.2&lt;/code&gt; 都進行了測試&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;現在我們知道不管是在 Core 還是 Framework，用 &lt;code&gt;Enumerable.Empty&lt;/code&gt; 來建立空串列都比 &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 快、也更省資源了。&lt;/p&gt;
&lt;h2 id=&#34;使用-exporters-來產生報表&#34;&gt;使用 Exporters 來產生報表&lt;/h2&gt;
&lt;p&gt;現在確定哪一組寫法效能比較好了。想要說服大大改用新寫法，怎麼辦呢？當然是 &lt;del&gt;自己偷偷改&lt;/del&gt; 要拿出證據說服大大啦！&lt;/p&gt;
&lt;p&gt;剛好，BenchmarkDotnet 也提供了產出報表的功能，並且可以輸出成 HTML、Markdown 等格式，只需要加上對應的屬性就可以囉，例如 &lt;strong&gt;&lt;code&gt;[HtmlExporter]&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;[CsvExporter]&lt;/code&gt;&lt;/strong&gt;，現在讓我們一股腦都丟上去看看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 測試用擂台&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HtmlExporter]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[AsciiDocExporter]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[CsvExporter]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[CsvMeasurementsExporter]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[PlainExporter]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[RPlotExporter]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[MemoryDiagnoser]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[SimpleJob(RuntimeMoniker.Net472)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[SimpleJob(RuntimeMoniker.NetCoreApp30)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmptyVSNewList&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Empty() =&amp;gt; Enumerable.Empty&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; NewList() =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Foo&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;當我們執行的時候，會存一份 Log 在 &lt;code&gt;.\BenchmarkDotNet.Artifacts&lt;/code&gt; 裡面&lt;/p&gt;
&lt;p&gt;而當我們有指定輸出報表，當執行完畢之後，報表就會產生在 Log 的 &lt;code&gt;result&lt;/code&gt;，也就是 &lt;code&gt;.\BenchmarkDotNet.Artifacts\results&lt;/code&gt; 裡面。&lt;/p&gt;
&lt;p&gt;以我的環境為例，就會產生在專案裡的 &lt;code&gt;\bin\Release\netcoreapp3.0\BenchmarkDotNet.Artifacts\results&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/O2VCMNC.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;其中每個格式的樣子會不太一樣（有點廢話），例如 HTML 的是長這樣：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/zCiQ5Js.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;而看起來最厲害的應該是用&lt;a href=&#34;https://www.r-project.org/&#34;&gt;Ｒ&lt;/a&gt;的，不過因為我沒有安裝Ｒ，這邊就請大家看一下官網的圖過過癮唄：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://benchmarkdotnet.org/images/v0.12.0/rplot.png&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;至於報表的詳細操作，大家可以官方介紹的 &lt;a href=&#34;https://benchmarkdotnet.org/articles/configs/exporters.html&#34;&gt;Exporters&lt;/a&gt; 頁面。&lt;/p&gt;
&lt;p&gt;不過我是覺得大多數的場合，光是能拿出執行時間和記憶體用量的比較就已經很有說服力了啦 XD&lt;/p&gt;
&lt;h2 id=&#34;用-params-來指定數值&#34;&gt;用 Params 來指定數值&lt;/h2&gt;
&lt;p&gt;最後補充一下：有時候我們測試的對象，可能也會受到內容物的影響。&lt;/p&gt;
&lt;p&gt;例如一些純計算的方法，可能就會受到數值大小的影響，這時候我們就可以&lt;strong&gt;使用 &lt;code&gt;Params&lt;/code&gt; 的屬性來指定數值&lt;/strong&gt;，並觀察不同狀況下的表現。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParamsTest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Params(10, 10000)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; A { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Params(2, 20000)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; B { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Cul() =&amp;gt; A * B;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣跑出來的結果就會按照指定的數值分組囉：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| Method |     A |     B |      Mean |     Error |    StdDev | Median |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|------- |------ |------ |----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|----------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|-------&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|    Cul |    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; |     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|    Cul |    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0000&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|    Cul | &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; |     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0071&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0146&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0200&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|    Cul | &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0008&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0015&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0023&lt;/span&gt; ns | &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt; ns |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想要把指定的數值另外拉出來做成串列，比較好維護和測試的話，也可以&lt;strong&gt;用 &lt;code&gt;ParamsSource&lt;/code&gt; 來指定數值的來源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如上面的例子，也可以改寫成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParamsTest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; SourceA =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; [] { &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; SourceB =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; [] {  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [ParamsSource(nameof(SourceA))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; A { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [ParamsSource(nameof(SourceB))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; B { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [Benchmark]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Cul() =&amp;gt; A * B;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果會是一樣的，而且也比較好管理。&lt;/p&gt;
&lt;h2 id=&#34;結語與參考資料&#34;&gt;結語與參考資料&lt;/h2&gt;
&lt;p&gt;我們的 &lt;code&gt;Enumerable.Empty&lt;/code&gt; vs &lt;code&gt;new List&amp;lt;&amp;gt;&lt;/code&gt; 對決也告一段落了。&lt;/p&gt;
&lt;p&gt;當然，BenchmarkDotNet 能做到的事還有很多，例如 &lt;a href=&#34;https://benchmarkdotnet.org/articles/configs/filters.html&#34;&gt;用 Filter 來篩選指定的測試案例&lt;/a&gt;、&lt;a href=&#34;https://benchmarkdotnet.org/articles/features/baselines.html&#34;&gt;把某個測試案例作為基準案例&lt;/a&gt; 等等進階用法，還有更多的 &lt;a href=&#34;https://benchmarkdotnet.org/articles/features/statistics.html&#34;&gt;統計資訊&lt;/a&gt;。但目前還沒有接觸到，這邊就先不提了，有需要的朋友再翻一下參考資料唄。&lt;/p&gt;
&lt;p&gt;這篇文章主要參考自同事提供的範例說明，以及網路大大們的介紹文。特此感謝：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marcus116.blogspot.com/2019/03/netcore-net-benchmarkdotnet.html&#34;&gt;使用 BenchmarkDotNet 測試程式碼效能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.kkbruce.net/2017/01/donot-use-for-use-benchmark-dotnet.html#.YIFD8qziuUl&#34;&gt;還在徒手揮汗寫For測效能，閃開讓BenchmarkDotNet來&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotnetcoretutorials.com/2017/12/04/benchmarking-net-core-code-benchmarkdotnet/&#34;&gt;Benchmarking Your .NET Core Code With BenchmarkDotNet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還有相當完善的官方文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://benchmarkdotnet.org/articles/guides/getting-started.html&#34;&gt;Getting started - benchmarkdotnet.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後，每當你想要問「甘安捏」的時候：&lt;/p&gt;
&lt;p&gt;

&lt;img
  src=&#34;https://image.igouist.net/VpNXLeM.webp&#34;style=&#34;ZgotmplZ&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用 BenchmarkDotnet 跑一遍就對啦！&lt;/strong&gt; 都給我戰起來！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swagger on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/tags/swagger/</link>
    <description>Recent content in Swagger on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <managingEditor>Igouist (Igouist)</managingEditor>
    <webMaster>Igouist (Igouist)</webMaster>
    <follow_challenge>
      <feedId>56200764111934464</feedId>
      <userId>41821085092905984</userId>
    </follow_challenge>
    <lastBuildDate>Sun, 16 May 2021 22:42:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/tags/swagger/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>菜雞新訓記 (4): 使用 Swagger 來自動產生可互動的 API 文件吧</title>
      <link>https://igouist.github.io/post/2021/05/newbie-4-swagger/</link>
      <pubDate>Sun, 16 May 2021 22:42:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2021/05/newbie-4-swagger/</guid>
      <description>&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/lzjNys4.webp&#34; alt=&#34;img&#34;width=&#34;850&#34; height=&#34;315&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這是俺整理公司新訓內容的第四篇文章，目標是&lt;strong&gt;簡單地使用 Swagger 工具來自動產生可互動的 API 文件&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;api-文件與-swagger&#34;&gt;API 文件與 Swagger&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper&#34;&gt;上一篇&lt;/a&gt; 我們建立了一個有簡單的 CRUD 的 Web API 服務，這篇我們就接續著 API 服務往下看吧！&lt;/p&gt;
&lt;p&gt;之前我們介紹 API 的時候有提過：API 是為了讓兩個服務之間可以溝通、互動所產生的接口。而所有的溝通要有效，都一定要先有共識，隨著溝通的人數越來越多，或是內容的理解要越來越細，就會用文件或契約的方式來達成共識。&lt;/p&gt;
&lt;p&gt;回到我們的 API 服務開發來說，就是你除了把服務生出來了，可以跑了以外，還有一個重要的點是：&lt;strong&gt;必須讓所有的使用者（包含幾個月後的你自己）知道怎麼使用這組 API 服務&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也就來說，就是要寫 &lt;strong&gt;API 規格文件&lt;/strong&gt; 啦！&lt;/p&gt;
&lt;p&gt;為了能讓服務對接順利，以及省下大部份口沫橫飛解釋的時間，甚至是讓自己和使用者好幾個月之後能夠順利回想起來，我們在開發 API 的時候一定會列出 API 接口的規格和用法。&lt;/p&gt;
&lt;p&gt;通常一份文件的內容包括但不限於：&lt;strong&gt;用途、路由、參數、回傳值&lt;/strong&gt;等等，更細部的會有例如參數放在 Route, QueryString 還是 Body、參數是否必填、回傳的 JSON 範例等等。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## GET /card/{id}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;**查詢指定編號的卡片**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;### Parameter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;-&lt;/span&gt; Route
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`id (int, required)`&lt;/span&gt; 卡片編號
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example: https://exampleProjN.com/api/card/1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;### Response
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;200: 回傳對應的卡片
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;id&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;name&amp;#34;: &amp;#34;string&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;description&amp;#34;: &amp;#34;string&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;attack&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;health&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;cost&amp;#34;: 0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;404: 找不到
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;當然這邊已經把例子簡化很多了，實際上的 API 文件格式會隨著各地的團隊習慣而改變，用表格和 PDF 等等的狀況也很常見。&lt;/p&gt;
&lt;p&gt;對 API 規格都長怎樣有興趣的朋友，也可以直接在網路上找找一些公開的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.pixnet.pro/#!/doc/pixnetApi/glossaryArea&#34;&gt;痞客幫 API 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.91app.com/developers#api-doc&#34;&gt;91 APP 的開發文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://agridata.coa.gov.tw/apidocs.aspx&#34;&gt;農業資料開放平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opendata.judicial.gov.tw/news/detail?newsId=3032&#34;&gt;司法院資料開放平台&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不過寫文件畢竟是能登上靠北榜的工作內容之一（靠北榜還包括其他人不寫文件、寫註解、其他人不寫註解等），同時，每次 API 有變動還要一直去維護文件真的很麻煩，所以…&lt;/p&gt;
&lt;p&gt;我們工程師的美德，就是懶惰！ API 文件什麼的，當然是要用自動產生的啦～&lt;/p&gt;
&lt;p&gt;今天要介紹的 &lt;strong&gt;Swagger 工具就是幫助我們來自動產生 API 規格文件的好幫手&lt;/strong&gt;，接下來就先讓我們稍微認識一下 Swagger 吧！&lt;/p&gt;
&lt;p&gt;Swagger 是一套 API 互動文件產生器，主要是讓人跟電腦都能夠理解 API 的功能和內容，而不需要閱讀程式碼。因為 Swagger 已經在 2015 捐贈給 OpenAPI，所以也會看到有人用 OpenAPI 來稱呼它。更精準的說，OpenAPI 是一種規格、一種表達方式，Swagger 則是使用 OpenAPI 的工具。&lt;/p&gt;
&lt;p&gt;想知道 Swagger 工具的 API 文件長怎樣的朋友，可以到這些地方逛逛按按：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://petstore.swagger.io/&#34;&gt;Swagger 提供的 Demo 網頁（petstore.swagger.io）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tdx.transportdata.tw/api-service/swagger/basic/2998e851-81d0-40f5-b26d-77e2f5ac4118#/&#34;&gt;公車動態的運輸資料服務 TDX (Transport Data eXchange)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作上挺直覺的，而且我們前面提到的「用途、路由、參數、回傳」等等 API 資訊都清楚明瞭的顯示，甚至還可以戳一戳，直接呼叫 API 來動手試試。更重要的是：這些都是&lt;strong&gt;自動產生&lt;/strong&gt;的！所以說，Swagger，好！&lt;/p&gt;
&lt;p&gt;也因為 Swagger 是一種工具，所以大多主流語言都會有支援 Swagger 的工具包，例如 Golang 的 swag 和 go-swagger。&lt;/p&gt;
&lt;p&gt;在 Dotnet 陣營裡面，作為代表的則是 &lt;a href=&#34;https://github.com/domaindrivendev/Swashbuckle.AspNetCore&#34;&gt;Swashbuckle&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/RicoSuter/NSwag&#34;&gt;NSwag&lt;/a&gt;。由於工作團隊採用前者，故本篇將會以 &lt;strong&gt;Swashbuckle&lt;/strong&gt; 來逐步實作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;對 NSwag 有興趣，或是工作要求採用的朋友。可以參閱以下資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10242295&#34;&gt;使用Swagger自動建立清晰明瞭的REST API文件 - 我與 ASP.NET Core 的 30天&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微軟文件的 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-5.0&amp;amp;tabs=visual-studio&#34;&gt;NSwag 與 ASP.NET Core 使用者入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;安裝-swashbuckle-及啟用-swagger&#34;&gt;安裝 Swashbuckle 及啟用 Swagger&lt;/h2&gt;
&lt;p&gt;現在讓我們把鏡頭回到我們在&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper&#34;&gt;上一篇&lt;/a&gt;裡使用 .net Core 預設的 Web API 範本建立的簡易 CRUD 服務。&lt;/p&gt;
&lt;p&gt;首先，直奔 Nuget、搜尋 Swashbuckle，應該可以看到一整排：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/9vn5HUG.webp&#34;width=&#34;1013&#34; height=&#34;598&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;我們這個示範專案的環境是 .net Core，所以我們選擇 &lt;strong&gt;&lt;code&gt;Swashbuckle.AspNetCore&lt;/code&gt;&lt;/strong&gt;，安裝了懶人包，就等於裝好了 Swashbuckle 家的 OpenAPI 三劍客 Swagger、SwaggerGen、SwaggerUI，之後的文件產生和進階操作也就不用煩惱了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;環境不是 .net Core 的 Asp.net Web API 朋友，請安裝 &lt;code&gt;Swashbuckle&lt;/code&gt;，不過整體操作和顯示上並不會相差太多。&lt;/p&gt;
&lt;p&gt;此外，在安裝和操作上也可以參照 mrkt 大大的 Swagger 相關文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/12/aspnet-web-api-swagger.html&#34;&gt;ASP.NET Web API 文件產生器 - 使用 Swagger - mrkt 的程式學習筆記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/12/swashbuckle-swagger-for-web-api.html&#34;&gt;Swashbuckle - Swagger for Web Api 顯示內容的調整 - mrkt 的程式學習筆記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/En0Aarn.webp&#34;width=&#34;608&#34; height=&#34;603&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;安裝完成之後，就讓我們來註冊 Swagger 服務吧！&lt;/p&gt;
&lt;p&gt;首先讓我們到 &lt;code&gt;Startup.cs&lt;/code&gt; 的 &lt;code&gt;ConfigureServices&lt;/code&gt;，加上 &lt;code&gt;services.AddSwaggerGen();&lt;/code&gt; 把 Swagger 的服務掛上去：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This method gets called by the runtime.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Use this method to add services to the container.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ConfigureServices(IServiceCollection services)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    services.AddControllers();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    services.AddSwaggerGen(); &lt;span style=&#34;color:#75715e&#34;&gt;// 註冊 Swagger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接著往下看，到 &lt;code&gt;Configure&lt;/code&gt; 把 Swagger 服務打開，我們需要加上 &lt;code&gt;UseSwagger&lt;/code&gt; 讓它能夠用 middleware 產生 API 文件的 JSON，並用 &lt;code&gt;UseSwaggerUI&lt;/code&gt; 指定 JSON 檔案來產生 API 文件的 UI 頁面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app.UseSwagger();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app.UseSwaggerUI(c =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.SwaggerEndpoint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/swagger/v1/swagger.json&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My API V1&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就啟用了 Swagger 的服務了。&lt;/p&gt;
&lt;p&gt;現在讓我們執行偵錯，&lt;strong&gt;並且到專案目錄底下的 &lt;code&gt;/swagger&lt;/code&gt; 路徑&lt;/strong&gt;（以我為例就是 &lt;code&gt;localhost:44304/swagger&lt;/code&gt;），應該就能看到 Swagger 工具的介面啦！&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/odrQ5IO.webp&#34;width=&#34;872&#34; height=&#34;601&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;並且在上面可以注意到我們&lt;strong&gt;自動生成的 API JSON 文件，也就是前面註冊時看過的 &lt;code&gt;/swagger/v1/swagger.json&lt;/code&gt;&lt;/strong&gt;（以我為例就是 &lt;code&gt;localhost:44304/swagger/v1/swagger.json&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/HysAWQu.webp&#34;width=&#34;871&#34; height=&#34;871&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這邊大致上就可以了解到，&lt;strong&gt;Swagger 工具就是藉由去掃我們的 &lt;code&gt;ApiController&lt;/code&gt;，產生出對應的 API 規格的 JSON 檔案，再讀取這個 JSON 檔案來產生出 Swagger 的 UI 頁面&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：這邊也可以對 Swagger 的 UI 路徑進行設定，不一定要在 &lt;code&gt;/swagger&lt;/code&gt; 底下。只需要在 &lt;code&gt;UseSwaggerUI&lt;/code&gt; 中使用 &lt;code&gt;RoutePrefix&lt;/code&gt; 就可以指定 Swagger UI 的 Route。&lt;/p&gt;
&lt;p&gt;例如說我想要一進來我們服務的網址，就直接顯示 Swagger 畫面，像是 &lt;code&gt;myapi.com&lt;/code&gt; 就顯示 Swagger UI 而非 &lt;code&gt;myapi.com/swagger&lt;/code&gt; 的時候，就可以這樣設定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app.UseSwaggerUI(c =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   c.SwaggerEndpoint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/swagger/v1/swagger.json&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My API V1&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   c.RoutePrefix = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty; &lt;span style=&#34;color:#75715e&#34;&gt;// 指定路徑為 &amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣就會直接在指定的路徑顯示 Swagger UI 囉！&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：如果有在 &lt;code&gt;Properties/launchSettings.json&lt;/code&gt; 設定偵錯時的起始頁面的朋友，也可以試試&lt;strong&gt;把起始頁面 &lt;code&gt;launchUrl&lt;/code&gt; 設定成 Swagger UI 的路徑&lt;/strong&gt;，例如 &lt;code&gt;&amp;quot;launchUrl&amp;quot;: &amp;quot;swagger&amp;quot;&lt;/code&gt;，平常測試的時候會順手很多，推薦給大家&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;接著讓我們用 Swagger UI 來測試一下 API 吧，首先讓我們新增一張卡片，選擇新增卡片的 API 並試試 &lt;code&gt;Try it out&lt;/code&gt;，可以看到範例和輸入 Body 的區塊：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/8ruN7w9.webp&#34;width=&#34;911&#34; height=&#34;752&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;執行之後下方就會告訴我們執行結果和回傳：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/UUm4v20.webp&#34;width=&#34;877&#34; height=&#34;790&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;接著試試用 Swagger UI 來 GET 看看是不是真的有新增成功：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/I5eAVZm.webp&#34;width=&#34;909&#34; height=&#34;835&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;確認 Swagger UI 的確和我們的 CardController 銜接在一起了，啟用服務成功！&lt;/p&gt;
&lt;h2 id=&#34;使用-swaggerdoc-增加專案描述&#34;&gt;使用 SwaggerDoc 增加專案描述&lt;/h2&gt;
&lt;p&gt;不過現在只是一個可以互動的操作介面而已，離可以取代文件還有一段距離，接著就讓我們一步一步來增加資訊到這個 UI 介面吧。&lt;/p&gt;
&lt;p&gt;首先讓我們回到 &lt;code&gt;ConfigureServices&lt;/code&gt;，修改一下 &lt;code&gt;AddSwaggerGen&lt;/code&gt;，讓我們可以丟東西進去，這邊就直接用微軟文件的範例來稍作修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services.AddSwaggerGen(c =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// API 服務簡介&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.SwaggerDoc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenApiInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Version = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;菜雞 API&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;菜雞新訓記的範例 API&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TermsOfService = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://igouist.github.io/&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Contact = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenApiContact
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Igouist&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Email = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Url = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://igouist.github.io/about/&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        License = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenApiLicense
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TEST&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Url = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://igouist.github.io/about/&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這邊可以填入版本、API 名稱和說明、聯絡方式等資訊，這些資訊會顯示在 Swagger UI 的開頭：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/9v4DssU.webp&#34;width=&#34;501&#34; height=&#34;292&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;替自己的服務加上說明是絕對必要的，不過平時會比較常用的也是 &lt;code&gt;Title&lt;/code&gt;、&lt;code&gt;Description&lt;/code&gt; 這些基本欄位，各位再按照自己的服務調整吧。&lt;/p&gt;
&lt;h2 id=&#34;使用-xml-文件和-includexmlcomments-從註解產生-api-說明&#34;&gt;使用 XML 文件和 IncludeXmlComments 從註解產生 API 說明&lt;/h2&gt;
&lt;p&gt;我們有了整個服務的說明之後，當然也要替每一支 API 補上說明啦！&lt;/p&gt;
&lt;p&gt;這邊我們可以採用&lt;strong&gt;產生 XML 檔案的方式來讓 Swagger 取得每支 API 在 Function 上的註解&lt;/strong&gt;，這樣就能自動產生 API 的說明了。&lt;/p&gt;
&lt;p&gt;首先就是要打開 XML 文件，先讓我們從 &lt;code&gt;方案總管&lt;/code&gt; 對我們的專案 &lt;code&gt;右鍵&lt;/code&gt;，選擇 &lt;code&gt;屬性&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/Iol6yxX.webp&#34;width=&#34;391&#34; height=&#34;931&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;進入屬性頁之後，&lt;strong&gt;到 &lt;code&gt;建置&lt;/code&gt;，找到 &lt;code&gt;XML 文件檔案&lt;/code&gt; 並勾選起來&lt;/strong&gt;，通常會自動幫你填入路徑：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/qWU9iJP.webp&#34;width=&#34;1107&#34; height=&#34;792&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：並非使用 Visual Studio 開發的朋友，也可以參考微軟文件的開啟方式：打開 &lt;code&gt;.csproj&lt;/code&gt; 檔案，並找到 &lt;code&gt;PropertyGroup&lt;/code&gt; 加上 &lt;code&gt;GenerateDocumentationFile&lt;/code&gt; ，並設為 true，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;GenerateDocumentationFile&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/GenerateDocumentationFile&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：如果開啟 XML 文件檔案的選項後，建置或偵錯時跳出找不到 XML 檔案的錯誤，可能是生成失敗，可以嘗試改用系統管理員開啟 Visual Studio 再重新建置。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;完成並儲存之後，讓我們&lt;strong&gt;回到 &lt;code&gt;ConfigureServices&lt;/code&gt; 的 &lt;code&gt;AddSwaggerGen&lt;/code&gt; 部分，把讀取 XML 的命令也加進去&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; xmlFile = &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{Assembly.GetExecutingAssembly().GetName().Name}.xml&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c.IncludeXmlComments(xmlPath);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果在上一個步驟有加入專案描述，現在的 &lt;code&gt;AddSwaggerGen&lt;/code&gt; 可能會長這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services.AddSwaggerGen(c =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// API 服務簡介&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.SwaggerDoc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenApiInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Version = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;菜雞 API&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;菜雞新訓記的範例 API&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TermsOfService = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://igouist.github.io/&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Contact = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OpenApiContact
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Igouist&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Email = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Url = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://igouist.github.io/about/&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 讀取 XML 檔案產生 API 說明&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; xmlFile = &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{Assembly.GetExecutingAssembly().GetName().Name}.xml&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.IncludeXmlComments(xmlPath);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;小提示：這邊的 &lt;code&gt;xmlFile&lt;/code&gt; 路徑是對照前面步驟 專案屬性中的 XML 產生路徑，並用反射的方式去符合自動產生路徑的規則拿到 XML 檔案。&lt;/p&gt;
&lt;p&gt;如果在前面的步驟有自己指定 XML 檔案產生路徑的朋友，這邊的 &lt;code&gt;xmlFile&lt;/code&gt; 也要記得和 XML 檔案路徑對應上呦。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;最後也是最重要的一步：&lt;strong&gt;確保你的 ApiController 底下的各 API 有乖乖加上註解&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/yVQQIln.webp&#34;width=&#34;916&#34; height=&#34;776&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小提示：搭配 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sergeb.GhostDoc&#34;&gt;GhostDoc&lt;/a&gt; 自動產生註解，又快又香！用過就回不去了。&lt;/p&gt;
&lt;p&gt;相關的說明可以參見：&lt;a href=&#34;https://dotblogs.com.tw/wasichris/2016/01/21/172429&#34;&gt;使用 GhostDoc 自動產出符合語意的註解 - 搞搞就懂&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;確定 &lt;strong&gt;對專案開啟產生 XML、讓 Swagger 讀取 XML、乖乖寫註解&lt;/strong&gt; 三個步驟都有完成之後，就可以開啟 Swagger UI 來看看啦！&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/quHdcGV.webp&#34;width=&#34;392&#34; height=&#34;353&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;可以看到每支 API 都有顯示註解的名稱了，讓我們跟沒有的時候比對一下：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/TsroNer.webp&#34;width=&#34;439&#34; height=&#34;343&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;是不是貼心多了呢？&lt;/p&gt;
&lt;p&gt;並且如果對參數、傳入和傳出的 Model 都有確實加上註解的話，在 API 的內容頁面就可以直接看到 QueryString 的參數，並且對 Model 點選 Schema 也會顯示 Model 的說明：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/pI9OJQD.webp&#34;width=&#34;613&#34; height=&#34;888&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/kPQRL9m.webp&#34;width=&#34;623&#34; height=&#34;714&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;如此一來參數和回傳，從名稱、說明、型別和範例都有了，這樣才有 API 文件的感覺嘛！&lt;/p&gt;
&lt;p&gt;除了基本的 &lt;code&gt;summary&lt;/code&gt; 用來標示 API 的用途、&lt;code&gt;param&lt;/code&gt; 用來標記參數名稱之外，比較特別的就是可以加上 &lt;code&gt;remarks&lt;/code&gt; 來替 API 做更詳細的說明，例如：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/E79TDpY.webp&#34;width=&#34;481&#34; height=&#34;290&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這樣就會顯示在 Swagger UI 上該 API 點開的內文中：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/ZFDLWsv.webp&#34;width=&#34;388&#34; height=&#34;352&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;很適合用來進行更詳細的說明和備註。&lt;/p&gt;
&lt;p&gt;通常我們做到這裡就差不多了已經具備 API 文件該有的部分了，不過資訊當然是多多益善嘛，接著就讓我們來補充一些小東西上去吧～&lt;/p&gt;
&lt;h2 id=&#34;使用-produces-屬性和-response-註解補充回傳資訊&#34;&gt;使用 Produces 屬性和 response 註解補充回傳資訊&lt;/h2&gt;
&lt;p&gt;我們在 &lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi&#34;&gt;API 的介紹&lt;/a&gt; 有提到：API 的回傳有許多格式，例如最常見的 JSON、XML，或者是純文字和檔案等等。&lt;/p&gt;
&lt;p&gt;同時，我們也提過 API 可能會根據不同狀況，也會有不同的 HTTP Status 回應，例如 404: 找不到。但讓我們確認一下我們現在的文件…&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/IhWDMBe.webp&#34;width=&#34;649&#34; height=&#34;464&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;看起來預設的 Media type 並沒有作用，並且也只有 200 成功時的狀況。現在就讓我們來補充一下吧！&lt;/p&gt;
&lt;p&gt;在目標的 Api 方法上加上 &lt;code&gt;[Produces(&amp;quot;application/json&amp;quot;)]&lt;/code&gt; 就可以標示該方法的回傳格式為 &lt;code&gt;application/json&lt;/code&gt;，例如：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/9S1o9sH.webp&#34;width=&#34;595&#34; height=&#34;326&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這樣在 Swagger UI 上該 API 的 Responses 就會標記為指定的格式：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/OjRt09o.webp&#34;width=&#34;464&#34; height=&#34;320&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;接著，讓我們用 &lt;code&gt;ProducesResponseType&lt;/code&gt; 來指定回傳時的型別，以及在註解中使用 &lt;code&gt;&amp;lt;response&amp;gt;&lt;/code&gt; 標籤來替回傳時的 HTTP Status 加上說明吧：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 查詢卡片&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;remarks&amp;gt;我是附加說明&amp;lt;/remarks&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;id&amp;#34;&amp;gt;卡片編號&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;response code=&amp;#34;200&amp;#34;&amp;gt;回傳對應的卡片&amp;lt;/response&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;response code=&amp;#34;404&amp;#34;&amp;gt;找不到該編號的卡片&amp;lt;/response&amp;gt;          &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[HttpGet]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Produces(&amp;#34;application/json&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ProducesResponseType(typeof(Card), 200)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Route(&amp;#34;{id}&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Card Get([FromRoute] &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;._cardRepository.Get(id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (result &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Response.StatusCode = &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/I90gVGu.webp&#34;width=&#34;696&#34; height=&#34;687&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這樣做的 Swagger UI 就會多出這些 HTTP Status 對應的資訊囉：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/owvkBq4.webp&#34;width=&#34;542&#34; height=&#34;605&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;到這邊我們就提供了各種情況對應的回傳啦，隔壁同事如果問你說「為啥我打是回 400 啊？」就可以對他說「&lt;a href=&#34;https://www.urbandictionary.com/define.php?term=RTFW&#34;&gt;RTFW&lt;/a&gt;！」&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2021.07.03 補充：&lt;/p&gt;
&lt;p&gt;我們可以在方法上加上 &lt;strong&gt;&lt;code&gt;[Obsolete]&lt;/code&gt;&lt;/strong&gt; 的已過時屬性，這樣 Swagger 也會用刪除線或反灰的方式告訴使用者該方法已經要被淘汰囉。&lt;/p&gt;
&lt;p&gt;在敝司這次的專案重構，進行 API 接口的翻新和淘汰時，就使用了 &lt;code&gt;[Obsolete]&lt;/code&gt; 來進行標記那些被淘汰的方法和可改用的新方法，挺方便的。&lt;/p&gt;
&lt;p&gt;關於 &lt;code&gt;[Obsolete]&lt;/code&gt;，可以參見 m@rcus 學習筆記的這篇：&lt;a href=&#34;https://marcus116.blogspot.com/2019/10/csharper-method-obsolete.html&#34;&gt;設定方法 (Method) 已過時 - Obsolete&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;
&lt;p&gt;這篇記錄了 Swagger 自動產生 API 規格文件的作法，從 API 的路由、說明、參數、Model 跟回傳值全方位說明，還可以試打 API，可以說是&lt;strong&gt;完美提供健全的 API 環境&lt;/strong&gt;啦。&lt;/p&gt;
&lt;p&gt;阿彌陀佛阿彌陀佛，所謂寫一篇文件勝造七級浮屠，這個 Swagger 開下去，還不飛昇當神去了。正是：API 文件寫得好，同事溝通沒煩惱；Swagger 用得好，生文件只要一秒。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/THIt8EI.webp&#34;width=&#34;687&#34; height=&#34;500&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;那麼今天就記錄到這邊，最後就快速整理一下：&lt;/p&gt;
&lt;p&gt;－ 關於 Swagger －&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為了提升溝通的效率、確保將來能記得用法，因此我們要寫 API 規格文件&lt;/li&gt;
&lt;li&gt;為了提升寫文件的效率（和懶惰），因此我們可以嘗試自動產生 API 規格文件&lt;/li&gt;
&lt;li&gt;Swagger（OpenAPI），是一套 API 互動文件產生器，是幫助我們來自動產生 API 規格文件和測試的好幫手
&lt;ul&gt;
&lt;li&gt;在 Dotnet 陣營裡以 Swashbuckle 和 NSwag 最常見&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;－ 關於 Swashbuckle －&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 NuGet 安裝 &lt;code&gt;Swashbuckle.Core&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Startup.cs&lt;/code&gt; 的 &lt;code&gt;ConfigureServices&lt;/code&gt; 加上 &lt;code&gt;services.AddSwaggerGen();&lt;/code&gt; 註冊服務&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Startup.cs&lt;/code&gt; 的 &lt;code&gt;Configure&lt;/code&gt; 加上 &lt;code&gt;UseSwagger&lt;/code&gt; 產生 API 文件的 JSON&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Startup.cs&lt;/code&gt; 的 &lt;code&gt;Configure&lt;/code&gt; 加上 &lt;code&gt;UseSwaggerUI&lt;/code&gt; 來使用 JSON 產生 API 文件的 UI 頁面&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;AddSwaggerGen&lt;/code&gt; 中，使用 &lt;code&gt;SwaggerDoc&lt;/code&gt; 和 &lt;code&gt;OpenApiInfo&lt;/code&gt; 加上服務描述&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;AddSwaggerGen&lt;/code&gt; 中，使用 &lt;code&gt;IncludeXmlComments&lt;/code&gt; 讀取 XML 註解並產生 API 描述（需要先對專案開啟產生 XML 檔案）
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;ApiController&lt;/code&gt; 的各個 API 接口加上 XML 註解，最常見的有
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;summary&lt;/code&gt; 用來標示 API 描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;param&lt;/code&gt; 用來標示參數描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remarks&lt;/code&gt; 用來標示 API 服務的說明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response&lt;/code&gt; 用來標示回傳的狀態碼說明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 API 接口上加上 &lt;code&gt;[Obsolete]&lt;/code&gt; 標示已過時&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;ApiController&lt;/code&gt; 的各個 API 接口加上 &lt;code&gt;[Produces]&lt;/code&gt; 來標記回傳格式&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;ApiController&lt;/code&gt; 的各個 API 接口加上 &lt;code&gt;[ProducesResponseType]&lt;/code&gt; 來標記回傳狀態對應的型別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天的紀錄就到這邊，之後如果還有發現什麼小技巧再回來補充，也歡迎幫忙告訴我還能怎麼使用。&lt;/p&gt;
&lt;p&gt;那麼，我們下次見～&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本系列下一篇：&lt;a href=&#34;https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture&#34;&gt;菜雞新訓記 (5): 使用 三層式架構 來切分服務的關注點和職責吧&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;相關文章&#34;&gt;相關文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/10/swagger-enable-authorize/&#34;&gt;在 Swagger UI 加上驗證按鈕，讓 Request Header 傳遞 Authorize Token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-5.0&amp;amp;tabs=visual-studio&#34;&gt;Swashbuckle 與 ASP.NET Core 使用者入門 | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C%E4%BD%BF%E7%94%A8dapperswaggerpostman-2/&#34;&gt;dotnet Core WebApi實作(使用Dapper、Swagger、Postman)-2 (sunnyday0932.github.io)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/12/aspnet-web-api-swagger.html&#34;&gt;mrkt 的程式學習筆記: ASP.NET Web API 文件產生器 - 使用 Swagger (kevintsengtw.blogspot.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/12/swashbuckle-swagger-for-web-api.html&#34;&gt;mrkt 的程式學習筆記: Swashbuckle - Swagger for Web Api 顯示內容的調整 (kevintsengtw.blogspot.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.darkthread.net/blog/swagger-notes-1/&#34;&gt;Swagger 初試筆記-黑暗執行緒 (darkthread.net)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10242295&#34;&gt;使用 Swagger 自動建立清晰明瞭的 REST API文件 - 我與 ASP.NET Core 的 30天 - iT 邦幫忙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10195190&#34;&gt;ASP.NET Core 2 系列 - Web API 文件產生器 (Swagger)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10230804&#34;&gt;原來後端要知道 - 如何寫 API 文件？ - iT 邦幫忙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yunchenli.medium.com/%E4%BD%BF%E7%94%A8swagger%E8%87%AA%E5%8B%95%E7%94%A2%E7%94%9Fapi%E6%96%87%E4%BB%B6-a8f5c65d267c&#34;&gt;使用 Swagger 自動產生 API 文件 | by 11 | Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本系列文章&#34;&gt;本系列文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-0-menu&#34;&gt;菜雞新訓記 (0): 目錄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git&#34;&gt;菜雞新訓記 (1): 使用 Git 來進行版本控制吧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi&#34;&gt;菜雞新訓記 (2): 認識 Api &amp;amp; 使用 .net Core 來建立簡單的 Web Api 服務吧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper&#34;&gt;菜雞新訓記 (3): 使用 Dapper 來連線到資料庫 CRUD 吧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger&#34;&gt;菜雞新訓記 (4): 使用 Swagger 來自動產生可互動的 API 文件吧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture&#34;&gt;菜雞新訓記 (5): 使用 三層式架構 來切分服務的關注點和職責吧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/11/newbie-6-dependency-injection&#34;&gt;菜雞新訓記 (6): 使用 依賴注入 (Dependency Injection) 來解除強耦合吧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2022/03/newbie-7-fluent-validation&#34;&gt;菜雞新訓記 (7): 使用 FluentValidation 來驗證傳入參數吧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IDE on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/tags/ide/</link>
    <description>Recent content in IDE on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <managingEditor>Igouist (Igouist)</managingEditor>
    <webMaster>Igouist (Igouist)</webMaster>
    <follow_challenge>
      <feedId>56200764111934464</feedId>
      <userId>41821085092905984</userId>
    </follow_challenge>
    <lastBuildDate>Sun, 12 Jan 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/tags/ide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WakaTime: 隱藏敏感資訊、開啟離線暫存、卡在 Initialized 時的參考解法</title>
      <link>https://igouist.github.io/post/2025/01/wakatime-hide-project-name-and-offline-and-initialized/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2025/01/wakatime-hide-project-name-and-offline-and-initialized/</guid>
      <description>&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/5UBS6ab.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;WakaTime 是一款紀錄 Coding 時間的好用工具，只要安裝 IDE 的擴充套件，就可以輕鬆地記錄各個語言、編輯器、專案所用的時間。我從 2020 年寫了篇 &lt;a href=&#34;https://igouist.github.io/post/2020/06/wakatime/&#34;&gt;WakaTime 介紹文章&lt;/a&gt; 開始，也一路用到現在 2025 了，已經習慣動不動上去看兩眼的生活。&lt;/p&gt;
&lt;p&gt;但在相對封閉的一些環境進行開發時，我們可能需要先對 WakaTime 調整一些設定才能用得安心，這篇筆記就分享一下最近遇到的三個場景，供有興趣的朋友參考參考。&lt;/p&gt;
&lt;h2 id=&#34;在-wakatime-隱藏敏感資訊檔案名稱專案名稱&#34;&gt;在 WakaTime 隱藏敏感資訊（檔案名稱、專案名稱…）&lt;/h2&gt;
&lt;p&gt;Wakatime 除了會記錄使用的程式語言和 IDE 等工具以外，也會紀錄專案、檔案路徑等等。但有時候我們可能並不希望記錄這些資訊（像是業主委託的專案名稱有點敏感啦、路徑可能有個人姓名之類的），這時就需要調整 Wakatime 的 Config，來把相關的資訊隱藏起來。&lt;/p&gt;
&lt;p&gt;Wakatime 的設定會放在 &lt;code&gt;.wakatime.cfg&lt;/code&gt; &lt;br/&gt;（Windows 預設會在 &lt;code&gt;C:\Users\{User}\&lt;/code&gt; 或 &lt;code&gt;C:\Users\{User}\.wakatime&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;開啟之後就會看見自己的 API Key 等設定，像這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;settings&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api_key&lt;/span&gt; = &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;能在 &lt;code&gt;.wakatime.cfg&lt;/code&gt; 調整的設定值可以參考官方文檔：&lt;a href=&#34;https://github.com/wakatime/wakatime-cli/blob/develop/USAGE.md&#34;&gt;USAGE.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因為這次我們的目標是隱藏資訊，所以會用到的主要是 Hide 四兄弟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hide_file_names&lt;/code&gt;：隱藏檔案名稱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide_branch_names&lt;/code&gt;：隱藏分支名稱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide_project_names&lt;/code&gt;：隱藏專案名稱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide_project_folder&lt;/code&gt;：隱藏專案資料夾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全打開的話會像這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;settings&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api_key&lt;/span&gt; = &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hide_file_names&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hide_branch_names&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hide_project_names&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hide_project_folder&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下來讓我們簡單認識一下它們。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;開啟 &lt;code&gt;hide_file_names&lt;/code&gt;（隱藏檔案名稱）之後，檔案名稱就不會傳送上去。&lt;/p&gt;
&lt;p&gt;在 WakaTime 看見的會是 HIDDEN：



&lt;img
  src=&#34;https://image.igouist.net/xbKTWlCm.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：因為檔案名稱變成 HIDDEN 了，所以如果原本有用自訂規則來偵測副檔名之類的做法（像 &lt;code&gt;.linq&lt;/code&gt; =&amp;gt; C#）就會吃不到囉。如果有使用 Custom rules 的朋友請再注意一下。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;開啟 &lt;code&gt;hide_project_names&lt;/code&gt;（隱藏專案名稱）之後，則會幫你的專案取一個新名字。這個名字會在專案資料夾底下建一個 &lt;code&gt;.wakatime-project&lt;/code&gt; 的檔案並存放在裡面。&lt;/p&gt;
&lt;p&gt;在 WakaTime 看見的就會是這組專案名稱囉：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/vwtakngm.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後這組 &lt;code&gt;hide_project_folder&lt;/code&gt; 則是會隱藏完整路徑。&lt;/p&gt;
&lt;p&gt;原本的路徑像是這樣的話：&lt;code&gt;/User/me/projects/bar/src/file.ts&lt;/code&gt; &lt;br/&gt;
就會變成這樣：&lt;code&gt;src/file.ts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果路徑上有個人資訊的時候，像是 &lt;code&gt;C:\Users\{User}\...\file.ts&lt;/code&gt; 的話，就很適合把 &lt;code&gt;hide_project_folder&lt;/code&gt; 打開。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;除了上面四個 &lt;code&gt;hide&lt;/code&gt; 兄弟以外，另一個隱藏資訊常用的設定是 &lt;code&gt;hostname&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;推薦在電腦名稱需要隱藏的時候使用，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;settings&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hostname&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nice_machine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 WakaTime 就可以看見自訂的機器名稱囉：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/R9T4TfTm.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;開啟-wakatime-離線暫存offline&#34;&gt;開啟 WakaTime 離線暫存（Offline）&lt;/h2&gt;
&lt;p&gt;除了隱藏專案相關的敏感資訊以外，有時候我們也會到一些暫時無法聯網的地方工作。&lt;/p&gt;
&lt;p&gt;這時候像 Git 這種可以離線工作、連線再上傳的工具就非常方便。&lt;/p&gt;
&lt;p&gt;而 WakaTime 同樣也有 Offline 模式，開啟之後即使是離線的，也會把相關的紀錄暫存起來，等到有網路的時候再上傳。&lt;/p&gt;
&lt;p&gt;要開啟的話，同樣要先到上面提到的 &lt;code&gt;.wakatime.cfg&lt;/code&gt;，加上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;offline&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣當我們沒有接上網路的時候，WakaTime 就會顯示離線模式：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/CfQU139.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;離線模式時，會將資料暫存在 &lt;code&gt;.wakatime/offline_heartbeats.bdb&lt;/code&gt;，等待重新連線後再上傳&lt;/p&gt;
&lt;p&gt;這樣就可以安心繼續 Coding 囉～&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果想手動上傳的話，也可以找到 &lt;code&gt;.wakatime/&lt;/code&gt; 底下的 Wakatime CLI，直接呼叫上傳離線資料的指令&lt;/p&gt;
&lt;p&gt;以我在 Windows 64 位元的工作機為例，應該會找到 &lt;code&gt;wakatime-cli-windows-amd64.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接著就可以使用 &lt;code&gt;--sync-offline-activity&lt;/code&gt; 來同步資料：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 確認待上傳的離線資料筆數&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.\wakatime-cli-windows-amd64.exe --offline-count
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 上傳離線資料&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.\wakatime-cli-windows-amd64.exe --sync-offline-activity &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/akMO4XA.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;wakatime-卡在初始化initialized試試下載-wakatime-cli&#34;&gt;WakaTime 卡在初始化（initialized）？試試下載 WakaTime-CLI&lt;/h2&gt;
&lt;p&gt;這次還有遇到一個怪怪的狀況：WakaTime 的狀態一直卡在初始化（initialized）&lt;/p&gt;
&lt;p&gt;折磨半天之後，終於找到了問題：我的開發環境連不到 Github，而 &lt;strong&gt;WakaTime 會嘗試上去 Github 更新 WakaTime CLI&lt;/strong&gt;，於是就卡住了。&lt;/p&gt;
&lt;p&gt;這時候可以嘗試手動下載 WakaTime CLI 來解決。首先到 &lt;a href=&#34;https://github.com/wakatime/wakatime-cli/releases&#34;&gt;github/wakaTime-cli - Release&lt;/a&gt;，根據作業系統下載對應的壓縮檔（我用另一台電腦上去拉的）&lt;/p&gt;
&lt;p&gt;解壓縮之後會得到 &lt;code&gt;wakatime-cli-{os}-{version}.exe&lt;/code&gt;，以我在 Windows 64 位元的工作機為例，就會是 &lt;code&gt;wakatime-cli-windows-amd64.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把這個 &lt;code&gt;exe&lt;/code&gt; 手動丟到 &lt;code&gt;.wakatime&lt;/code&gt; 資料夾裡，就可以重開 IDE 觀察看看有沒有疏通囉～&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：因為初始化的步驟不僅這項，也可能還有其他原因導致卡住&lt;br/&gt;如果有用其他解法成功打通的朋友也歡迎分享～&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wakatime/wakatime-cli/blob/develop/USAGE.md&#34;&gt;USAGE.md - wakatime/wakatime-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wakatime/vscode-wakatime/issues/156&#34;&gt;Wakatime stuck at VS Code initializing #156 - wakatime/vscode-wakatime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>VSCode: 使用 LiveShare 來即時線上協作吧</title>
      <link>https://igouist.github.io/post/2024/09/vscode-live-share/</link>
      <pubDate>Sun, 01 Sep 2024 15:00:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2024/09/vscode-live-share/</guid>
      <description>&lt;p&gt;在 VSCode 躺了一段時間的 LiveShare 終於派上了用場，這邊就簡單記錄一篇，方便以後推坑的時候用。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/8qQxzrk.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;當時的情況是這樣的：在風和日麗的某個下午，我和女友去客美多（Komeda）喝超讚的蜂蜜冰咖啡，順便 &lt;del&gt;看著她加班&lt;/del&gt; 悠閒地 Coding。&lt;/p&gt;
&lt;p&gt;但麻煩的是，我們倆的座位是面對面的兩人座。所以當我們要邊看程式碼邊溝通時，得先把筆電轉 180 度，或是起身走到另一側，非常不方便&lt;/p&gt;
&lt;p&gt;就在來回走了幾趟 &lt;del&gt;漸漸不耐煩&lt;/del&gt; 之後，突然想起了香香的 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&#34;&gt;LiveShare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LiveShare 可以讓我們在 VSCode 裡即時線上協作，一起編輯同一份程式碼&lt;/strong&gt;。&lt;br/&gt;並且也能看見對方游標的動作、在文件上留言互動等等&lt;/p&gt;
&lt;p&gt;當我們正在 WFH，或是像這種懶得走過去(?)，但又想要和朋朋們來場 Pair 的時候，LiveShare 就可以派上用場了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：Visual Studio 應該已經內建 LiveShare，&lt;br/&gt;可以從「檔案 &amp;gt; 開始 Live Share 工作階段」來開啟&lt;/p&gt;
&lt;p&gt;而 Jetbrains 的朋朋，&lt;br/&gt;請左轉使用 &lt;a href=&#34;https://www.jetbrains.com/code-with-me/&#34;&gt;Code with me&lt;/a&gt;，同樣也能線上開嚕&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;馬上來介紹一下安裝和基本的使用方式吧。&lt;/p&gt;
&lt;p&gt;首先第一步當然是先安裝擴充套件：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/zXoTEUA.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;安裝完畢之後，在左下角應該就能看到 Live Share 的圖示：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/tFVEzq6.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;點擊之後就會開始分享囉，也會很貼心地幫你複製邀請連結：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/2Q4WycJ.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;如果想再複製一次邀請連結，或是想要停止分享，就再戳一次左下角的 Live Share 圖示就可以了：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/DwxhLDP.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;受邀者加入就可以開始線上協作囉！&lt;/p&gt;
&lt;p&gt;過程中可以看見對方游標所在的位置：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/TPQAYSd.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;同時在右上角也會有一些功能可以使用，例如追隨對方的視角，還有直接把對方畫面拉過來的大聲公：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/2axqUwE.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/fxcwjFK.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;除此之外，如果不方便通話，也可以留言討論（但大多時候還是邊通話邊改比較方便啦）&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/NslgcUv.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;基本上有這些功能就可以搞定大部份 Pair 的場景了，有興趣的朋朋也可以試玩看看，&lt;br/&gt;線上協作，簡單方便，阿彌陀佛。&lt;/p&gt;
&lt;p&gt;那麼，今天的分享就到這邊。又成功水了一篇，下篇文章見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Polyglot Notebooks －－ 在 VSCode 簡單迅速地撰寫 C# 腳本吧</title>
      <link>https://igouist.github.io/post/2023/01/polyglot-notebooks/</link>
      <pubDate>Sat, 28 Jan 2023 18:00:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2023/01/polyglot-notebooks/</guid>
      <description>&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/vZzccvm.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;像我這樣的菜鳥工程師，&lt;strong&gt;在 Coding 的時候時常會需要簡單試一些想法&lt;/strong&gt;。像是「我這邊下了這串 Linq 出來的資料，到底是不是我想要的內容啊 = =？」&lt;/p&gt;
&lt;p&gt;或是在進行開發任務時：「這個步驟能不能這樣做啊？先拆個簡單的 Method 試試看好了」之類的&lt;/p&gt;
&lt;p&gt;以往遇到這種時候，我都會打開香香的 &lt;a href=&#34;https://kevintsengtw.blogspot.com/2011/09/linqpad-net.html&#34;&gt;Linqpad&lt;/a&gt; 直接無情開寫，快速地作個小小的概念驗證。&lt;/p&gt;
&lt;p&gt;畢竟 Linqpad 可以迅速地開始撰寫簡單的 C# 腳本，並且有良好的語法提示、Nuget 支援和方便的資料庫連線，省去我還要開一個 Console 專案自己弄這些東西，更可以存著之後備查，所以一直以來我都愛不釋手。&lt;/p&gt;
&lt;p&gt;但在因緣際會下（其實就是閒逛論壇的時候），發現了微軟把拔出的 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode&#34;&gt;Polyglot Notebooks&lt;/a&gt; 這款 VSCode 擴充套件。當下驚為天人！Linqpad 在我心中的地位就這麼動搖了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Polyglot Notebooks 可以讓我們直接在 VSCode 上面撰寫簡單的 C#、F#、JavaScirpt 等腳本、迅速驗證想法。甚至可以對程式碼分段、加入 Markdown 文檔，讓我們能更有邏輯、有步驟地撰寫我們的腳本、處理我們的資料。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它的特色是這麼對我的胃口，看來我以後鐵定是會用到的。現在就來簡單記錄 Polyglot Notebooks 的使用方式吧！&lt;/p&gt;
&lt;div class=&#34;toc&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#安裝及建立檔案&#34;&gt;安裝及建立檔案&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#開始撰寫腳本&#34;&gt;開始撰寫腳本&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#切換腳本語言加入更多儲存格&#34;&gt;切換腳本語言、加入更多儲存格&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#插入-markdown-儲存格&#34;&gt;插入 Markdown 儲存格&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#印出參數內容--簡單的-linq-操作範例&#34;&gt;印出參數內容 &amp;amp; 簡單的 Linq 操作範例&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#安裝-nuget-套件--簡單的呼叫-api-範例&#34;&gt;安裝 Nuget 套件 &amp;amp; 簡單的呼叫 API 範例&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#什麼是-magic-commands&#34;&gt;什麼是 Magic Commands&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#使用-set-來跨語言傳遞變數&#34;&gt;使用 &lt;code&gt;#!set&lt;/code&gt; 來跨語言傳遞變數&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#小結&#34;&gt;小結&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#參考資料&#34;&gt;參考資料&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;
&lt;h2 id=&#34;安裝及建立檔案&#34;&gt;安裝及建立檔案&lt;/h2&gt;
&lt;p&gt;首先我們需要先在 VSCode 找到「Polyglot Notebooks」這個擴充套件並安裝：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/RHsdh6J.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;安裝完畢之後，我們可以有兩種開啟方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增 ipynb 檔案再切換到 .NET Interactive 引擎&lt;/li&gt;
&lt;li&gt;使用 Polyglot Notebooks 的指令或快捷鍵，直接建立 dib 或 ipynb 檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：ipynb 檔案是用於撰寫 IPython Notebook 的檔案，也就是 Jupyter Notebook 在使用的檔案。而微軟把拔藉由 .NET Interactive 引擎讓 Jupyter Notebook 可以支援 C#, F#, SQL 等語言，讓 Notebook 可以支援多語言的撰寫，因此我們建立 ipynb 檔案也是可以撰寫 C# 的，感謝微軟把拔&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;由於我之前已經有在使用 Jupyter Notebook 撰寫 Python，因此這邊就以新增一個 ipynb 檔案進行示範：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/kjSzEzo.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/Z6gdYDa.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;建立了 ipynb 檔案之後，讓我們&lt;strong&gt;切換到 .NET Interactive 引擎&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/wntas5a.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;現在我們已經可以看到讓我們 Coding 的儲存格了，這樣就完成準備工作啦！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：也可以使用 &lt;code&gt;Ctrl+Shift+Alt+N&lt;/code&gt; 快捷鍵，或是 &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; 叫出 VSCode 的指令窗來下 &lt;code&gt;Polyglot Notebook: Create new blank notebook&lt;/code&gt; 來直接建立檔案&lt;/p&gt;
&lt;p&gt;這時候 VSCode 會詢問你要建立 &lt;code&gt;.dib&lt;/code&gt; 或是 &lt;code&gt;.ipynb&lt;/code&gt;，其中 &lt;code&gt;.dib&lt;/code&gt; 進去就直接是 .NET Interactive 引擎，但目前還在實驗階段，並且 &lt;code&gt;ipynb&lt;/code&gt; 還是以較常見的格式，因此我都還是選擇慣用的 &lt;code&gt;.ipynb&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;開始撰寫腳本&#34;&gt;開始撰寫腳本&lt;/h2&gt;
&lt;p&gt;首先當然要從 Hello world 開始啦，讓我們直接在儲存格裡面開寫：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/g4T1oHZ.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;撰寫，然後&lt;strong&gt;按下全部執行或是左邊的單格執行&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/7Vj66zj.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;h3 id=&#34;切換腳本語言加入更多儲存格&#34;&gt;切換腳本語言、加入更多儲存格&lt;/h3&gt;
&lt;p&gt;儲存格的右下角可以讓我們&lt;strong&gt;切換語言&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/KNAYSfy.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;例如說我們可以來個 JavaScript：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/VZ3VmcX.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;當然我們並不是只有這一個小小的儲存格能用（否則我前面就不敢說可以切步驟了嘛）&lt;/p&gt;
&lt;p&gt;可以&lt;strong&gt;按下左上角的「＋程式碼」來新增程式碼儲存格&lt;/strong&gt;，或是把滑鼠移到儲存格最底部，會出現執行之後幫你往下新增一格的按鈕：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/R5gie4R.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;現在我們可以同時放上兩個語言啦：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/aXXsoMa.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;我們也可以針對某一格來執行，或是用滑鼠選擇指定的儲存格，就可以選擇執行指定的儲存格以上或以下的部份，如果有修改某一格，然後要從修改的部分重跑一次的時候還挺方便的：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/1pSg3Op.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;此外還有複製貼上儲存格、合併儲存格等等操作，可以在上圖右邊紅框的「…」找到，這邊就不再贅述。&lt;/p&gt;
&lt;h3 id=&#34;插入-markdown-儲存格&#34;&gt;插入 Markdown 儲存格&lt;/h3&gt;
&lt;p&gt;眼尖的朋友應該發現了，上面新增儲存格的地方除了「＋程式碼」以外，還有「＋Markdown」的選項&lt;/p&gt;
&lt;p&gt;畢竟 Polyglot Notebooks 這東西還是一本「筆記本」，只能貼 Code 不能寫筆記還算什麼筆記本呢，對吧？&lt;/p&gt;
&lt;p&gt;因此我們可以&lt;strong&gt;在程式碼區塊之間適當地加入 Markdown 區塊，來提供需要的資訊，或是紀錄需要的筆記&lt;/strong&gt;。讓我們撰寫的過程可以更有條理，之後回來閱讀也可以更快掌握內容。&lt;/p&gt;
&lt;p&gt;除了在最底下新增儲存格的做法以外，我們也可以對指定的區塊上下來插入新儲存格：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/fXuBzU6.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;現在讓我們加入 Markdown 內容：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/x1sEIc6.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;執行之後就會變成文檔的一部分囉！&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/18uDSVw.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;如果 Markdown 有用到標題之類的，實測也可以進行摺疊：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/563QFBt.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;如此一來這份 Notebook 也可以當作一份文件來保存下去了，豈不美哉！&lt;/p&gt;
&lt;h3 id=&#34;印出參數內容--簡單的-linq-操作範例&#34;&gt;印出參數內容 &amp;amp; 簡單的 Linq 操作範例&lt;/h3&gt;
&lt;p&gt;現在來一點實境題：假設我現在想要試試看怎麼「取出列表裡面，依據特定欄位分組後，每一組的第一筆資料」&lt;/p&gt;
&lt;p&gt;首先我們先做個測試用的 Class，並且捏一點測試用的假資料&lt;/p&gt;
&lt;p&gt;接著&lt;strong&gt;直接呼叫參數來印出內容確認&lt;/strong&gt;一下：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/r5zt5Dm.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;現在我想要每一個 code 的第一筆，也就是 True 的那一筆。現在我覺得「也許 GroupBy 之後 Select 第一筆就搞定了吧？」&lt;/p&gt;
&lt;p&gt;這時候我就可以在下面新增一個儲存格來做測試：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/DeP1PMH.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;搞定！現在我有信心使用這段 Code 了。還可以順便存成一個「分組取第一筆.ipynb」來讓以後的我可以抄，又是美好的一天。&lt;/p&gt;
&lt;h3 id=&#34;安裝-nuget-套件--簡單的呼叫-api-範例&#34;&gt;安裝 Nuget 套件 &amp;amp; 簡單的呼叫 API 範例&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;2024.4.20 更新：後來時常連公司自家的 Nuget 抓內部套件，決定回來補一下指定 Nuget 的範例&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;平常開發的時候，我們還會運用各種套件來完成目標。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Polyglot Notebooks 裡可以使用 &lt;code&gt;#r &amp;quot;nuget:{套件名稱}&amp;quot;&lt;/code&gt; 來安裝 Nuget 套件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此外，如果有需要指定 Nuget 套件來源，也可以使用 &lt;code&gt;#i&lt;/code&gt; 來處理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!c&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nuget:https://api.nuget.org/v3/index.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nuget:Newtonsoft.Json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 需要指定版本的話，可以在後面加上版本號。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 例如：#r &amp;#34;nuget:Newtonsoft.Json, 12.0.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Newtonsoft.Json;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; obj = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; { Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;, Age = &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; json = JsonConvert.SerializeObject(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;json &lt;span style=&#34;color:#75715e&#34;&gt;// {&amp;#34;Name&amp;#34;:&amp;#34;James&amp;#34;,&amp;#34;Age&amp;#34;:30}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;什麼是-magic-commands&#34;&gt;什麼是 Magic Commands&lt;/h3&gt;
&lt;p&gt;在前面安裝套件的時候，我們使用了 &lt;code&gt;#&lt;/code&gt; 開頭的語法，這些語法被稱作「Magic Commands」&lt;/p&gt;
&lt;p&gt;可以參考：&lt;a href=&#34;https://github.com/dotnet/interactive/blob/main/docs/magic-commands.md&#34;&gt;Magic Commands 魔法命令 - dotnet/interactive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下使用程式碼區塊（Cell）紀錄一些比較常用的 Magic Commands：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!lsmagic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 #!lsmagic 來列出所有支援的 Magic Commands&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 或是參考 https://github.com/dotnet/interactive/blob/main/docs/magic-commands.md&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!csharp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 #!csharp 來指定語言為 C#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 支援的語言有：#!csharp (#!c#, #!C#), #!fsharp (#!f#, #!F#)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// #!powershell (#!pwsh), #!javascript (#!js), #!html, #!markdown&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 #!time 來計算 Cell 的執行時間&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Wall time: 32.5128ms&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 也能使用 #!mermaid 來讓 Mermaid.js 繪製流程圖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph TD;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    A--&amp;gt;B;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    A--&amp;gt;C;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    B--&amp;gt;D;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    C--&amp;gt;D;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-set-來跨語言傳遞變數&#34;&gt;使用 &lt;code&gt;#!set&lt;/code&gt; 來跨語言傳遞變數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;2024.4.20 更新：用了一段時間之後，發現這東西的其中一個香點就在跨語言。趕緊回來補一下這段&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;當我們需要在兩個不同的程式語言之間傳遞變數，就可以使用 &lt;code&gt;#!set&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可參考：&lt;a href=&#34;https://github.com/dotnet/interactive/blob/main/docs/variable-sharing.md&#34;&gt;Variable sharing 變量共享&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps. &lt;code&gt;#!share&lt;/code&gt; 誕生的比較早，但後來推出了更香的 &lt;code&gt;#!set&lt;/code&gt;，所以這邊就只記 set 嚕 XD&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!c&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fruitPrices = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cherry&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 同一個語言不需要特別傳遞也抓得到，所以這邊 Csharp 傳給 Csharp 不用做什麼處理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;!c&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fruitPricesInCs = JsonConvert.SerializeObject(fruitPrices);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(fruitPricesInCs); 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// {&amp;#34;apple&amp;#34;:10,&amp;#34;banana&amp;#34;:20,&amp;#34;cherry&amp;#34;:30}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 現在讓我們到 JavaScript，這時候如果想從 Csharp 把變數拿過來，就需要用到 #!set
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;javascript&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fruitPricesInJs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;csharp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fruitPrices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fruitPricesInJs&lt;/span&gt;); 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// {&amp;#34;apple&amp;#34;:10,&amp;#34;banana&amp;#34;:20,&amp;#34;cherry&amp;#34;:30}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;
&lt;p&gt;這篇記錄了 Polyglot Notebooks 的基本用法，並且介紹了一些我覺得很香的地方：輕便快速的驗證風格、能像 Python 的 Jupyter NoteBook 逐步對資料進行處理，又有 C# 的 Linq 能用，用這東西寫個爬蟲之類的小腳本，邊跑隨改實在是舒適的體驗。&lt;/p&gt;
&lt;p&gt;但同時因為這個工具還是 Preview 階段，被其他 IDE 養慣的我，已經習慣貼上語法之後讓 IDE 提示我 using 相關的命名空間進來了，因此像是 HttpClient 這種需要 using 的在這邊就很容易忘記，導致沒有跳自動完成提示的時候寫起來有點綁手綁腳（…說完感覺比較像是我的問題= = 我就菜）&lt;/p&gt;
&lt;p&gt;總之身為一個當年用過 Jupyter Notebooks 的使用者，還是很看好這個工具後續的發展。輕便又能按步驟執行、又跨語言、又能插 Markdown 來做文檔，怎麼想都香！&lt;/p&gt;
&lt;p&gt;&lt;del&gt;太香了太香了，是不是該拿來刷題了啊？&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2023.02.28 補充：&lt;br/&gt;前面提到沒有自動完成提示的問題，在搭配 &lt;strong&gt;Github Copilot&lt;/strong&gt; 之後，已經不是問題了！&lt;/p&gt;
&lt;p&gt;例如說需要 using 的時候，Github Copilot 會幫忙補：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/mGmDW01.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;安裝 Nuget 套件的時候，也會幫忙補上：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/rI0bf5L.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;甚至－－&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/IxaPE1U.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;原來 Polyglot Notebooks 搭配 Github Copilot 才是完全體啊！&lt;/p&gt;
&lt;p&gt;&lt;del&gt;果然還是該拿來刷&amp;hellip;&lt;/del&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://andrewlock.net/exploring-dotnet-interactive-notebooks/&#34;&gt;Exploring .NET interactive notebooks with VS Code (andrewlock.net)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.darkthread.net/blog/dotnet-interactive/&#34;&gt;用 Jupyter Notebook 寫 C# / PowerShell / JavaScript 筆記 - .NET Interactive-黑暗執行緒 (darkthread.net)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio: 在同一個檔案分割視窗</title>
      <link>https://igouist.github.io/post/2021/05/visual-studio-split-window-in-one-file/</link>
      <pubDate>Sun, 02 May 2021 10:00:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2021/05/visual-studio-split-window-in-one-file/</guid>
      <description>&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/LEB9mUy.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;當我們遇到比阿嬤的裹腳布還臭還長的類別時，常常會發生「需要一邊確認 Public 的 Function，但它用到的 Private Function 卻遠在天邊」，或是「SQL 字串／字串常數等等另外宣告在檔案最上端，導致瀏覽邏輯到一半的時候還要來回跳」的狀況。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://igouist.github.io/post/2021/03/visual-studio-bookmark&#34;&gt;上一篇&lt;/a&gt; 我們分享過用書籤的方式來記錄兩個地方來回飛躍，但如果是要互相比對或理解流程等等時候，就比不上分割視窗來的方便。&lt;/p&gt;
&lt;p&gt;在 Visual Studio 用分割視窗的方式開啟不同的檔案，相信大家都已經駕輕就熟，尤其用過 Visual Studio 來進行 Merge 的朋友一定對這樣的排版不陌生。但是你知道就算&lt;strong&gt;對同一個檔案，也可以使用分割視窗來同時編輯兩個地方嗎&lt;/strong&gt;？只需要動動滑鼠就可以囉！&lt;/p&gt;
&lt;p&gt;我們只需要將滑鼠移到卷軸上…&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/H8G3k1M.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;就成功分割出來啦！&lt;/p&gt;
&lt;p&gt;接著只要使用 F6 就可以在兩個視窗之間切換，同時編輯同個檔案的兩個地方囉！&lt;/p&gt;
&lt;p&gt;這邊也分享給大家，下次遇到這些狀況就試試唄！&lt;/p&gt;
&lt;p&gt;&lt;del&gt;謝謝把連到資料表的 Function 裡的 SQL 語法丟到地球彼端的前輩，讓我必須找這種技巧來用&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio: 書籤 (bookmarks)</title>
      <link>https://igouist.github.io/post/2021/03/visual-studio-bookmark/</link>
      <pubDate>Sat, 13 Mar 2021 00:38:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2021/03/visual-studio-bookmark/</guid>
      <description>&lt;p&gt;今天從同事們那邊學到了書籤這個方便功能，趁還記得的時候來做個紀錄。&lt;/p&gt;
&lt;p&gt;那麼馬上就來操作一次：&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Ctrl K&lt;/code&gt;, &lt;code&gt;Ctrl K&lt;/code&gt; 可以在指定的行號上加上一個「書籤」&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/uSBHhGt.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;接著我們就能在書籤視窗中看到這個書籤（檢視＞書籤視窗，或是 &lt;code&gt;Ctrl K&lt;/code&gt;, &lt;code&gt;Ctrl W&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/zyouiFg.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;在書籤視窗中，也可以對書籤重新命名，或是建立資料夾進行管理&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/MELQhKI.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;而當頁面中有多個書籤的時候，就可以利用 &lt;code&gt;Ctrl K&lt;/code&gt;, &lt;code&gt;Ctrl P&lt;/code&gt; 和 &lt;code&gt;Ctrl K&lt;/code&gt;, &lt;code&gt;Ctrl N&lt;/code&gt; 來在書籤中移動&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://i.makeagif.com/media/3-13-2021/6FC6nj.gif&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這個快速移動能用在什麼時候呢？&lt;/p&gt;
&lt;p&gt;我們在進行一個專案時，會常常需要在多個檔案，或是在一個較長的檔案的各處來來回回。&lt;/p&gt;
&lt;p&gt;例如 private 方法離使用到的 public 方法有點遠，又或是我個人就常常會寫某個 Function 到一半的時候，突然發現：「啊！我忘記在建構式的時候把要用的對象傳進來了。」&lt;/p&gt;
&lt;p&gt;這時候就需要來回跑確認方法內容，或是移動到整個類別的頂部去增加宣告和修改建構式，接著再回到剛剛撰寫中的方法，在程式碼裡面折返跑，好不愉快。&lt;/p&gt;
&lt;p&gt;以往遇到這種狀況，我會稍微記一下行號，再利用 &lt;code&gt;Ctrl G&lt;/code&gt; 跳回去。&lt;/p&gt;
&lt;p&gt;今天跟同事聊到書籤的時候，就想到：像是上面的場景，便可以利用書籤來紀錄常用的幾個地方，並快速切換。並且用法也簡單直覺。&lt;s&gt;大概就像&lt;a href=&#34;https://baike.baidu.com/item/%E9%A3%9E%E9%9B%B7%E7%A5%9E%E4%B9%8B%E6%9C%AF&#34;&gt;飛雷神之術&lt;/a&gt;一樣吧。&lt;/s&gt;這邊就記錄一下，也分享給大家。&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-tw/visualstudio/ide/setting-bookmarks-in-code?view=vs-2019&#34;&gt;設定程式碼書籤 - Visual Studio | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>WakaTime —— 我 Coding 了多久？</title>
      <link>https://igouist.github.io/post/2020/06/wakatime/</link>
      <pubDate>Sun, 07 Jun 2020 22:10:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2020/06/wakatime/</guid>
      <description>&lt;p&gt;這一周又是 &lt;del&gt;偷懶週&lt;/del&gt; 繁忙週，因此就跟大家分享一個有趣的網站：&lt;a href=&#34;https://wakatime.com/&#34;&gt;WakaTime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WakaTime 能夠幫你自動記錄寫程式的時間、常用語言及專案，只要簡單地在常用的 IDE 設定好擴充套件就可以達成。 WakaTime 支援的 IDE 可以參閱 &lt;a href=&#34;https://wakatime.com/plugins&#34;&gt;WakaTime - Plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;註冊相當簡單，此處就不贅述。稍微介紹一下儀表板的各區塊的功能：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/wd1LZLr.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

左上會有最近的專案及花費時間，每個色塊都是一個專案，滑鼠移上去就會顯示專案名稱。&lt;/p&gt;
&lt;p&gt;點擊其中一天更會顯示當天的時間軸，可說是無所遁形。至於它判斷專案名稱的方法是看你編輯的檔案所在的資料夾名稱。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/2icNzlL.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

右上是編寫和測試的所佔時間，不過我在使用的時候常常抓不到測試和建置的時間，因此沒在意過。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/ic7NGAE.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

正左則是當天的時間軸和某幾段時間正在處理的專案，可以清楚看到大概哪個時段在認真 Coding（因為都是公司專案，這邊就先碼一下）&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/Qzu0ucB.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

正右則是達到目標的比例，WakaTime 可以到左側選單的 &lt;code&gt;Goal&lt;/code&gt; 設定個人目標，例如每週幾個小時，就可以在這邊看自己當天的達成率如何。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/nu640EP.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

左下則是最近常使用的語言和比例，主要是抓取編輯中檔案的副檔名自動判定。另外也能到 &lt;code&gt;Settings -&amp;gt; Custom Rules&lt;/code&gt; 去設定個人化的規則，例如我個人就會將 .ipynb 計時到 Python 中。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/Bu5df8N.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

右下就很直覺，就是紀錄常用的 IDE 的時間，像我個人挺偏食的，就不常看到這裡。不過一些用瀏覽器的 Coding 方式就不太適用，像我常用的 Jupyter notebook 基本上就是抓不到，許願希望之後的 Chrome 能支援。&lt;/p&gt;
&lt;p&gt;除了上面這些區塊，往下拉也可以看到最近的專案耗費的時間，可以看看最近耗費比較多的專案有哪些。&lt;/p&gt;
&lt;h2 id=&#34;環境設定&#34;&gt;環境設定&lt;/h2&gt;
&lt;p&gt;WakaTime 主打的就是輕便、自動計時。因此設定步驟也相當簡單，各 IDE 的設定步驟可以從 &lt;a href=&#34;https://wakatime.com/plugins&#34;&gt;WakaTime - Plugin&lt;/a&gt; 裡點選自己用的 IDE 進去看安裝介紹。這邊就以我最常用的 Visual Studio 做示範。&lt;/p&gt;
&lt;p&gt;首先點選 Wakatime 右上角的 個人頭像，進入 Settings，確認左側在 Account，這時應該能看到自己的 API Key，點選顯示之後先複製下來。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/pvbaKAT.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;之後打開你的 Visual Studio，上方工具列點選 &lt;code&gt;延伸模組 -&amp;gt; 管理延伸模組&lt;/code&gt;，開啟模組管理員之後選擇 線上，搜尋 Wakatime 並安裝。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/Aj6q2XL.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;重啟 Visual studio 並安裝完畢後，再度打開時應該會自動跳出設定畫面；如果沒有跳出來，也可以從上方工具列點選 &lt;code&gt;工具 -&amp;gt; WakaTime -&amp;gt; Settings&lt;/code&gt; 進入設定畫面&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/Agrd4QS.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;設定畫面如下，將剛剛複製的 API Key 貼上。如果是在公司或是有需要設定 Proxy 的地方記得也順便填一下&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/eFCfNv4.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這樣就設定完囉！是不是很簡單呢？之後當使用 Visual Studio 寫程式的時候，就會自動記下 時間、程式類型、資料夾名稱並傳到 Wakatime 做統計囉&lt;/p&gt;
&lt;p&gt;當然，對於背景紀錄資料有疑慮的朋友，也可以直接翻 &lt;a href=&#34;https://github.com/wakatime&#34;&gt;WakaTime 的 Github&lt;/a&gt;。這個套件是完全開源的。如果嫌使用擴充太無聊或是想自己開發個比較好看的儀表板的朋友，也可以參閱 &lt;a href=&#34;https://wakatime.com/developers&#34;&gt;Wakatime 的開發者頁面&lt;/a&gt;呦。&lt;/p&gt;
&lt;p&gt;最後關於紀錄的部分，之前有看到實測說單純掛網走人是不會算時數的。不過會這樣做的人，本來也就沒什麼動機去用這類時間記錄的工具吧！&lt;/p&gt;
&lt;h2 id=&#34;後記&#34;&gt;後記&lt;/h2&gt;
&lt;p&gt;要注意，免費用戶只能看最近 14 天的紀錄，要看完整紀錄就必須 &lt;a href=&#34;https://wakatime.com/pricing?utm_source=magic-panda-engineer&#34;&gt;付費&lt;/a&gt;，我個人因為是看心情愉快的，因此免費版已經很符合我的需求。若是使用多個 IDE 或想當成時數管理的朋友，又或者是想戰 &lt;a href=&#34;https://wakatime.com/leaders&#34;&gt;排行榜&lt;/a&gt; 的朋友，可以使用一陣子再考慮囉。但要強調，紀錄時間只是做為參考使用，並非工作的標準喲！畢竟弄文件跟查 Bug 更花時間嘛。&lt;/p&gt;
&lt;p&gt;雖然又水了一篇，不過也是挺想把這東西介紹給大家用用看。雖然我個人做時間紀錄大多是使用 &lt;a href=&#34;https://www.playpcesor.com/2016/11/toggl-time-track.html&#34;&gt;Toggl&lt;/a&gt; 來計時，不過偶而開 WakaTime 看看自己最近花多少時間在 Coding？都在寫什麼？專案之間的時間分配得如何？就有種更能掌握自己最近都在忙些什麼的感覺。有時看到柱狀圖一排高聳，或是連續幾周達成目標，就會更有戰鬥力的感覺；若是發現最近時數低落，也會心虛想要彌補一點。如此也是挺有一番趣味，共勉之。&lt;/p&gt;
&lt;h2 id=&#34;延伸閱讀&#34;&gt;延伸閱讀&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/code-and-me/%E7%94%A8-wakatime-%E8%87%AA%E6%88%91%E7%9B%A3%E6%8E%A7-f59599144e28&#34;&gt;用 WakaTime 自我監控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magic-panda-engineer.github.io/tools/wakatime-for-time-management&#34;&gt;利用 Wakatime 來掌握寫程式的時間&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://demo.tc/post/visual%20studio%20%E5%B7%A5%E4%BD%9C%E6%99%82%E9%96%93%E8%A8%98%E9%8C%84%E5%A5%97%E4%BB%B6%20-%20codealike&#34;&gt;Visual Studio 工作時間記錄套件 - Codealike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2018/11/rescuetime.html&#34;&gt;RescueTime 拯救時間利器上手教學，自動時間記錄與生產力評分&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Visual studio 環境設定 —— 字型、套件、快捷鍵</title>
      <link>https://igouist.github.io/post/2020/03/visualstudio/</link>
      <pubDate>Sat, 28 Mar 2020 00:11:00 +0800</pubDate>
      <author>Igouist (Igouist)</author>
      <guid>https://igouist.github.io/post/2020/03/visualstudio/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;目標：整理一下自己用的&lt;strong&gt;字型、插件和快捷鍵&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;今天在工作時寫到一半突然藍屏，重開機之後俺的地表最強編譯器 Visual Studio 整個就開始鬧脾氣，打開專案整排都是 Error，連 System.Object 都找不到，差點往生。還好用了修復功能之後一切恢復正常，但是載入的插件和一些個人設定就這樣重置了……&lt;/p&gt;
&lt;p&gt;為了之後可能還會遇到相同的事情，這邊就先將平常的 Visual Studio 環境用到的設定做一份紀錄，之後遇到新插件或是什麼功能也可以回來更新這篇文，如此一來下次又被洗白的時候就可以回來參考了。&lt;/p&gt;
&lt;p&gt;這邊主要會記錄三個部分，並隨時可能更新。主要是字型、使用的插件以及常用的快捷鍵。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不過我的 Visual Studio 也被洗白了所以這篇會跟著找回失落插件的歷程慢慢補上QQ&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;字型&#34;&gt;字型&lt;/h2&gt;
&lt;p&gt;字型部分必定、絕對要使用&lt;strong&gt;等寬字型&lt;/strong&gt;，這是必要的前提也是絕對的共識，畢竟你不會希望有什麼神秘空白，或是推個版就排版大炸裂之類的。&lt;/p&gt;
&lt;p&gt;推薦先參閱 &lt;a href=&#34;https://kevintsengtw.blogspot.com/2014/08/blog-post.html&#34;&gt;換個好字型讓程式開發有效率&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2021.01.27 補充：字型也可以看 &lt;a href=&#34;https://devfonts.gafi.dev/&#34;&gt;devfonts&lt;/a&gt; 。裡面直接放了超多 Coding 常用字型，也可以貼上 Code 直接進行比較，相當貼心。想逛一下挑個順眼字型的朋友直接試試唄。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;consolas&#34;&gt;Consolas&lt;/h3&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/az9u0B3.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

內建就有的字體，個人認為在不想另外下載字體的時候是相當優質的選擇。&lt;/p&gt;
&lt;p&gt;看起來粗粗圓圓的很放鬆。&lt;/p&gt;
&lt;h3 id=&#34;firacode&#34;&gt;FiraCode&lt;/h3&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/9OJpMXL.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;FiraCode&lt;/a&gt;，整體看起來就是乾淨優雅，尤其是連字能使得整個 Code 更有滑順的感覺，十分推薦。&lt;/p&gt;
&lt;p&gt;然而，FiraCode 雖然陪伴我一段不短的時間，但還是有一個致命的缺陷：不支援中文！&lt;/p&gt;
&lt;p&gt;於是後來我基本上都使用下面介紹的這款&lt;/p&gt;
&lt;h3 id=&#34;更紗黑體&#34;&gt;更紗黑體&lt;/h3&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/yVMe5wC.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

&lt;a href=&#34;https://github.com/be5invis/Sarasa-Gothic&#34;&gt;更紗黑體&lt;/a&gt; 除了同樣支援連字以外，更支援多國語系。例如繁中就是有標註 TC 的字形，看見中英文都套用上去就是一陣舒服。是現在我的主力。&lt;/p&gt;
&lt;p&gt;至於不想用等寬字體的朋友，都看到這裡了，沒關係。下面這套推薦給你們&lt;/p&gt;
&lt;h3 id=&#34;ink-free&#34;&gt;Ink Free&lt;/h3&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/EShjvS5.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

就是這麼直接！這麼舒服！如果你的同事要過來 Code Review，不要猶豫字體直接換下去！&lt;/p&gt;
&lt;h2 id=&#34;變更環境字體&#34;&gt;變更環境字體&lt;/h2&gt;
&lt;p&gt;前面介紹了一些好用的字體，以及 &lt;a href=&#34;https://devfonts.gafi.dev/&#34;&gt;devfonts&lt;/a&gt; 這個超讚網站。接著就讓我們來設定 Visual Studio 的字體吧。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;工具 &amp;gt; 選項 &amp;gt; 環境 &amp;gt; 字型與色彩&lt;/code&gt; 中，能設定當前使用的字型。其中顯示設定可以選擇要變更哪個區塊的字型，最常用的應該就是改程式碼字型的「文字編輯器」了。&lt;/p&gt;
&lt;p&gt;這邊推薦一下我個人還會調整的部份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CodeLens&lt;/li&gt;
&lt;li&gt;陳述式完成&lt;/li&gt;
&lt;li&gt;編譯器工具提示&lt;/li&gt;
&lt;li&gt;環境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/m2zfp6K.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;影響到的範圍會有&lt;/p&gt;
&lt;p&gt;環境相關的字體，例如上方的工具列&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/H5t6Jun.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/9hYcnfn.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;按下 &lt;code&gt;Alt + Enter&lt;/code&gt; 的小提示、方法上方的 CodeLen 小提示（N 個參考那個）&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/lHf3SHe.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;自動補完和註解說明等等&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/SaMzVkA.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;另外我個人還會把清單裡任何加上 &lt;code&gt;[]&lt;/code&gt; 的部份的字型也改掉：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有文具工具&lt;/li&gt;
&lt;li&gt;監看式、區域變數及自動變數工具視窗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果再搭配上&lt;a href=&#34;#%E9%85%8D%E8%89%B2%E4%B8%BB%E9%A1%8C&#34;&gt;配色主題&lt;/a&gt;就可以把整個 IDE 弄得更賞心悅目囉！&lt;/p&gt;
&lt;h2 id=&#34;擴充套件&#34;&gt;擴充套件&lt;/h2&gt;
&lt;h3 id=&#34;codemaid&#34;&gt;CodeMaid&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaid&#34;&gt;CodeMaid&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;極實用，我平常主要用到的功能是看&lt;strong&gt;複雜度&lt;/strong&gt;和&lt;strong&gt;自動排版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/pf897N7.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

安裝之後可以開啟 CodeMaid Spade，其中函式右側的就是該函式的複雜度，複雜度指得就是該函式中各種不同狀況的路徑數量，例如一個 IF 就會有兩條路徑。&lt;/p&gt;
&lt;p&gt;而複雜度相當高的時候 CodeMaid Spade 的字體會變成紅色，屆時就應該思考這個函式是否做了太多事情，也就是有太多&lt;a href=&#34;https://igouist.github.io/post/2020/10/oo-10-single-responsibility-principle&#34;&gt;職責&lt;/a&gt;？是否應該把部分功能抽出來？平常可以迅速地提供參考。關於複雜度相關的工具也可以參閱：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/09/visual-studio-microsoft-codelens-code.html&#34;&gt;Visual Studio - Microsoft CodeLens Code Health Indicator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/02/visual-studio-code-metrics-viewer-2013.html&#34;&gt;Visual Studio 計算程式碼度量 - Code Metrics Viewer 2013&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/sb2440G.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

除了看見複雜度以外，這個插件的主要功能就在於程式碼的排版和整理，甚至可以設定成每當儲存時自動排版一次。對我這種懶人來說可是一大福音。但要小心跟其他人協作的時候如果全部重新排版可能動到人家的 Code 而且推送時的變更會爆炸多，要稍微注意。平常就養成順手 &lt;code&gt;Ctrl + K&lt;/code&gt;、&lt;code&gt;Ctrl + D&lt;/code&gt; 的習慣會更好。&lt;/p&gt;
&lt;h3 id=&#34;codemaintainibility&#34;&gt;CodeMaintainibility&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面： &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ognjen-babic.code-maintainibility&#34;&gt;Code Maintainibility&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;提到複雜度，也可以安裝這套 Code Maintainibility，在看複雜度的時候能夠更快更方便！&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/90Ox0rF.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;一樣在「管理擴充功能」直接搜尋就可以了，但這個套件似乎有改版過。我更新了 Visual Studio 才搜尋得到，如果找不到的朋友可以先嘗試更新看看。&lt;/p&gt;
&lt;p&gt;安裝之後就可以直接在各個 Function 上方的 CodeLens 直接看到複雜度指標囉！&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/No3C6yH.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;點開來也會顯示各項指標，包括可維護性、霍爾斯特德複雜度等等&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/aOCbIp1.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;也可以在設定之中調整預設顯示的指標&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/amDpQtp.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這樣在撰寫和重構程式碼的時候就可以迅速又清楚看見複雜度指標，&lt;s&gt;心裡也至少有個底&lt;/s&gt;，可以說是方便不少呢&lt;/p&gt;
&lt;h3 id=&#34;editor-guidelines&#34;&gt;Editor Guidelines&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=PaulHarrington.EditorGuidelines&#34;&gt;Editor Guidelines&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在指定字數位置&lt;strong&gt;劃出直的輔助線&lt;/strong&gt;，我都用來標示出 100 字元 和 120 字元的位置，用來提醒自己要換行，以保持程式碼可以直直地閱讀下去，而不會為了往右滾動或是因為自動斷行在奇怪地方而中斷。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/yBffyf3.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

可以看見右側有輔助線，通常只要長到碰到該線我就會將該行程式碼做斷行的調整。&lt;/p&gt;
&lt;p&gt;安裝之後可以在編輯器的任何位置按下右鍵，就可以增加和移除輔助線。



&lt;img
  src=&#34;https://image.igouist.net/0YqkYFI.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;如果想要在確切字元位置（如 100 字元），則可以在 &lt;code&gt;檢視 → 其他視窗 → 命令視窗&lt;/code&gt; 裡面輸入指令來加入輔助線&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Edit.AddGuideline 100 // 添加輔助線
Edit.RemoveAllGuidelines // 移除輔助線
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;關於換行的重要性，這篇 &lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/02/visual-studio-part1.html&#34;&gt;調整你的 Visual Studio - Part.1&lt;/a&gt; 說明得很仔細，並且也有上面 CodeMaid 的介紹，我之所以打算紀錄我的套件等也是基於這幾篇，推薦閱讀。&lt;/p&gt;
&lt;h3 id=&#34;codeblockendtag&#34;&gt;CodeBlockEndTag&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=KhaosPrinz.CodeBlockEndTag&#34;&gt;CodeBlockEndTag&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;主要是在&lt;strong&gt;括弧的結束部分會顯示出這個括弧所屬的區塊&lt;/strong&gt;（如附圖）。我有看見許多同事都使用替括弧上色的作法，不過我個人不喜歡太過五彩繽紛的感覺，因此強烈推薦這款插件。&lt;/p&gt;
&lt;p&gt;下載之後可以在 &lt;code&gt;工具 → 選項 → KC Extensions&lt;/code&gt; 裡面調整，有 當上括弧在畫面外時才顯示下括弧的文字，以及一律顯示（我個人都是使用一律顯示）&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/sRCndm3.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

可以看見 IF 跟函式結束的地方都有標示出括弧對應的區塊，在多層巢狀的時候相當有幫助。（雖然說更重要的是應該避免做出多層巢狀就是了）&lt;/p&gt;
&lt;h3 id=&#34;smartpaster&#34;&gt;SmartPaster&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=martinw.SmartPaster2013&#34;&gt;SmartPaster2019&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;貼上的時候可以&lt;strong&gt;選擇貼上的格式&lt;/strong&gt;，在插件介紹頁的示意圖就能夠一目瞭然。&lt;/p&gt;
&lt;h3 id=&#34;time-savers&#34;&gt;Time Savers&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=YannDuran.VisualStudioTimeSavers&#34;&gt;Time Savers&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;單純的省時小工具，可以&lt;strong&gt;在上方的工具列幫你長出一些 建置、以管理員重開等按鍵&lt;/strong&gt;。畢竟和建置那些可以直接快捷鍵的動作不一樣，有時候沒有以系統管理員身分開 Visual Studio 的時候會遇到一些神秘錯誤，重開又挺麻煩，因此直接放顆按鈕在上面是真的省了不少時間，要記得遵守工程師的美德：懶惰。能省時就省時！&lt;/p&gt;
&lt;h3 id=&#34;claudiaide&#34;&gt;ClaudiaIDE&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE&#34;&gt;ClaudiaIDE&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;這個跟效率就沒啥太大關係了，所以特別放在壓軸哈，這插件主要是用來&lt;strong&gt;修改編譯區塊的背景&lt;/strong&gt;使用的。&lt;/p&gt;
&lt;p&gt;剛安裝下來之後打開 Visual Studio 就會看到一個妹子。



&lt;img
  src=&#34;https://image.igouist.net/op0y1wf.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;當然這個背景圖是可以自由變更的，打開 &lt;code&gt;工具 → 選項 → ClaudiaIDE&lt;/code&gt; 就會看到以下的設置畫面



&lt;img
  src=&#34;https://image.igouist.net/O3KAm0N.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;主要會變動的地方會有 Opacity 透明度、File Path 圖片路徑 以及 Image Stretch 圖片填滿或是延展 這些設定，根據個人經驗，盡量用深色背景圖加上透明會比較順眼，主要還是要以不干擾閱讀程式碼為主&lt;/p&gt;
&lt;p&gt;像我這麼低調的換個藍底的 VS Logo 就足夠竊喜好一陣子了



&lt;img
  src=&#34;https://image.igouist.net/gjlxy52.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;順帶一提我同事的背景圖是用這張，嗯……



&lt;img
  src=&#34;https://image.igouist.net/YER0385.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;

（載下來示範截圖之後立馬換回來，實在過於微妙）&lt;/p&gt;
&lt;h3 id=&#34;visual-studio-iconizer&#34;&gt;Visual Studio Iconizer&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=OlegTarasov.VisualStudioIconizerforVisualStudio15&#34;&gt;Visual Studio Iconizer&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;這個則是讓你的 Visual Studio 質感飛升的關鍵：它會替你的工具欄加上 icon！&lt;/p&gt;
&lt;p&gt;先來看看原本的工具視窗釘選之後長怎樣：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/s0zVMsN.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;安裝後：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/004mjQq.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;當然如果怕找不到的話，也可以圖文並行（&lt;code&gt;工具 → 選項 → iconizer&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/ScUCjeU.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;



&lt;img
  src=&#34;https://image.igouist.net/WjLE5Tf.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;h3 id=&#34;output-enhancer--metaoutput&#34;&gt;Output enhancer &amp;amp; MetaOutput&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;市集頁面：&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=NikolayBalakin.Outputenhancer&#34;&gt;Output enhancer&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;最後來介紹個實用的 Output enhancer：替你的輸出視窗上色&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/KGW1DrK.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;警告跟錯誤等等就會更顯眼囉！&lt;/p&gt;
&lt;p&gt;如果想要更進一步也可以使用他們的另一款整合過的 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ViacheslavLozinskyi.MetaOutput-2019&#34;&gt;MetaOutput&lt;/a&gt;（&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ViacheslavLozinskyi.MetaOutput-2022&#34;&gt;2022&lt;/a&gt;），輸出視窗就會變為條列式：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/IRBlGGv.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;除了會折疊輸出訊息以外，也能調整哪部分訊息可以省略：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/KQutBi1.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;也可以進行搜尋：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/0lNna9g.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;個人覺得挺方便的。雖然日常狀況還是等紅字跳出來再說 XD&lt;/p&gt;
&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;
&lt;h3 id=&#34;變更-visual-studio-程式碼的配色為新版本-2019&#34;&gt;變更 Visual Studio 程式碼的配色為新版本 (2019)&lt;/h3&gt;
&lt;p&gt;Visual Studio 2019 預設的程式碼配色會是 2017 版本的，因此可以先調整更改成 2019 版本。&lt;/p&gt;
&lt;p&gt;更改的位置在 &lt;code&gt;工具 &amp;gt; 選項 &amp;gt; 文字編輯器 &amp;gt; C# (看個人使用語言) &amp;gt; 進階&lt;/code&gt; 接著拉至最底找到 &lt;code&gt;編輯器色彩配置&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/lbUP19r.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;把它更改成 2019 版本的就可以囉&lt;/p&gt;
&lt;p&gt;變更前：



&lt;img
  src=&#34;https://image.igouist.net/IMr2ViF.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;變更後：



&lt;img
  src=&#34;https://image.igouist.net/s0zYjmu.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;可以看到變數、方法都有上色了，在整排 Linq 連發的 Code 裡面可是相當實用呢&lt;/p&gt;
&lt;h3 id=&#34;開啟內嵌提示&#34;&gt;開啟內嵌提示&lt;/h3&gt;
&lt;p&gt;這邊推薦把「內嵌提示」這個實驗性功能打開，可以大大增加程式碼的可讀性。&lt;/p&gt;
&lt;p&gt;首先讓我們先到 &lt;code&gt;選項 &amp;gt; 文字編輯器 &amp;gt; C# &amp;gt; 進階&lt;/code&gt;，並且往下拉就可以看到內嵌提示。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/FMERRDD.webp&#34; alt=&#34;image-20210830065440439&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;其中「&lt;strong&gt;顯示內嵌參數名稱&lt;/strong&gt;」勾選起來的話，就會在呼叫方法時顯示該參數的名稱，如下圖的 &lt;code&gt;startIndex&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/7QCEEkY.webp&#34; alt=&#34;image-20210830065736932&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;像這種呼叫方法時傳遞的常數，例如 &lt;code&gt;0&lt;/code&gt;、&lt;code&gt;false&lt;/code&gt; 等等，加上參數名稱就能大大提升可讀性。&lt;/p&gt;
&lt;p&gt;但當我們是傳遞變數的時候，常常都已經針對該物件做好妥善的命名了，所以可以把子項的「當參數名稱符合方法的意圖時，不出現提示」也勾選起來，避免命名已經足夠描述內容時反而造成干擾。&lt;/p&gt;
&lt;p&gt;接著「&lt;strong&gt;顯示內嵌類型提示&lt;/strong&gt;」也可以勾選起來，顧名思義就是會在洽當的時候提醒你「這東西是這個型別呦！」的小助手。&lt;/p&gt;
&lt;p&gt;其中我會關閉第一項「顯示有推斷類型之變數的提示」，它的效果就是每當你使用 &lt;code&gt;var&lt;/code&gt; 的時候就會顯示推測的型別，例如：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/nGyRm6J.webp&#34; alt=&#34;image-20210830071205401&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;可以看到 &lt;code&gt;var&lt;/code&gt; 的後面會補上型別。&lt;del&gt;不過這樣我排版就亂掉了，而且我就是打算把型別丟給 C# 處理才用 var 的所以掰掰&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;而第二項「&lt;strong&gt;顯示 Lambda 參數類型的提示&lt;/strong&gt;」這個就相當推薦打開了，作用的方式會像這樣：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/RVqvtcJ.webp&#34; alt=&#34;image-20210830071404915&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;當你在使用 Linq 的時候，就能更清楚知道現在自己在操作的是哪個型別、哪個部分。在 &lt;code&gt;Join&lt;/code&gt;、&lt;code&gt;Groupby&lt;/code&gt; 等等需要對串列連續地進行處理的時候，能夠發揮莫大的功效，特別強烈推薦要打開。&lt;/p&gt;
&lt;h3 id=&#34;對目前所在行醒目提示&#34;&gt;對目前所在行醒目提示&lt;/h3&gt;
&lt;p&gt;這段其實是發完文之後才補充的啦，這邊要推薦一個好用的設定：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;工具 &amp;gt; 選項 &amp;gt; 環境 &amp;gt; 字型與色彩&lt;/code&gt; 然後在下拉式選單找到 &lt;code&gt;反白顯示目前的行&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就可以對游標所在的那行做醒目提示囉！&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/qvh8i8l.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;圖中的綠色就是醒目提示。&lt;/p&gt;
&lt;p&gt;之前和大前輩聊到這個反白行，前輩表示他很討厭，因為他不太需要一條會干擾的色塊告訴他正在這&lt;/p&gt;
&lt;p&gt;但像我這種菜雞，按著 Ctrl + G 就不知道自己飛哪裡去了，還是標記一下好哈哈。&lt;/p&gt;
&lt;h3 id=&#34;調整索引標籤設定&#34;&gt;調整索引標籤設定&lt;/h3&gt;
&lt;p&gt;個人習慣將索引標籤放在右側，如此一來就可以更清楚地看到檔案名稱，而且條列式地由上往下看還是比較符合平時看 Code 的習慣。&lt;/p&gt;
&lt;p&gt;索引標籤的位置可以在 &lt;code&gt;工具 &amp;gt; 選項 &amp;gt; 環境 &amp;gt; 索引標籤和視窗&lt;/code&gt; 裡進行調整：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/sIRwNBz.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這邊也強烈建議將 專案/路徑 分組勾選開來，可以幫助我們更快找到開啟的索引：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/urbQnTd.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;在 Visual Studio 2022 時，可以更進一步打開依專案著色索引的功能：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/4mmuJqs.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/5fVIZlL.webp&#34; alt=&#34;Image&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;這樣開一堆索引要找的時候就更快了！&lt;/p&gt;
&lt;p&gt;&lt;del&gt;如果從來不用索引標籤，就是無情的 &lt;code&gt;Ctrl T&lt;/code&gt; 或是 &lt;code&gt;Ctrl Tab&lt;/code&gt; 打全場的也可以不用上色沒關係就是了…&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;配色主題&#34;&gt;配色主題&lt;/h2&gt;
&lt;h3 id=&#34;one-dark-pro&#34;&gt;One Dark Pro&lt;/h3&gt;
&lt;p&gt;這邊推薦我在 Visual Studio Code 也很愛用的主題：&lt;strong&gt;One Dark Pro&lt;/strong&gt;，前陣子才發現居然在 Visual Studio 上也能看到熟悉的配色，馬上就安裝下來了。&lt;/p&gt;
&lt;p&gt;因為它也是擴充套件之一，所以一樣讓我們打開 &lt;code&gt;延伸模組 &amp;gt; 管理延伸模組&lt;/code&gt;，並搜尋 &lt;code&gt;One Dark Pro&lt;/code&gt;，找到並安裝下來：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/pXGqoqd.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;下載好之後需要關閉 Visual Studio 安裝一下。&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/CGuQ6ge.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;安裝好了之後重新開啟 Visual Studio，並前往 &lt;code&gt;工具 &amp;gt; 選項&lt;/code&gt;，在左邊找到 &lt;code&gt;環境&lt;/code&gt;，就可以從色彩佈景主題裡選擇 One Dark Pro 囉：&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/ZrtztVV.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;


&lt;img
  src=&#34;https://image.igouist.net/4oBef8K.webp&#34;style=&#34;aspect-ratio: 16 / 9; width: 100%; height: auto;&#34;loading=&#34;lazy&#34; decoding=&#34;async&#34;&gt;
&lt;/p&gt;
&lt;p&gt;果然還是熟悉的配色最對味～大家也可以嘗試安裝看看配色主題呦！會有一番新滋味呢。&lt;/p&gt;
&lt;h2 id=&#34;快捷鍵&#34;&gt;快捷鍵&lt;/h2&gt;
&lt;p&gt;最後大概整理一下平常會按到的快捷鍵，方便上班在外可以直接回來偷看。（希望有朝一日能夠寫起來時雙手不離鍵盤 XD）&lt;/p&gt;
&lt;h3 id=&#34;偵錯&#34;&gt;偵錯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;執行(debug)：F5&lt;/li&gt;
&lt;li&gt;執行(non debug)：Ctrl + F5&lt;/li&gt;
&lt;li&gt;全部儲存：Ctrl + Shift + S&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;單步執行：F11 (F10)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;切換斷點：F9&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;啟用/停用斷點：Ctrl + F9&lt;/li&gt;
&lt;li&gt;刪除所有斷點：Ctrl + Shift + F9&lt;/li&gt;
&lt;li&gt;（單元測試）對全部測試：Ctrl + R, A&lt;/li&gt;
&lt;li&gt;（單元測試）對全部偵錯：Ctrl + R, Ctrl + A&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;檢視&#34;&gt;檢視&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程式碼編輯器分頁切換 ：Ctrl+TAB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;顯示屬性窗口：F4&lt;/li&gt;
&lt;li&gt;關閉目前視窗：Ctrl + F4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移至定義：F12&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列出參考：Shift + F12&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移至目標：Ctrl + T =&amp;gt; 輸入目標&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;巡覽列：Ctrl + F2 =&amp;gt; Tab&lt;/li&gt;
&lt;li&gt;工具列：Alt + (對應鍵)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;線上搜尋微軟官方文件：F1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;回到編輯器區塊：F7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/03/visual-studio-bookmark/&#34;&gt;書籤&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;在指定行號上新增書籤：Ctrl + K, Ctrl + K&lt;/li&gt;
&lt;li&gt;開啟書籤視窗：Ctrl + K, Ctrl + W&lt;/li&gt;
&lt;li&gt;移動到上一個書籤：Ctrl + K, Ctrl + P&lt;/li&gt;
&lt;li&gt;移動到下一個書籤：Ctrl + K, Ctrl + N&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;編輯&#34;&gt;編輯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;選取目前文字：Ctrl + W&lt;/li&gt;
&lt;li&gt;選取同個變數：Shift + Ctrl + ↑/↓&lt;/li&gt;
&lt;li&gt;選取目標區塊：Shift + Ctrl + }&lt;/li&gt;
&lt;li&gt;註解選取範圍：Ctrl + K,C&lt;/li&gt;
&lt;li&gt;取消註解選取範圍：Ctrl + K,U&lt;/li&gt;
&lt;li&gt;選取文字改小寫：Ctrl + U&lt;/li&gt;
&lt;li&gt;選取文字改大寫：Ctrl + Shift + U&lt;/li&gt;
&lt;li&gt;呼叫出類別成員：Ctrl + J (編到一半時 tips 突然不見很好用)&lt;/li&gt;
&lt;li&gt;收攏原始碼：Ctrl + M, O&lt;/li&gt;
&lt;li&gt;展開原始碼：Ctrl + M, L&lt;/li&gt;
&lt;li&gt;收攏／展開當前區塊：Ctrl + M, Ctrl + M&lt;/li&gt;
&lt;li&gt;刪除目前這行：Ctrl + Shift + L&lt;/li&gt;
&lt;li&gt;刪除目前往後：Ctrl + Delete&lt;/li&gt;
&lt;li&gt;檔案最前面：Shift + Home&lt;/li&gt;
&lt;li&gt;檔案最後面：Shift + End&lt;/li&gt;
&lt;li&gt;選到最前面：Ctrl + Shift + Home&lt;/li&gt;
&lt;li&gt;選到最後面：Ctrl + Shift + End&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跳至行號：Ctrl + G&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在上面插入一行： Ctrl + Enter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多行選取：Shift + Alt + ↑ or ↓&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打開右鍵選單：Shift + F10&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2014/08/blog-post.html&#34;&gt;換個好字型讓程式開發有效率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/02/visual-studio-part1.html&#34;&gt;調整你的 Visual Studio - Part.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/02/visual-studio-part2.html&#34;&gt;調整你的 Visual Studio - Part.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/09/visual-studio-microsoft-codelens-code.html&#34;&gt;Visual Studio - Microsoft CodeLens Code Health Indicator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevintsengtw.blogspot.com/2015/02/visual-studio-code-metrics-viewer-2013.html&#34;&gt;Visual Studio 計算程式碼度量 - Code Metrics Viewer 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/HW140701/article/details/85162678?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&#34;&gt;Visual Studio 增加每行最多字符数限制参考线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;各位整理快捷鍵的大大們，族繁不及備載&lt;/li&gt;
&lt;li&gt;感謝辦公室門口旁邊的不知名同事，讓我發現可以放 &lt;del&gt;妹子&lt;/del&gt; 圖片在 Visual Studio 裡&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSharp-and-Dotnet on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/categories/csharp-and-dotnet/</link>
    <description>Recent content in CSharp-and-Dotnet on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <lastBuildDate>Sun, 16 May 2021 22:42:00 +0800</lastBuildDate>
    
	<atom:link href="https://igouist.github.io/categories/csharp-and-dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>菜雞新訓記 (4): 使用 Swagger 來自動產生簡單好看可測試的 API 文件吧</title>
      <link>https://igouist.github.io/post/2021/05/newbie-4-swagger/</link>
      <pubDate>Sun, 16 May 2021 22:42:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2021/05/newbie-4-swagger/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TnzhZaW.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是俺整理公司新訓內容的第四篇文章，目標是&lt;strong&gt;簡單地使用 Swagger 工具來自動產生可互動的 API 文件&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#api-%E6%96%87%E4%BB%B6%E8%88%87-swagger&#34;&gt;API 文件與 Swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#%E5%AE%89%E8%A3%9D-swashbuckle-%E5%8F%8A%E5%95%9F%E7%94%A8-swagger&#34;&gt;安裝 Swashbuckle 及啟用 Swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#%E4%BD%BF%E7%94%A8-swaggerdoc-%E5%A2%9E%E5%8A%A0%E5%B0%88%E6%A1%88%E6%8F%8F%E8%BF%B0&#34;&gt;使用 SwaggerDoc 增加專案描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#%E4%BD%BF%E7%94%A8-xml-%E6%96%87%E4%BB%B6%E5%92%8C-includexmlcomments-%E5%BE%9E%E8%A8%BB%E8%A7%A3%E7%94%A2%E7%94%9F-api-%E8%AA%AA%E6%98%8E&#34;&gt;使用 XML 文件和 IncludeXmlComments 從註解產生 API 說明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#%E4%BD%BF%E7%94%A8-produces-%E5%B1%AC%E6%80%A7%E5%92%8C-response-%E8%A8%BB%E8%A7%A3%E8%A3%9C%E5%85%85%E5%9B%9E%E5%82%B3%E8%B3%87%E8%A8%8A&#34;&gt;使用 Produces 屬性和 response 註解補充回傳資訊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#%E5%B0%8F%E7%B5%90&#34;&gt;小結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#%E6%9C%AC%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0&#34;&gt;本系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-4-swagger#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&#34;&gt;參考資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-文件與-swagger&#34;&gt;API 文件與 Swagger&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper&#34;&gt;上一篇&lt;/a&gt; 我們建立了一個有簡單的 CRUD 的 Web API 服務，這篇我們就接續著 API 服務往下看吧！&lt;/p&gt;
&lt;p&gt;之前我們介紹 API 的時候有提過：API 是為了讓兩個服務之間可以溝通、互動所產生的接口。而所有的溝通要有效，都一定要先有共識，隨著溝通的人數越來越多，或是內容的理解要越來越細，就會用文件或契約的方式來達成共識。&lt;/p&gt;
&lt;p&gt;回到我們的 API 服務開發來說，就是你除了把服務生出來了，可以跑了以外，還有一個重要的點是：&lt;strong&gt;必須讓所有的使用者（包含幾個月後的你自己）知道怎麼使用這組 API 服務&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也就來說，就是要寫 &lt;strong&gt;API 規格文件&lt;/strong&gt; 啦！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>菜雞新訓記 (3): 使用 .net Core 來建立簡單的 Api 吧（下）使用 Dapper 連線到資料庫</title>
      <link>https://igouist.github.io/post/2021/05/newbie-3-dapper/</link>
      <pubDate>Sun, 09 May 2021 11:15:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2021/05/newbie-3-dapper/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kOpRPTm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是俺整理公司新訓內容的第三篇文章，目標是&lt;strong&gt;簡單地使用 Dapper 連線到資料庫並完成 CRUD 的功能&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E5%89%8D%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5&#34;&gt;前言、基本觀念&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E9%97%9C%E6%96%BC%E5%BC%B1%E5%9E%8B%E5%88%A5%E8%88%87%E5%BC%B7%E5%9E%8B%E5%88%A5&#34;&gt;關於弱型別與強型別&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E9%97%9C%E6%96%BC%E7%89%A9%E4%BB%B6%E9%97%9C%E4%BF%82%E5%B0%8D%E6%98%A0orm&#34;&gt;關於物件關係對映（ORM）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E9%97%9C%E6%96%BC-dapper&#34;&gt;關於 Dapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E6%AD%A3%E5%BC%8F%E9%96%8B%E5%B7%A5&#34;&gt;正式開工&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E7%92%B0%E5%A2%83%E6%BA%96%E5%82%99%E5%BB%BA%E7%AB%8B%E8%B3%87%E6%96%99%E8%A1%A8%E5%AE%89%E8%A3%9D-dapper&#34;&gt;環境準備（建立資料表、安裝 Dapper）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E5%BB%BA%E7%AB%8B%E5%B0%8D%E6%87%89%E8%B3%87%E6%96%99%E8%A1%A8%E7%9A%84%E9%A1%9E%E5%88%A5&#34;&gt;建立對應資料表的類別&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E4%BD%BF%E7%94%A8-dapper-%E5%AF%A6%E4%BD%9C-crud&#34;&gt;使用 Dapper 實作 CRUD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E5%B0%8D%E6%8E%A5%E8%88%87%E6%B8%AC%E8%A9%A6&#34;&gt;對接與測試&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E5%B0%8F%E7%B5%90&#34;&gt;小結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-3-dapper#%E6%9C%AC%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0&#34;&gt;本系列文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接續&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi&#34;&gt;上一篇&lt;/a&gt;的進度，我們接著要來連線到資料庫中完成我們的 Web Api 的 CRUD 範例。因為從新訓時期到現在工作團隊作業上主要都是使用 Dapper 來做連線資料庫的工作，這邊就直接用 Dapper 來推進吧！&lt;/p&gt;
&lt;p&gt;Dapper 有多好用呢？它輕量、它簡單、它快速。總之先把大神們的介紹文直接拿來鎮樓：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.darkthread.net/blog/dapper/&#34;&gt;短小精悍的.NET ORM神器 &amp;ndash; Dapper - 黑暗執行緒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotblogs.com.tw/mrkt/2016/06/10/153606&#34;&gt;另一種資料存取對映處理方式的選擇 - Dapper - mrkt 的程式學習筆記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.huanlintalk.com/2014/03/a-micro-orm-dapper.html&#34;&gt;好用的微型 ORM：Dapper - Huanlin 學習筆記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那麼按照慣例，我們先來 &lt;del&gt;吹捧今天的主角&lt;/del&gt; 說明一點簡單的前因後果吧。想直接實作的朋友，可以跳到&lt;a href=&#34;#%E6%AD%A3%E5%BC%8F%E9%96%8B%E5%B7%A5&#34;&gt;正式開工&lt;/a&gt;的小節呦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>菜雞新訓記 (2): 使用 .net Core 來建立簡單的 Api 吧（上）認識 Api 與建置 Web Api 服務</title>
      <link>https://igouist.github.io/post/2021/05/newbie-2-webapi/</link>
      <pubDate>Sun, 02 May 2021 12:39:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2021/05/newbie-2-webapi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ATcQbMV.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是俺整理公司新訓內容的第二篇文章，目標是&lt;strong&gt;對 Api, Restful Api, HTTP 等相關的知識點做個筆記，並用 .net Core 建立一個簡易的 Web Api 專案&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E5%89%8D%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5&#34;&gt;前言、基本觀念&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E9%97%9C%E6%96%BC-web-api&#34;&gt;關於 Web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E9%97%9C%E6%96%BC-restful-%E8%88%87-http-method&#34;&gt;關於 Restful 與 HTTP Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E9%97%9C%E6%96%BC-http-request-%E5%92%8C-response&#34;&gt;關於 HTTP Request 和 Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E9%97%9C%E6%96%BC-http-status-code&#34;&gt;關於 HTTP Status Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E9%97%9C%E6%96%BC-stateless&#34;&gt;關於 Stateless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E6%AD%A3%E5%BC%8F%E9%96%8B%E5%B7%A5&#34;&gt;正式開工&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E6%96%B0%E5%BB%BA-net-core-web-api-%E5%B0%88%E6%A1%88&#34;&gt;新建 .net Core Web API 專案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E5%8B%95%E6%89%8B%E5%AF%A6%E4%BD%9C-crud&#34;&gt;動手實作 CRUD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E4%B8%AD%E5%A0%B4%E4%BC%91%E6%81%AF&#34;&gt;中場休息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E6%9C%AC%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0&#34;&gt;本系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/05/newbie-2-webapi#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&#34;&gt;參考資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>菜雞新訓記 (1): 使用 Git 來進行版本控制吧</title>
      <link>https://igouist.github.io/post/2021/04/newbie-1-hello-git/</link>
      <pubDate>Mon, 05 Apr 2021 22:39:01 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2021/04/newbie-1-hello-git/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/N54Pg7s.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是俺整理公司新訓內容的第一篇文章，目標是&lt;strong&gt;整理 Git 相關的筆記&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%89%8D%E8%A8%80%E6%8E%A8%E8%96%A6%E8%B3%87%E6%BA%90&#34;&gt;前言、推薦資源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E4%BB%80%E9%BA%BC%E6%98%AF-git&#34;&gt;什麼是 Git？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&#34;&gt;分散式版本控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E7%A2%BA%E8%AA%8D-git-%E5%B7%B2%E7%B6%93%E5%AE%89%E8%A3%9D&#34;&gt;確認 Git 已經安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E6%96%B0%E7%9A%84%E5%84%B2%E5%AD%98%E5%BA%ABinit&#34;&gt;建立一個新的儲存庫（Init）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%8A%A0%E5%85%A5%E8%AE%8A%E6%9B%B4add&#34;&gt;加入變更（Add）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E6%8F%90%E4%BA%A4%E8%AE%8A%E6%9B%B4commit&#34;&gt;提交變更（Commit）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#commit-%E7%9A%84%E8%A8%8A%E6%81%AF&#34;&gt;Commit 的訊息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#commit-%E7%9A%84%E6%99%82%E6%A9%9F&#34;&gt;Commit 的時機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#commit-%E5%92%8C-add-%E7%9A%84-combo-%E6%8A%80&#34;&gt;Commit 和 Add 的 Combo 技&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%8A%A0%E5%85%A5-gitignore-%E5%BF%BD%E7%95%A5%E6%AA%94%E6%A1%88&#34;&gt;加入 .gitignore 忽略檔案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E6%8F%90%E4%BA%A4%E7%B4%80%E9%8C%84log&#34;&gt;提交紀錄（Log）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E7%89%88%E6%9C%AC%E5%B7%AE%E7%95%B0diff&#34;&gt;版本差異（Diff）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E9%97%9C%E6%96%BC-head&#34;&gt;關於 HEAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#revert&#34;&gt;Revert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#reset&#34;&gt;Reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%88%86%E6%94%AFbranch&#34;&gt;分支（Branch）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AFbranch%E8%88%87%E5%88%87%E6%8F%9B%E5%88%86%E6%94%AFcheckout&#34;&gt;新建分支（branch）與切換分支（checkout）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E6%9A%AB%E5%AD%98stach&#34;&gt;暫存（Stach）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%90%88%E4%BD%B5merge&#34;&gt;合併（Merge）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E8%A1%9D%E7%AA%81conflict&#34;&gt;衝突（Conflict）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#rebase&#34;&gt;Rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF%E5%88%97%E8%A1%A8%E5%88%AA%E9%99%A4%E5%88%86%E6%94%AF&#34;&gt;查看分支列表、刪除分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E9%97%9C%E6%96%BC%E6%96%B7%E9%A0%ADdetached-head&#34;&gt;關於斷頭（detached HEAD）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E9%97%9C%E6%96%BC%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5&#34;&gt;關於分支策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E9%81%A0%E7%AB%AF%E5%84%B2%E5%AD%98%E5%BA%ABremote%E6%8E%A8%E9%80%81push&#34;&gt;遠端儲存庫（Remote）、推送（Push）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E6%93%B7%E5%8F%96fatch%E6%8F%90%E5%8F%96pull&#34;&gt;擷取（Fatch）、提取（Pull）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#clone&#34;&gt;Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E9%97%9C%E6%96%BC%E6%8F%90%E5%8F%96%E8%A6%81%E6%B1%82pull-request&#34;&gt;關於提取要求（pull request）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E5%B0%8F%E7%B5%90&#34;&gt;小結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git#%E6%9C%AC%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0&#34;&gt;本系列文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>菜雞新訓記 (0): 前言</title>
      <link>https://igouist.github.io/post/2021/04/newbie-0-menu/</link>
      <pubDate>Mon, 05 Apr 2021 22:39:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2021/04/newbie-0-menu/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qE23LmZ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;長夜將至，我從今開始守望。&lt;br/&gt;
　　　　　　　　　　　　　　　　　　　　　　　　　　　　——《冰與火之歌》守夜人誓詞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;年初整理完物件導向系列後，休息（沉迷遊戲）了好一陣子，終於要繼續整理公司新訓的內容啦！&lt;/p&gt;
&lt;p&gt;因為這個系列會是公司新訓時期的筆記整理，所以會是比較簡易的實作紀錄，並不會太過深入，需要的時候會用延伸閱讀的形式補充上去。如果看文的過程中覺得有什麼能夠補充的，也歡迎告訴我呦。&lt;/p&gt;
&lt;p&gt;本系列預計會從 Git 的基本操作開始，簡單建立一個 Web Api 為主軸，逐步介紹相關的部份，例如簡單地引入套件、簡單地分層等等。基本方針就是直接抄襲&lt;a href=&#34;https://sunnyday0932.github.io/&#34;&gt;隔壁同事的部落格&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;後續有更新的文章，就會整理到這篇目錄中。或是也可以從 &lt;a href=&#34;https://igouist.github.io/series/%E8%8F%9C%E9%9B%9E%E6%96%B0%E8%A8%93%E8%A8%98/&#34;&gt;菜雞新訓記&lt;/a&gt; 裡面做系列文的查詢。&lt;/p&gt;
&lt;p&gt;那麼，就從第一篇：&lt;a href=&#34;https://igouist.github.io/post/2021/04/newbie-1-hello-git&#34;&gt;Git 入門這樣做&lt;/a&gt; 開始吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>菜雞抓蟲: 在 Amazon Linux AMI 安裝 .net Core 時卡在 Requires: openssl-libs</title>
      <link>https://igouist.github.io/post/2020/11/bugs-install-dotnet-core-on-amazon-ami-requires-openssl/</link>
      <pubDate>Sun, 22 Nov 2020 23:40:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/11/bugs-install-dotnet-core-on-amazon-ami-requires-openssl/</guid>
      <description>&lt;p&gt;最近遇到在 Amazon Linux AMI 要安裝 .net Core 3.1 環境的時候，會一直跳出&lt;br/&gt; &lt;code&gt;Requires: openssl-libs&lt;/code&gt; 而無法安裝的問題，儘管明明已經有 openssl 了，但還是解析失敗找不到依賴，過程一直碰壁，因此在這邊紀錄一下。&lt;/p&gt;
&lt;p&gt;過程中嘗試了安裝 openssl-libs（會找不到該套件）、下載 Dotnet 的 tar.gz ，再直接對執行檔下 Dotnet 指令起站台（雖然網站起得來，但執行者會是當下的登入身分，也就是 &amp;lsquo;&#39;@連線進來的IP-伺服器位置，而非由本機執行。後續如果有連線資料庫等檢查權限的地方就很容易出錯）&lt;/p&gt;
&lt;p&gt;最後在 Dotnet Core 的 issue 翻到這篇 &lt;a href=&#34;https://github.com/dotnet/core/issues/930&#34;&gt;Cannot install .NET Core 2.0 on Amazon Linux AMI&lt;/a&gt; 才成功解決。&lt;/p&gt;
&lt;p&gt;首先先將 openssl-libs 的 SPEC 抓下來，然後給 &lt;a href=&#34;http://linux.vbird.org/linux_basic/0520softwaremanager/0520rpmtarball.php&#34;&gt;RPM&lt;/a&gt; 建置一下。這兩句可以參考一下這篇 &lt;a href=&#34;https://medium.com/linux-%E9%96%8B%E7%99%BC%E5%85%A5%E9%96%80/rpm-%E6%89%93%E5%8C%85-%E7%94%B1%E4%B8%80%E7%AB%85%E4%B8%8D%E9%80%9A%E5%88%B0%E5%8B%95%E6%89%8B%E6%BF%AB%E7%94%A8-%E4%BA%8C-df9eea70bd7b&#34;&gt;RPM 打包︰由一竅不通到動手濫用 (二)&lt;/a&gt; 的說明。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://github.com/dotnet/core/files/2186067/openssl-libs-ami.spec.txt
rpmbuild --bb openssl-libs-ami.spec.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>C#: 元組 (Tuple)</title>
      <link>https://igouist.github.io/post/2020/09/csharp-trulp/</link>
      <pubDate>Sun, 27 Sep 2020 23:56:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/09/csharp-trulp/</guid>
      <description>&lt;p&gt;因為隔壁介紹原則的部分有點卡住了，所以這週來紀錄一下挺常用到的方便東西：&lt;strong&gt;Tuple&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這篇的 Tuple 指的是 C# 7.0 後提供的 &lt;strong&gt;ValueTuple&lt;/strong&gt; 和相關語法，舊版得用 &lt;code&gt;Tuple.Create&lt;/code&gt; 建立，成員的名稱也只能使用 Item1, Item2&amp;hellip;，實用性並不是很高。但新 Tuple 出現後，方便程度大大提升，這邊就稍作紀錄一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註：此處使用的 &lt;code&gt;Dump&lt;/code&gt; 是 Linqpad 提供的輸出方法，把它當成 Print 就行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; student = (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;王小明&amp;#34;&lt;/span&gt;);
student.Item1.Dump(); &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;student.Item2.Dump(); &lt;span style=&#34;color:#75715e&#34;&gt;// 王小明
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
student.Dump();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Tuple 的建立相當簡單，只需要用小括號 &lt;code&gt;()&lt;/code&gt; 括選起來即可。建立後的內容就會像這樣：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/H0wJglN.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但這樣使用就和之前一樣，取出來時只能拿 Item1, Item2，放個幾天根本就不記得 Item1 裡面是啥東西了。這時我們就可以&lt;strong&gt;替成員們取名字&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ID, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name) student = (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;王小明&amp;#34;&lt;/span&gt;);
student.ID.Dump(); &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;student.Name.Dump(); &lt;span style=&#34;color:#75715e&#34;&gt;// 王小明
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此使用的時候就和一般操作物件的習慣沒有差別，也增加了可讀性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C#: 時區轉換、民國西元、國曆農曆、中文月份週期</title>
      <link>https://igouist.github.io/post/2020/08/csharp-timezone/</link>
      <pubDate>Sun, 30 Aug 2020 11:58:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/08/csharp-timezone/</guid>
      <description>&lt;p&gt;聊到將時間從 UTC 轉到台灣時間，居然還是聽到朋友表示使用 +8 小時的做法，驚為天人。這種做法可能會造成後續的問題，例如時區並不會跟著變動，或是遇到日光節約等特殊狀況就容易出事。和西元民國轉換直接 -1911 一樣不穩定。&lt;/p&gt;
&lt;p&gt;這篇就用來記錄一下之前看過比較優雅的時區轉換方式，順便將先前存著的時間處理相關資料整理一下，方便之後需要時可以馬上回來查詢。&lt;/p&gt;
&lt;h2 id=&#34;timezoneinfo-時區資訊&#34;&gt;TimeZoneInfo: 時區資訊&lt;/h2&gt;
&lt;p&gt;轉換方式主要參考自 &lt;a href=&#34;https://dotblogs.com.tw/supershowwei/2016/10/17/141620&#34;&gt;[食譜好菜] DateTime 具有文化特性的格式化及時區的轉換&lt;/a&gt; 及 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/dotnet/standard/datetime/converting-between-time-zones&#34;&gt;在各時區間轉換時間&lt;/a&gt;，感謝前人的指引。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 假設現在是要從標準時區 +00:00 轉換到台灣時區，故這邊使用 UtcNow 先取標準世界協調時間
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; nowDateTime = DateTime.UtcNow;

nowDateTime.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy/MM/dd H:mm:ss zzz&amp;#34;&lt;/span&gt;).Dump();
&lt;span style=&#34;color:#75715e&#34;&gt;// 2020/08/30 15:56:05 +00:00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// ==================================================
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 傳統的 直接對時間做計算的方式…
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; addedDateTime = nowDateTime.AddHours(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);

addedDateTime.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy/MM/dd H:mm:ss zzz&amp;#34;&lt;/span&gt;).Dump();
&lt;span style=&#34;color:#75715e&#34;&gt;// 2020/08/30 23:56:05 +00:00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 可以看到儘管時間變動了，時區仍然還在 +00:00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// ==================================================
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 TimeZoneInfo 先取得台北時區
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; timeZone = TimeZoneInfo.FindSystemTimeZoneById(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Taipei Standard Time&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 再使用 TimeZoneInfo 來變更時間
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; convertedDateTime = TimeZoneInfo.ConvertTime(nowDateTime, timeZone);

convertedDateTime.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy/MM/dd H:mm:ss zzz&amp;#34;&lt;/span&gt;).Dump();
&lt;span style=&#34;color:#75715e&#34;&gt;// 2020/08/30 23:56:05 +08:00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 可以看到除了時間變更以外，時區也切換到 +08:00 了！
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面取得台北時區的步驟，可以參照 &lt;a href=&#34;https://docs.microsoft.com/en-us/previous-versions/windows/embedded/gg154758(v=winembedded.80)&#34;&gt;Time Zone IDs&lt;/a&gt; 來查詢想要的時區。這樣的時區切換方式，不僅副作用少，不會因為時區沒轉雷到後續接手的人，也省卻了擔心日光節約等等問題，這種事就交給微軟去煩惱吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C#: 字串插值 (String interpolation) 的格式化</title>
      <link>https://igouist.github.io/post/2020/08/csharp-string-interpolation/</link>
      <pubDate>Sun, 09 Aug 2020 20:35:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/08/csharp-string-interpolation/</guid>
      <description>&lt;p&gt;自從 C# 有了 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/tokens/interpolated&#34;&gt;字串插值&lt;/a&gt; 這東西之後，我就一直是愛用者。畢竟比起 &lt;code&gt;string.format&lt;/code&gt; 這東西可是看起來優雅多了。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; message = &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;哈囉，{userName} 您的點數將於 {cutoffTime} 到期。&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;簡潔又明瞭，一眼就能理解字串內容。實在是挺方便，後來發現這東西還有一些延伸用法，這邊就稍加紀錄一下：&lt;/p&gt;
&lt;p&gt;字串插值中能夠做&lt;strong&gt;簡易計算&lt;/strong&gt;，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; message = &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;您輸入的數值為：{a}、{b}。他們相加為：{a + b}&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同時，在字串插值時可以針對內容作格式化，只需要用 &lt;code&gt;:&lt;/code&gt; 來區隔，妥善運用可以省下一堆 &lt;code&gt;ToString()&lt;/code&gt; 的空間。&lt;/p&gt;
&lt;p&gt;例如當我們要將&lt;strong&gt;時間&lt;/strong&gt;格式化的時候，就可以：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; date = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; message = &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;您的商品已於 {date:yyyy/MM/dd} 抵達。&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// 您的商品已於 2020/08/09 抵達。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，&lt;strong&gt;數值&lt;/strong&gt;當然也可以格式化，不過數值的應用比較複雜，主要是用來定下小數點、百分比等符號的位置。
可以參見 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/dotnet/standard/base-types/custom-numeric-format-strings&#34;&gt;自訂數值格式字串 - Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; cost = &lt;span style=&#34;color:#ae81ff&#34;&gt;2100&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; message1 = &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;您的商品一共是 {cost:#,###} 元&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// 用 # 可以替數字預留位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 您的商品一共是 2,100 元
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; message2 = &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;您的商品一共是 {cost:#,###.00} 元&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// 也可以用 0 來預留位置，若該數字有值就會顯示該數字，沒有就會自動補 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 您的商品一共是 2,100.00 元
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>C#: 使用 System.Environment 取得環境資訊、特殊資料夾路徑</title>
      <link>https://igouist.github.io/post/2020/08/system-environment/</link>
      <pubDate>Sun, 02 Aug 2020 13:31:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/08/system-environment/</guid>
      <description>&lt;p&gt;有時候我們會需要取得一些系統資訊，例如說取得設備和當前使用者等資料來寫 Log，或是取得特殊資料夾路徑、讀取環境變數等等。這些時候就可以使用 &lt;code&gt;System.Environment&lt;/code&gt; ，這邊就稍微紀錄一下用法。&lt;/p&gt;
&lt;p&gt;先列出幾個常用的&lt;strong&gt;環境資訊&lt;/strong&gt;，詳細可查詢的內容可以到 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/dotnet/api/system.environment?view=netcore-3.1&#34;&gt;Environment Class&lt;/a&gt; 查詢：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8L67T46.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;資料夾路徑&lt;/strong&gt;則需要用 &lt;code&gt;Environment.GetFolderPath&lt;/code&gt; 搭配 &lt;code&gt;Environment.SpecialFolder&lt;/code&gt; 列舉使用，該列舉包含資料夾可以到 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/dotnet/api/system.environment.specialfolder?view=netcore-3.1&#34;&gt;Environment.SpecialFolder Enum&lt;/a&gt; 查詢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/aOQ30KB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C#: 程式碼風格備忘</title>
      <link>https://igouist.github.io/post/2020/07/code-style/</link>
      <pubDate>Sat, 25 Jul 2020 00:16:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/07/code-style/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;前言：本篇是整理公司規範和網路文章後，方便我自己在各個場所也能回來查閱使用的，故仍會不定時修改（畢竟我這人挺三心二意的）。另外本篇有重新調整過行距，發現有點跑版的朋友可以先 Ctrl+F5 一下，感謝閱讀。&lt;/p&gt;
&lt;p&gt;如果你想知道的是如何寫出更優雅、更乾淨、品質更高的程式碼，那並不是該看這篇我個人的備忘錄，我會建議可以閱讀&lt;a href=&#34;https://www.tenlong.com.tw/products/9789862017050?list_name=e-106&#34;&gt;《無暇的程式碼》&lt;/a&gt;。或是可以參考這幾篇，我覺得都寫得很好：&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20107637/ironman/1927&#34;&gt;可不可以不要寫糙 code&lt;/a&gt;、&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20107637/ironman/1927&#34;&gt;Clean Code 無瑕的程式碼閱讀筆記&lt;/a&gt;、&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20112160/ironman/1988&#34;&gt;易讀程式之美學&lt;/a&gt;，共勉之。&lt;/p&gt;
&lt;p&gt;如果你是正巧路過並且也寫 C#，希望這篇能讓你做為參考。但請記得，程式碼風格沒有絕對，最終還是回歸到團隊能否接受和將來的可維護性去考慮，畢竟教條是死的，人是活的。了解這樣做背後的原因，以及為自己寫的程式碼負責，這些都比對著隻字片語斤斤計較更加重要。&lt;/p&gt;
&lt;p&gt;Nothing is true, everything is permitted. —— Assassin&amp;rsquo;s creed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;命名原則&#34;&gt;命名原則&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;想像下一個接手你程式碼的人是個暴力傾向的重度精神病患者&lt;/p&gt;
&lt;p&gt;而且他知道你住在哪。　　—— 《無瑕的程式碼》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;有意義的命名&lt;/strong&gt;，請重視描述性。除了迴圈計數器例外&lt;/li&gt;
&lt;li&gt;盡量不要超過五個單字&lt;/li&gt;
&lt;li&gt;業界和慣例中有對應縮寫時可以使用縮寫&lt;/li&gt;
&lt;li&gt;承上，縮寫兩個字母時全大寫，三個字母以上時只第一字大寫&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命名空間&#34;&gt;命名空間&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基礎類別庫：{組織} . {大類/應用範圍} . {小類/專案名稱}
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyStudio.Libs.Basic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyStudio.Libs.Web.BaseTools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專案類別庫：{專案名稱} . {子專案/類別/用途}
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyProject.Permiss.Proxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyProject.Permiss.Repository&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>AutoMapper —— 類別轉換超省力</title>
      <link>https://igouist.github.io/post/2020/07/automapper/</link>
      <pubDate>Sun, 05 Jul 2020 23:40:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/07/automapper/</guid>
      <description>&lt;p&gt;類別間的轉換幾乎是每個專案每個工程師都會碰到的動作，舉凡是分層架構每層之間的轉換，如 Dto 轉換成 ViewModel；或是接收到資料要塞進自定義的類別時也需要進行轉換。但&lt;strong&gt;在遠古時代，當我們要把一個類別的資料倒進另一個類別時，總免不了一番折騰&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如一個卡片對戰遊戲的資料庫，光是要先把卡片資料讀取出來就需要：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/c81Hx5I.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有些時候也會看見用 Foreach 然後逐一傳值的場景，或是各種差不多的變種情況。同樣的是，光是將一個簡單的卡片資訊轉換成 ViewModel，就花了一大段在做對映的處理。這個過程本身枯燥乏味又占空間，更可怕的是，&lt;strong&gt;如果有個陳年資料表，動不動就上百個欄位，那這個轉換過程的恐怖程度可想而知&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;幸好！天無絕人之路，這種時候就是本日的主角 —— AutoMapper 出場的時候了。&lt;/p&gt;
&lt;p&gt;當 AutoMapper 一出手，轉換的過程瞬間就變成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KxHAKpi.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;是不是精簡很多呢？接著就讓我們來看看怎麼開始使用吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electron.net —— 把網頁包成桌面應用吧</title>
      <link>https://igouist.github.io/post/2020/06/electron-net/</link>
      <pubDate>Sun, 28 Jun 2020 19:41:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/06/electron-net/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/ElectronNET/Electron.NET/raw/master/assets/images/electron.net-logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;因緣際會下想要弄出一些單機小工具來跑，這時候正巧接觸到 &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET&#34;&gt;Electron.net&lt;/a&gt; 這個神器，特別紀錄一下以免忘記。這是 &lt;a href=&#34;https://www.electronjs.org/&#34;&gt;Electron&lt;/a&gt; 搭配 .net Core 的框架， &lt;strong&gt;Electron 是用 Chromium 和 Node.js 將網頁封裝成桌面應用程式&lt;/strong&gt;，像是 Visual Studio Code、Slack 也都有使用到 Electron。而 &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET&#34;&gt;Electron.net&lt;/a&gt; 顧名思義就是 .net 用的 Electron 框架囉。&lt;/p&gt;
&lt;p&gt;這邊記錄一下自己嘗試時載入套件和建置的流程，主要參考自黑大的 &lt;a href=&#34;https://blog.darkthread.net/blog/electron-net/&#34;&gt;用 ASP.NET Core 寫桌面 GUI 應用程式 - Electron.NET&lt;/a&gt; 和 &lt;a href=&#34;https://blog.darkthread.net/blog/electron-api-brief/&#34;&gt;Electron.NET API 快速巡覽&lt;/a&gt; 這兩篇文章，以及官方的 &lt;a href=&#34;https://github.com/ElectronNET/electron.net-api-demos&#34;&gt;API DEMO&lt;/a&gt;，特此感謝。&lt;/p&gt;
&lt;p&gt;本篇小節：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AE%89%E8%A3%9D%E5%A5%97%E4%BB%B6%E5%8F%8A%E7%92%B0%E5%A2%83%E8%A8%AD%E7%BD%AE&#34;&gt;安裝套件及環境設置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%89%8D%E5%BE%8C%E7%AB%AF%E5%82%B3%E5%80%BC-ipcmain-ipcrenderer&#34;&gt;前後端傳值 (IpcMain, IpcRenderer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%89%93%E5%8C%85%E6%88%90%E5%9F%B7%E8%A1%8C%E6%AA%94exe&#34;&gt;打包成執行檔（.exe）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%BE%8C%E8%A8%98&#34;&gt;後記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&#34;&gt;參考資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>C#: 位元旗標 (Bit flag) 與列舉</title>
      <link>https://igouist.github.io/post/2020/06/bit-flags-and-enum/</link>
      <pubDate>Sun, 14 Jun 2020 21:27:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/06/bit-flags-and-enum/</guid>
      <description>&lt;p&gt;前陣子碰到個資料表儲存方式，因為這種位元運算的方式也常用在權限管理等地方，這邊就順手紀錄一下。&lt;/p&gt;
&lt;p&gt;平常遇到二元的情形（例如 開／關、有／沒有），我們會直接宣告個 Boolean 來處理。但這次遇到的是同時有多個「有／沒有」的狀況，但我遇到的程式碼並沒有分成多個 Bool 去做處理，而是直接儲存成一個數值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由於「有／沒有」只佔據一個位元，那麼將多個狀況按照位元順序排列的話，就只需要一個數字就可以紀錄或傳遞給其他系統了&lt;/strong&gt;。例如最常見的用處是在權限系統，若有「讀」、「寫」、「執行」等權限，那麼我們按照這個順序去排列，當 &lt;code&gt;讀＝可、寫＝不可、執行＝可&lt;/code&gt; 的時候，就記做 &lt;code&gt;101&lt;/code&gt; = &lt;code&gt;5&lt;/code&gt;。這種直接用一組位元表示狀態的方式就叫做&lt;strong&gt;位元旗標（Bit flag）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 讀   = 可
0 寫   = 不可
1 執行 = 可

/* 橫放 */
=&amp;gt; 101 (2進位) 
=&amp;gt; 5 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假使某天老闆靈光一現，決定接下來的新人員工都要記錄他們會的程式語言，並且他們報到的時候就會發一張公司列好的程式語言清單請他們勾選。&lt;/p&gt;
&lt;p&gt;在 C# 中已經有方便的工具可以處理數字列表，我們可以建立一個叫做 SkillEnum 的&lt;strong&gt;列舉（Enum）&lt;/strong&gt;，並且按照上面說明的，將老闆提到的每個技能各自用一個位元來表示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Flags]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; SkillEnum
{
    C = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,     &lt;span style=&#34;color:#75715e&#34;&gt;// 0001
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    PHP = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,   &lt;span style=&#34;color:#75715e&#34;&gt;// 0010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    SQL = &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,   &lt;span style=&#34;color:#75715e&#34;&gt;// 0100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Java = &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;// 1000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;註：&lt;code&gt;[Flags]&lt;/code&gt;的標籤是指 C# 專門提供給位元旗標使用的 Enum，請參見 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/dotnet/api/system.flagsattribute?view=netcore-3.1&#34;&gt;FlagsAttribute&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;只要在 enum 上加上 Flags 的屬性，除了自動按照 2 的次元增加以外，在使用 ToString() 也能更方便看見旗標內容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了這個列舉之後，我們就可以&lt;strong&gt;表達不同排列組合的狀況&lt;/strong&gt;了。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* C: C
* P: PHP
* S: SQL
* J: Java
===========
J S P C
0 0 0 0 =&amp;gt; 什麼都不會
0 0 0 1 =&amp;gt; 只會 C
0 0 1 1 =&amp;gt; 同時會 C 和 PHP
1 0 1 0 =&amp;gt; 同時 PHP 和 Java
1 1 1 1 =&amp;gt; 全部都會
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>EPPlus —— 輕鬆處理 Excel</title>
      <link>https://igouist.github.io/post/2020/04/epplus/</link>
      <pubDate>Sun, 12 Apr 2020 10:19:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2020/04/epplus/</guid>
      <description>&lt;p&gt;前陣子工作需要匯出一些資料表，因此用到了 &lt;a href=&#34;https://github.com/EPPlusSoftware/EPPlus&#34;&gt;EPPlus&lt;/a&gt; 這套工具來把資料匯出成 Excel。由於這需求似乎會挺常遇到的，決定記一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目標：稍微紀錄一下這次碰到 EPPlus 的用法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;EPPlus 是在 .NET Framework 或 .NET Core 上提供控制 Excel 的元件，操作簡單好懂&lt;/strong&gt;，當有需要在網頁上讓人將表格資料下載成 Excel 的功能時就可以試著使用。常常一併被提起的還有另一個一樣老牌的相似功能元件 NPOI，不過我個人只用過 EPPlus 便不再贅述。關於更詳細的介紹，可以參閱黑暗執行緒的這篇 &lt;a href=&#34;https://blog.darkthread.net/blog/epplus/&#34;&gt;比 NPOI 更討喜的 Excel 元件 - EPPlus!&lt;/a&gt;，儘管是有些久遠的文章但仍能迅速了解 EEplus 的賣點和差異。&lt;/p&gt;
&lt;p&gt;我在使用 EPPlus 時主要的參考來自於 &lt;a href=&#34;https://github.com/EPPlusSoftware/EPPlus/wiki&#34;&gt;EPPlus 的 Wiki&lt;/a&gt;，每個功能都有說明及範例，同時也有範例專案可以下載，寫得相當詳細。另外還找了如 &lt;a href=&#34;https://www.cnblogs.com/rumeng/p/3785748.html&#34;&gt;導出 Excel 之 Epplus 使用教程 - Wico&amp;rsquo;s Blog&lt;/a&gt;、&lt;a href=&#34;https://dotblogs.com.tw/malonestudyrecord/2018/03/21/103124&#34;&gt;使用 EPPLUS 操控 Excel - 碼農的學習日誌&lt;/a&gt; 這些有逐步說明的文章，在此感謝。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Asp.net MVC: 連線資料庫、簡單實作 CRUD</title>
      <link>https://igouist.github.io/post/2019/12/aspnet-connect-db/</link>
      <pubDate>Mon, 09 Dec 2019 00:09:09 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2019/12/aspnet-connect-db/</guid>
      <description>&lt;p&gt;在教學時直接使用 EF 對資料庫跑繫結的方式產生各頁面，但得到了「點一點東西就跑出來了搞不懂呀」的回饋，心想有道理。因此從頭開始實作一遍，並記錄下來。&lt;s&gt;（雖然做完還是覺得，直接用 EF 跑的話果然比較安全方便啊）&lt;/s&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目標：&lt;strong&gt;實作一個 MVC 架構，具資料庫基本操作功能的網站&lt;/strong&gt;，其中包含連線至資料庫的 model、對其進行調用的 controller 以及顯示的 view。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;註：本文預設已在本地電腦上安裝了 &lt;a href=&#34;https://www.microsoft.com/zh-tw/sql-server/sql-server-editions-express&#34;&gt;SQL Server&lt;/a&gt;，並且建立了測試用的資料庫 Test 及表 card，詳情會在文章內述。另外，由於在寫這邊的時候是為了練習手動從編碼開始嘗試連線，故將不使用 &lt;a href=&#34;https://docs.microsoft.com/zh-tw/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application&#34;&gt;EF 連線產生 Edmx&lt;/a&gt; 的方式，而是直接手工編寫程式碼進行操作。&lt;/p&gt;
&lt;p&gt;另外，關於直接從資料表自動產生可操作的頁面，亦即使用 Entity Framework 做資料繫結的方式，請見 &lt;a href=&#34;https://igouist.github.io/post/2019/12/aspnet-connect-db-ef/&#34;&gt;Asp.net MVC 筆記：Entity Framework 連線資料庫&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Asp.net MVC: Entity Framework 連線資料庫</title>
      <link>https://igouist.github.io/post/2019/12/aspnet-connect-db-ef/</link>
      <pubDate>Mon, 09 Dec 2019 00:09:08 +0800</pubDate>
      
      <guid>https://igouist.github.io/post/2019/12/aspnet-connect-db-ef/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;目標：將 &lt;a href=&#34;https://igouist.github.io/post/2019/12/aspnet-connect-db/&#34;&gt;上一篇的 Asp.net MVC：連線資料庫、簡單實作 CRUD&lt;/a&gt; 的資料庫基礎功能改成以 &lt;strong&gt;Entity Framework&lt;/strong&gt; 產生的方式跑一遍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然上一篇介紹了土法煉鋼動手做的資料庫取值方式，就覺得不順手把從 EF 建立出基本功能介面的方式記錄下來似乎是有點奇怪。實際上開始寫成筆記之後才發現對內容尚不是很了解，例如一直用 Data First 產生頁面但對 Code First 以程式碼產生架構的方式很不熟。儘管如此仍稍微紀錄一下，之後有更深的了解（例如 ASP.NET Identity 或 Code First 等部分）再進一步做成筆記。另外也可參考較詳細的&lt;a href=&#34;https://docs.microsoft.com/zh-tw/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application&#34;&gt;官方文檔&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
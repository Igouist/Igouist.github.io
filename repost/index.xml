<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reposts on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/repost/</link>
    <description>Recent content in Reposts on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <lastBuildDate>Thu, 01 Feb 2024 23:01:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/repost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2/1 - 大規模專案變慢的原因</title>
      <link>https://igouist.github.io/repost/2024/02/0201-development-slowness-in-big-and-legacy-applications/</link>
      <pubDate>Thu, 01 Feb 2024 23:01:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/02/0201-development-slowness-in-big-and-legacy-applications/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kMetnjB.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天朋友拋了一篇文章過來，覺得不錯所以整理一下轉貼上來：&lt;br/&gt;
&lt;a href=&#34;https://michaelscodingspot.com/slow-development-in-big-companies/&#34;&gt;Development slowness in big and legacy applications [and how to hurry it up]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章整理了一些作者觀察到大規模老舊專案（或是大公司）之所以變「慢」的原因，一口氣列了八項，這邊也稍微貼過來給各位朋朋：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複雜度&lt;/li&gt;
&lt;li&gt;跨團隊溝通&lt;/li&gt;
&lt;li&gt;安全與隱私&lt;/li&gt;
&lt;li&gt;程式碼標準&lt;/li&gt;
&lt;li&gt;開會&lt;/li&gt;
&lt;li&gt;金絲雀帶來的麻煩&lt;/li&gt;
&lt;li&gt;數據驅動決策&lt;/li&gt;
&lt;li&gt;花在開發的時間變少&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接著我們也簡單看過每一項的內容。首先是複雜度，有很多可能會發生的問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沒有人熟悉這個產品&lt;/strong&gt;（有太多的功能或細節，沒有人能夠全面了解，就容易出錯）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;複雜的架構和抽象化&lt;/strong&gt;（持續堆疊功能從不重構，直到專案變成一團混亂）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客製化的建置和自動化&lt;/strong&gt;（雖然應該是自動化的，但實務上常常會需要調整，導致菜鳥需要花更多時間了解）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具過剩&lt;/strong&gt;（大量的內部工具，例如自製測試小工具。導致菜鳥要上手的時間變得更長，還需要額外維護）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;衝突&lt;/strong&gt;（越多人做同個專案，就會有越多衝突要解，越多的內容要溝通，產生更多的延遲）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建置時間&lt;/strong&gt;（專案越大，就跑得越久。而且相關優化的優先度通常都不高）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;針對以上問題，作者也提出一些可能的解決方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配一些資深人員專門處理建置優化、內部工具和持續整合等 DX （使用者體驗）部分&lt;/li&gt;
&lt;li&gt;把內部工具當成公開工具（產品）一樣地維護&lt;/li&gt;
&lt;li&gt;建立菜鳥入職流程和文件，幫助他們上手&lt;/li&gt;
&lt;li&gt;不要忽視技術債，合理地安排重構還債&lt;/li&gt;
&lt;li&gt;讓工程師去參加一些黑客松或創意週之類的&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;除了複雜度的篇幅比較長以外，其他七項相對就短一點。這邊就整合在一起（我就不需要再開一張卡片，哈）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨團隊溝通&lt;/strong&gt;
現在的大公司常常會有全球工程師分批進行維護，導致溝通時間也會因為時差被拉長。這時候就可以限制負責同個功能的團隊所在位置（例如把某功能的工程師集中放在某兩個區域，美國或印度之類的）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全與隱私&lt;/strong&gt;
為了保證符合資安和隱私規範，需要等待很多審查時間。這時候可以聘請一位資安相關的專業人員負責，並且盡可能簡化審查流程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程式碼標準&lt;/strong&gt;
使用靜態程式碼分析工具，例如 JavaScript 的 ESLint 或 C# 的 StyleCop（沒有用過，過幾天再來研究）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;開會、開會、開會&lt;/strong&gt;
設定議程、限定會議時間、只邀請必要的參與者、事先發送會議文件、事後發送會議摘要&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;金絲雀ㄟ麻煩&lt;/strong&gt;
現在常會看到先給小部分使用者使用新功能，OK 之後再增加使用者數量。但逐步增加使用者數量 = 花更多的時間，雖然使用 feature flags 可以緩解（切換速度變快，不用等重新上板），但作者唯一解是同時推進多項工作 QQ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;數據驅動的決策&lt;/strong&gt;
小公司可以冒險，但大公司的決策通常需要看到數字才能進行，例如提出 A/B 測試，並且有成效說服上層之後才可以繼續推。這一項作者沒有提出解決方案…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;花在工作的時間變少&lt;/strong&gt;
員工必須要參加團隊活動、全體會議、培訓、1 on 1 之類的，累積起來佔用了許多時間。這一項也沒有提出處理方式，可能無法迴避&lt;/p&gt;
&lt;p&gt;以上人工簡短地整理了文章提到的內容，但每一項作者都有用兩三段來說明他觀察到的部份，有興趣的朋友推薦可以閱讀一下，然後想想自己家有沒有遇到相似的狀況，又是怎麼解決的（或可以怎麼解決？）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/31 - reCAPTCHA 強制升級</title>
      <link>https://igouist.github.io/repost/2024/01/0131-recaptcha-enterprise/</link>
      <pubDate>Wed, 31 Jan 2024 22:31:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0131-recaptcha-enterprise/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/j7hqWq8.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;雖然我家沒有插 reCAPTCHA，不過今天看報紙的時候看到這則訊息，決定還是先轉貼上來，有用到的朋友就可以參考一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.user.today/google-recaptcha-enterprise/&#34;&gt;Google reCAPTCHA 暴改收費政策，強制升級 Enterprise 版本，用量太大要付費 – 要改的地方太多了，那就改天吧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這篇文章裡面提供了免費仔該做的動作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先檢查用量有沒有超過 100 萬（注意是整個帳戶一起算）&lt;/li&gt;
&lt;li&gt;什麼情況下可以舒服地升級&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及轉移之後的 reCAPTCHA Enterprise 有哪些新功能（檢查使用者密碼有沒有外洩這條挺微妙的）、部份 API 的改動等等&lt;/p&gt;
&lt;p&gt;最後也提供了其他替代服務，例如 hCaptcha、Cloudflare Turnstile&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/30 - 中英文之間要加空格</title>
      <link>https://igouist.github.io/repost/2024/01/0130-chinese-copywriting-guidelines/</link>
      <pubDate>Tue, 30 Jan 2024 22:35:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0130-chinese-copywriting-guidelines/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Zw4AUyu.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天忙了一天，按照慣例(?)就是該分享一些有趣的東西水過去了：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sparanoid/chinese-copywriting-guidelines&#34;&gt;中文文案排版指北 (Github)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。&lt;/p&gt;
&lt;p&gt;與大家共勉之。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以後誰中文和英文之間沒加空格，記得把這篇甩在他臉上&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/29 - 玫瑰種子</title>
      <link>https://igouist.github.io/repost/2024/01/0129-rose-seed/</link>
      <pubDate>Mon, 29 Jan 2024 10:48:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0129-rose-seed/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uqZvAID.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;禮拜一不想上班，決定繼續消化收件閘當個薪水小偷。今天看到一篇持續創作和自我懷疑的心得文章，其中一段讓我頗有共鳴，決定轉貼上來：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hyuanverse.com/how-to-deal-with-self-judgement/&#34;&gt;當我覺得自己做的很爛時，我會做些什麼？ - hyuanverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jamesclear.com/self-judgment&#34;&gt;原文：What I Do When it Feels Like My Work Isn’t Good Enough&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在公開分享我的作品幾個月後，事情開始有了變化。&lt;/p&gt;
&lt;p&gt;隨著我開始有了第一位受眾，我注意到我開始評估我的產出。起初，我只是很開心的把我的想法寫下來，但現在我會希望他們都是「好的想法」。我開始拿新的文章跟那些最熱門的文章比較。我不斷地用心中那把「好壞尺」來衡量我所寫的一切——即使我不知道那究竟是什麼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這讓我想到我們在 1/22 分享的「&lt;a href=&#34;https://igouist.github.io/repost/2024/01/0122-learn-in-public-with-blog/&#34;&gt;公開學習與部落格&lt;/a&gt;」裡面的心魔。而這篇的作者最後也成功跨過了心魔：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;幸好，我並沒有讓自我懷疑阻止自己的腳步。我把這視為任何一位持之以恆的創作者都會遇到的創作歷程。我告訴自己，批評和自我懷疑只是一個在「創造好內容」這條旅途上持續前行的過路費。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而作者在閱讀《比賽，從心開始》的時候，其中一段讓他重新思考了上面的心魔，也是這段讓我決定今天分享這一篇：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當我們把一個玫瑰種子埋在土裡時，我們知道它還很小，我們不會批評它怎麼還沒有長出根和莖。我們把它當作一顆種子來看待，提供它作為一個種子所需要的水和養分。&lt;/p&gt;
&lt;p&gt;當它逐漸破土而出，我們不會為它冠上不成熟或發育不全的罪名，也不會因為還沒有發芽而批評它。我們會為它正在發生的成長感到驚嘆，並且在每個成長階段中提供它需要的所有照顧。&lt;/p&gt;
&lt;p&gt;從它還是顆種子到它凋謝，這株玫瑰一直都是它自己。在成長過程裡，它永遠都蘊含著完整的潛力。它看起來隨時都在變化，然而在每一個階段，在每一個瞬間，它都是完美無瑕的，如同它所是的那樣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當作者再度覺得自己「做得很爛」、陷入批判自己的陷阱裡時，他就會告訴自己：&lt;strong&gt;每一個結果都只不過是「重複光譜」上的一個點&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/28 - 三次原則（Rule Of Three principle）</title>
      <link>https://igouist.github.io/repost/2024/01/0128-rule-of-three-principle/</link>
      <pubDate>Sun, 28 Jan 2024 23:01:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0128-rule-of-three-principle/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/g0RQCyX.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天躺了大半天，沒有繼續消化收件閘的文章，決定簡單轉貼一下之前看到的〈三次原則〉文章：&lt;br/&gt;
&lt;a href=&#34;https://shawnlin0201.github.io/Methodology/Methodology-004-Rule-Of-Three-principle/&#34;&gt;程式設計心法 三次原則（Rule Of Three principle） - 璇之又璇的網路世界&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們都知道程式碼整天複製貼上、散得到處都是會變得很難維護，所以我們需要把重複的程式碼抽象出來&lt;/p&gt;
&lt;p&gt;但如果太早就進行優化，又很容易陷入過度設計，替未來的開發加上一些根本不必要的約束和成本&lt;/p&gt;
&lt;p&gt;那麼我們到底什麼時候可以動手重構，把重複的程式碼抽出來呢？這時候就可以參考三次原則：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Three strikes and you refactor&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>1/27 - 「選擇最合適的技術」，而不是「選擇我最熟的技術」</title>
      <link>https://igouist.github.io/repost/2024/01/0127-choose-the-most-suitable-technology/</link>
      <pubDate>Sat, 27 Jan 2024 15:26:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0127-choose-the-most-suitable-technology/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7Q5CrtK.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;昨天的轉貼有提到「正確」和「適合」這件事，決定轉貼一下前幾天滑到的推文：&lt;br/&gt;
&lt;a href=&#34;https://twitter.com/iamshaynez/status/1748606845760262333&#34;&gt;和年轻朋友聊天的总结 (Part. 1) - Xiaowen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中有一段我覺得很不錯：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同一個技術棧，在不同的行業，不同的場景里，可能有完全不同的工程形態，技術生態。&lt;/p&gt;
&lt;p&gt;理解業務，才能讓自己橫向的去比較技術在行業里的不同，更立體的建立自己對技術的理解，未來真的需要你做技術選型，架構決策的時候，你的出發點才能是：&lt;strong&gt;「選擇最合適的技術」，而不是「選擇我最熟的技術」&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為我是個懶惰的人，因此在決定要怎麼解決某個需求的時候，很自然就會選擇已經熟悉慣用的方法&lt;/p&gt;
&lt;p&gt;所以看到上面的『「選擇最合適的技術」，而不是「選擇我最熟的技術」』這句話，有種敲響警鈴的感覺&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/26 - Git 分支策略有「正確」選擇嗎？</title>
      <link>https://igouist.github.io/repost/2024/01/0126-is-git-flow-right/</link>
      <pubDate>Fri, 26 Jan 2024 11:38:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0126-is-git-flow-right/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/V4gyKez.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天持續消化訂閱箱的文章，看到一則標題蠻有興趣的，也轉貼上來給大家：&lt;br/&gt;
&lt;a href=&#34;https://studyhost.blogspot.com/2024/01/git.html&#34;&gt;Git 版控到底有沒有正確的用法? - .Net Walker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章中，作者大大先從 Git Flow 大爆發(?) 的歷史背景提起：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git 的使用，一般來說，有爭議或選擇的是兩個部分：Repo 大小的分割 (專案顆粒度)，以及 git working flow…&lt;/p&gt;
&lt;p&gt;拿 git working flow來說，如果是早年的 Git 使用者，多半選擇 git flow，那是有當年時空背景因素的。&lt;/p&gt;
&lt;p&gt;Git 發展初期，需求是開源專案，開發人員可能並不在同一個辦公室協作，常有跨國合作的需求，當時網路狀況也不像現在品質那麼好，那時分支的建立就相當多且頻繁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但馬上就帶到現在常用的開發狀況，以及持續整合的部份：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近幾年，&lt;strong&gt;我們是不建議切出具有 長生命週期 且 數量多的分支的，因為分支本身就是一種程式碼隱藏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Continuous Delivery 的作者 Dave Farley 就說過， 從頻繁交付的角度來看，具有長生命週期且多分支的 git flow 是個不好的選擇: &lt;a href=&#34;https://www.youtube.com/watch?v=_w6TwnLCFwA&#34;&gt;https://www.youtube.com/watch?v=_w6TwnLCFwA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以，如果要實踐敏捷的頻繁交付 (一周數次，一天數次) 那我會建議 git 分支數量愈少愈好，分支生命周期愈短愈好，以便能有利於持續整合，實現頻繁交付&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你想實踐真正的持續整合(CI)，就要盡可能地減少不力於頻繁整合的程式碼隱藏&lt;/strong&gt;，而分支，毫無疑問是一種程式碼隱藏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這邊讓我學習到一件事：&lt;strong&gt;分支也是一種程式碼隱藏&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/25 - 開發人員該如何看待 AI 帶來的改變</title>
      <link>https://igouist.github.io/repost/2024/01/0125-programmer-with-ai/</link>
      <pubDate>Thu, 25 Jan 2024 10:25:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0125-programmer-with-ai/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YHZ80vX.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;上班第二天終於有心情來消化一下訂閱箱裡面的文章，結果看到一篇德魯大大的文驚為天人，馬上轉貼上來：&lt;a href=&#34;https://columns.chicken-house.net/2024/01/15/archview-llm/#4-2-api-%E7%9A%84%E8%A8%AD%E8%A8%88%E5%BF%85%E9%A0%88%E7%B2%BE%E6%BA%96%E5%90%88%E7%90%86&#34;&gt;[架構師觀點] 開發人員該如何看待 AI 帶來的改變?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在這篇文章裡，德魯直接拿 API 給 GPTs 作一個訂單 BOT。除了一般的查詢商品和下訂單以外，還嘗試在對話中刁難它、叫它推理出某項商品有折扣，或是整理歷史訂單之類的。而 GPTs 雖然偶有瑕疵，但還是達成了任務。&lt;/p&gt;
&lt;p&gt;前半段的實作和 Demo 頂多讓我覺得：「GPTs 有點香ㄟ」，但後半篇的火力更是讓我驚訝。&lt;/p&gt;
&lt;p&gt;從 GPTs 的測試，德魯大大延伸了 API 的設計和德魯覺得後續開發人員該做什麼等議題。例如說 API 的設計將比以前都更講究合理可讀，因為：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;未來的 API 會越來越重要，服務不再是 UI first, 而是 API First…&lt;/p&gt;
&lt;p&gt;因為，掛上 LLM 後的 API ( Plugins ), 呼叫你 API 的不再是其他開發者了, 會變成 AI 來呼叫你的 API。你已經無法 “預測” 或是 “約束” 對方該怎麼呼叫。這時你只剩兩條路可以選擇，一個是把你的 API 設計的合情合理，完全符合現實世界的運作邏輯 (就是我常講的 OOP 精神: 模擬世界 加以處理)，你只要用 Prompt 就足以交代 AI 該怎麼使用 API。&lt;/p&gt;
&lt;p&gt;另一個就是把你的 API 做到邏輯無懈可擊，滴水不漏。不論 AI 用什麼順序呼叫，傳遞什麼參數給你，都不會發生意料之外的結果。這個非常吃嚴謹的設計，我曾在 API First 不斷強調 “有限” 狀態機的重要性，就是預防這種錯誤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;我先前從沒想過 API 在未來很可能是由 AI 來呼叫&lt;/strong&gt;，我很可能不能再走去串接對象的座位旁邊，拍拍他的肩膀跟他說「你就給我這樣打，懂？」&lt;/p&gt;
&lt;p&gt;這強迫了我的 API 畢竟設計得更乾淨，以避免 AI 「誤會」我的意思。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/24 - JokeKappa</title>
      <link>https://igouist.github.io/repost/2024/01/0124-joke-kappa/</link>
      <pubDate>Wed, 24 Jan 2024 12:02:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0124-joke-kappa/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/PzpD7t8.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;放了四天假回來上班，不到十點就已經想下班了。決定今天分享一些有趣的：&lt;br/&gt;
&lt;a href=&#34;https://github.com/CodeTengu/jokekappa&#34;&gt;CodeTengu / JokeKappa - Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這是碼天狗週刊朋朋整理的笑話集，笑話文本在 &lt;code&gt;jokekappa/jokes&lt;/code&gt;
&lt;a href=&#34;https://github.com/CodeTengu/JokeKappa/tree/master/jokekappa/jokes&#34;&gt;jokes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;建議可以從 &lt;code&gt;others.json&lt;/code&gt; 和 &lt;code&gt;pyjokes.json&lt;/code&gt; 開始觀賞，內容大概像這樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我想大部分人都知道通常一名工程師會具有的美德；當然了，有三種：懶惰、暴躁、傲慢&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Larry Wall&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;寫程式時要保持這種心態：就好像將來要維護你這些程式的人是一位殘暴的精神病患者，而且他知道你住在哪&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Martin Golding&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;一個人寫的爛軟體將會給另一個人帶來一份全職工作&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jessica Gaston&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;如果建築工人像工程師寫軟體那樣蓋房子，那第一隻飛來的啄木鳥就能毀掉人類文明&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gerald Weinberg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;決定今天整天就看著笑話度過了，薪水偷起來，嘻嘻。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/23 - UI 設計與完形心理學</title>
      <link>https://igouist.github.io/repost/2024/01/0123-gestalttheorie/</link>
      <pubDate>Tue, 23 Jan 2024 13:24:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0123-gestalttheorie/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xwD9Ue5.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天認識到了一個新東東：&lt;strong&gt;完形心理學&lt;/strong&gt;（又稱格式塔心理學），馬上把相關文章丟上來分享給大家：&lt;br/&gt;
&lt;a href=&#34;https://medium.com/as-a-product-designer/%E7%94%A8-%E5%AE%8C%E5%BD%A2%E5%BF%83%E7%90%86%E5%AD%B8-%E5%A2%9E%E5%8A%A0%E4%BB%8B%E9%9D%A2%E8%A8%AD%E8%A8%88%E6%9C%89%E6%84%9F%E5%BA%A6-2fa0018b906e&#34;&gt;用「完形心理學」，增加介面設計有感度 - Seal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;格式塔心理學（=完形心理學）認為我們看到某些東西的時候是「整體大於個體的總合」的。&lt;/p&gt;
&lt;p&gt;像是當我們在做色盲測驗時，&lt;strong&gt;紙上面明明印著許多不同顏色的圓圈，但我們卻能將同一個顏色的圓圈視作一個「整體」，進而看出一個數字&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;剛剛滑推特的時候，收到這篇 &lt;a href=&#34;https://zonble.medium.com/%E6%9C%89%E6%99%82%E8%A6%BA%E5%BE%97%E5%AF%AB-layout-%E5%B0%B1%E6%98%AF%E4%B8%80%E5%80%8B%E8%B7%9F%E6%A0%BC%E5%BC%8F%E5%A1%94%E5%BF%83%E7%90%86%E5%B0%8D%E6%8A%97%E7%9A%84%E9%81%8E%E7%A8%8B-c8db935aad59&#34;&gt;有時覺得寫 layout 就是一個跟格式塔心理對抗的過程&lt;/a&gt; ，裡面聊了一些切版時的盲區，並且提到了「格式塔心理學」這個詞。&lt;/p&gt;
&lt;p&gt;順著這個名詞，找到了上面推薦給大家的那篇文章。作者是一位 UI/UX 設計師，為了向老闆和工程師們說明「這邊為什麼要留白，那邊為什麼不能滿版」&lt;/p&gt;
&lt;p&gt;他整理出完形心理學中跟 UI 設計比較有關的七個原則：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;相似性 (Similarity)&lt;/strong&gt; — 我們的大腦會把相似的事物看成一體&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接近性 (Proximity)&lt;/strong&gt; — 我們的大腦會把靠近的事物看成一體&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;連續性 (Continuity)&lt;/strong&gt; — 我們的大腦會把事物看成連續的形體&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;封閉性 (Closure)&lt;/strong&gt; — 我們的大腦在觀察事物的時候，會將許多個獨立的元素視認為一個完整封閉的圖形&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;圖地原理 (Figure-Ground)&lt;/strong&gt; — 我們的大腦會把圖案視為圖（前景）與地（後景）的結合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共同命運 (Common Fate)&lt;/strong&gt; — 我們的大腦會把動態相近的事物看成一體&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;對稱性 (Symmetry)&lt;/strong&gt; — 我們的大腦會把對稱的物體，視為一個整體&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文章內&lt;strong&gt;每一項重點都有附上圖片比較和案例說明&lt;/strong&gt;，非常好懂。推薦大家閱讀&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/22 - 公開學習與部落格</title>
      <link>https://igouist.github.io/repost/2024/01/0122-learn-in-public-with-blog/</link>
      <pubDate>Mon, 22 Jan 2024 23:18:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0122-learn-in-public-with-blog/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0vKJq5Q.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;昨天的分享文有提到公開學習這件事。我個人覺得對工程師來說最有效的公開學習還是寫部落格，因此今天想要分享這篇：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotblogs.com.tw/hatelove/2017/03/26/why-engineers-should-keep-blogging&#34;&gt;我為什麼鼓勵工程師寫 blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章中，91 大大逐一列出了六項好處：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;產生學習動機，有方向性地篩選資訊&lt;/li&gt;
&lt;li&gt;檢視自己既有知識，將input的新資訊與既有的知識建立連結&lt;/li&gt;
&lt;li&gt;透過寫文，刻意強化刺激知識轉化，進行內化知識過程&lt;/li&gt;
&lt;li&gt;取得回饋，突破盲點&lt;/li&gt;
&lt;li&gt;受益的總是自己&lt;/li&gt;
&lt;li&gt;證明自己的能力、特質、發展潛力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章內針對每一點好處都有仔細地說明，而且相當有道理。不過整個引用的話篇幅有點太長了，我粗略地描述一下：&lt;/p&gt;
&lt;p&gt;如果我們的學習沒有方向和目標，就會漫無目的地漂流；而如果我們給自己一個承諾，每個月發一篇文章，那麼我們就會針對這個主題下去研究，也就會開始蒐集相關的資料、有目標地整理這些資訊&lt;/p&gt;
&lt;p&gt;而我們為了整理這些資訊，自然就會把他們分類或互相關聯，這時候我們就可以&lt;strong&gt;把自己既有的知識和新的資訊關聯起來&lt;/strong&gt;，也就可以活化舊知識。&lt;/p&gt;
&lt;p&gt;同時，也因為我們主動地去整理和吸收，再用我們自己的方式表達出來，過程中融入了我們的經驗和想法，這份資訊才會被內化成我們擁有的知識&lt;/p&gt;
&lt;p&gt;前面三項基本就是輸出式學習所帶來的好處。從這邊開始就感覺到公開學習的好處了
（延伸閱讀：&lt;a href=&#34;https://readingoutpost.com/power-of-output/&#34;&gt;《最高學以致用法》讀後心得：活用知識的五種方法&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;當我們把學習成果公開出去，就有可能取得別人的回饋。&lt;strong&gt;這些回饋可以幫我們破除盲點、修正錯誤&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;除了受到別人的幫助以外，這些文章也可能幫助下一個踩坑的人，甚至很可能會是之後的自己（其實自己回頭查筆記的次數會是最多的，效果也最好，畢竟跟讀檔差不多）。&lt;/p&gt;
&lt;p&gt;累積了一定的成果之後，也能夠證明自己的特質。例如持續學習、充滿毅力、樂於分享等等。怎麼看都不虧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這篇文裡面有很多段落都讓我一直點頭認同，例如這句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相信很多有在寫 blog 文章的朋友一定都有過這樣的感受：素材整理了八九成，但開始寫作時，往往會再多個 20 % ~ 60 % 的內容是原本素材沒有的，一邊在寫的過程，其實是迅速的在過程中校準自己的知識點。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在寫文章的時候真的是一直查一直補充，&lt;strong&gt;原本很多覺得自己很懂的東西，要組織成語言的時候才會發現東缺西漏，結果為了把洞補完又延伸了許多知識點&lt;/strong&gt;，最後累得半死，但也有所收穫。&lt;/p&gt;
&lt;p&gt;除了這點以外，還有一段心魔的部份：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;為什麼許多人會自己整理學習筆記、讀書心得，卻少了這一段外顯知識的過程？大部分的人都是說自己沒那時間、沒那衝動，其實很多是卡在自己心裡那一關：不敢展露出自己學習的結果，怕被別人笑，怕被人酸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老實說我真的超怕的，畢竟是真的菜。但後來看到 &lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10209415&#34;&gt;〈鐵人賽——30天可以給自己多大轉變？〉&lt;/a&gt; 後有點轉念，尤其是那句：「我本來就是初學者，我為什麼要害怕讓別人知道我不夠強呢XD？」讓我理解&lt;strong&gt;更是因為我菜，才更需要這樣做&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最後，之前有幫朋友整理過相關的文章，這邊也貼一份上來。如果有正在猶豫要不要寫部落格的朋友，也許可以閱讀看看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jyt0532.com/2017/11/23/why-blog/&#34;&gt;寫一年技術文章的心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.playpcesor.com/2020/10/5.html&#34;&gt;寫作不是從空白頁開始，而是從寫思考筆記的 5 個習慣開始&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hulitw.medium.com/how-do-i-write-965328ae91fe&#34;&gt;我是如何完成一篇文章的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tw.alphacamp.co/blog/2018-06-14-18352&#34;&gt;技術寫作六步驟 讓工程師撰寫流暢的技術部落格&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;當別人請我給他們一些寫 blog 的建議，我總是回他：挑個你自認為可以的時間行程安排，什麼時候開始寫 blog，預計多久寫一篇文，開始動工，並堅持下去。在你這麼做之前，任何建議對你來說都是不重要的。&lt;/p&gt;
&lt;p&gt;你文章是否寫得很糟糕不重要，是否沒有任何人會看你的 blog 不重要，是不是沒啥有趣的東西可以紀錄也不重要。重要的是，只要你能透過寫文來表現出寫作的意願，而且渴望持續地寫作，檢視、思考與改善自己的寫作，你終究會成功的。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>1/21 - 動力是需要刻意創造的</title>
      <link>https://igouist.github.io/repost/2024/01/0121-procrastination/</link>
      <pubDate>Sun, 21 Jan 2024 23:55:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0121-procrastination/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/otynRRN.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;最近公事私事的拖延狀況越來越嚴重，昨天直接滑到翻車。今天空閒的時候重溫了之前看過的拖延症相關文章，想一想乾脆分享上來給大家：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://life.huli.tw/2018/09/26/procrastination-ba12754ada49/&#34;&gt;致跟我一樣的拖延症患者：動力是需要刻意創造的 - Huli&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章開頭的例子根本就是我本人。我現在的行動方針就像裡面說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;動力來自於每隔一段時間就漸漸累積的愧疚感，「怎麼了、我累了、說好的、學習呢？」，累積到一定程度就會對自己說：「我覺得這樣不行」，把這些愧疚感以及不安轉換成學習的動力。但轉換完之後的量，大概燒個一兩週就差不多了。&lt;/p&gt;
&lt;p&gt;燒完以後就陷入無窮迴圈：認真做事 =&amp;gt; 倦怠耍廢 =&amp;gt; 愧疚不安 =&amp;gt; 認真做事，一日打魚五日曬網，一直拖一直拖，把所有其他事情都做盡了才會想到要來做正事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的悲劇迴圈好像沒有任何出口。但作者換個方向一想：如果說，我就是拖延症，我本來就做不到呢？&lt;/p&gt;
&lt;p&gt;這時候我們的思考邏輯，就會從「為什麼我做不到」的自責迴圈，變成思考「&lt;strong&gt;我要怎麼樣才做得到？&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;接著，文章裡面舉了幾個例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我有個朋友去了某個地方學程式，花了好幾萬塊想讓自己轉職成工程師，但在中間卻跟我說那邊的教學沒有很好，很多地方都聽不懂，要問問題也很困難，我就問了他：那怎麼辦？&lt;/p&gt;
&lt;p&gt;他說：「還能怎麼辦，都花幾萬塊了，結業之後一定要找到工作啊，就只能拼命自己學」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;假設今天突然有個拿刀的小精靈出現在你目前，跟你說：「安安，如果你三個月後多益考不到 950 分以上，我就砍斷你的手喔！」，接著立刻把你手砍斷三秒後又接回來，證明了這個小精靈是真的有這個能力，而你也用了三秒體驗手被砍斷的感覺。&lt;/p&gt;
&lt;p&gt;接著你會怎麼做？&lt;/p&gt;
&lt;p&gt;靠杯，當然是一直唸英文啊！雖然還是偶爾會耍廢，但頻率絕對不會像以前那麼高。為什麼？因為唸英文這件事情對你來說變得超級重要，沒唸好就會被砍斷手，誰敢不念？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了這兩個例子以外，還有金錢（我沒早睡就一人發一百元）、形象（被說：蛤你就是那個開天窗的人哦？）等等&lt;/p&gt;
&lt;p&gt;藉由這些例子，我們就可以發現一件事：&lt;strong&gt;動力是可以由外力創造的&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/20 - 複習一下依賴注入</title>
      <link>https://igouist.github.io/repost/2024/01/0120-di-and-ioc/</link>
      <pubDate>Sun, 21 Jan 2024 00:09:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0120-di-and-ioc/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MFVHeew.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;昨天和朋友聊到面試被考了 DI 和 IOC，心想「該不會現在是貼我的筆記賺廣告費的好機會？！」&lt;/p&gt;
&lt;p&gt;結果沒找到機會爽貼一波。為了彌平這股不甘(?)，決定插播先把之前的依賴注入筆記分享上來：&lt;br/&gt;
&lt;a href=&#34;https://igouist.github.io/post/2021/11/newbie-6-dependency-injection/&#34;&gt;菜雞新訓記 (6): 使用 依賴注入 (Dependency Injection) 來解除強耦合吧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;延伸閱讀：&lt;a href=&#34;https://igouist.github.io/post/2020/12/oo-14-dependency-inversion-principle/&#34;&gt;菜雞與物件導向 (14): 依賴反轉原則&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;既然都分享上來了，也就順便複習複習、整理一下當時的思路。我們可以先找到一個藏在標題裡的問題：為什麼我們需要解耦合？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假設現在有間小小公司，老闆請來了小明當工程師，並請他開工撰寫產品程式碼。&lt;/p&gt;
&lt;p&gt;當「撰寫產品程式」對「工程師」直接依賴的時候，狀況可能是這樣的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Product Work() &lt;span style=&#34;color:#75715e&#34;&gt;// 撰寫產品程式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ming programmer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Ming();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; product = programmer.Programming();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; product;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;過一陣子，老闆發現小明寫出來的東西似乎不太行，於是把小明趕走，另外請了小華。這時候因為用到的類別不一樣了，我們就必須要改一次程式碼：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Product Work()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Hua programmer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Hua(); &lt;span style=&#34;color:#75715e&#34;&gt;// 把小明改成小華&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; product = programmer.Programming();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; product;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;又過了好一陣子，老闆又另外請了小美來工作。於是又要再改一次，而且小美的工作方式甚至不叫做 Programming，而是 Coding：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Product Work()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Mei programmer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mei(); &lt;span style=&#34;color:#75715e&#34;&gt;// 把小華改成小美&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; product = programmer.Coding(); &lt;span style=&#34;color:#75715e&#34;&gt;// 呼叫方法也要改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; product;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;現在有感覺到一點問題了嗎？如果一直換人，程式碼不就每次都要修改？&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>1/19 - 把時間當成一種資源</title>
      <link>https://igouist.github.io/repost/2024/01/0119-value-and-price-of-time/</link>
      <pubDate>Fri, 19 Jan 2024 23:57:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0119-value-and-price-of-time/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Fqj3Ap7.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;昨天分享了用來留時間給自己的「進攻型行事曆」。今天想延續這個話題，分享一下關於時間稀缺度的文章：&lt;a href=&#34;https://medium.com/how-gipi-learn/value-and-price-of-time-60dfaeea812c&#34;&gt;時間的價值與價格 - gipi的商業思維筆記&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在進攻型行事曆的文章中，我們藉由預先把任務排進行事曆裡來幫助我們衡量某個時段，我們是否能夠吃下額外的工作。
同時文章裡面也提到：『像是「拚拚看用半天完成一天的任務」、「做不完就回家或假日再做」的想法，都是在預排進攻型行事曆時一定要避免的想法』&lt;/p&gt;
&lt;p&gt;而在這篇《時間的價值與價格中》，我們也可以看到相關聯的觀點（也是我收藏這篇文章的原因）：「&lt;strong&gt;時間的價值是浮動的&lt;/strong&gt;」&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;忙碌時的一小時跟不忙時的一小時，價值完全不可同日而語&lt;/strong&gt;，當你已經很忙碌時，還要被插單，那你很可能承接了過量的工作，導致生活品質變差，家庭失和，孩子不認老爸，也可能因為精神不繼，產出品質下降，反而獲得了較差的工作評價，更甚者，因為過量的工作而導致身體健康變差，發生了不可逆的後果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;時間的價值之所以是浮動的，是因為我們剩下的時間有稀缺性：&lt;/p&gt;
&lt;p&gt;當我們的行程非常密集、工作繁重，剩下的時間就已經很稀少了，並且我們可能會需要犧牲生活品質或身體健康來交換，這時候如果還要塞進更多的任務，對我們的成本就會是比較高的&lt;/p&gt;
&lt;p&gt;而當我們的行程很少，剩下的時間非常充裕，足夠我們兼顧生活品質和身體健康，那麼要塞進新的任務就會是比較簡單的，成本也就相對比較低了&lt;/p&gt;
&lt;p&gt;藉由衡量「時間價值」，我們就能夠從市場機制的角度更客觀地評估自己的時間，也能幫助我們的決策（我到底要不要把這個任務吃下來？我吃得了嗎）或談判（你想要月底就上線？真的吃不下了，不然我們踢掉別的任務）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另外，我也想補充一點延伸思考。在文章中提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你得學會跟市場溝通，把時間價值換成價格，而這個市場往往是你的老闆、客戶、同事、部屬以及家人、朋友。&lt;/p&gt;
&lt;p&gt;當他們希望占用你稀缺的時間時，你是否敢於拒絕呢？或者你會先接收對方的需求，然後試著調整自己的計畫？又或者你承接下來後，不論如何就是加班把兩件事同時搞定呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但我認為，不只是我們的客戶和老闆，&lt;strong&gt;連我們自己也是我們時間的消費者&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/18 - 進攻型行事曆⚔️</title>
      <link>https://igouist.github.io/repost/2024/01/0118-attack-calendar/</link>
      <pubDate>Thu, 18 Jan 2024 22:21:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0118-attack-calendar/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/y4r0zbJ.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天看到 &lt;a href=&#34;https://www.playpcesor.com/2024/01/notion-calendar-google-calendar.html&#34;&gt;Notion 新行事曆&lt;/a&gt; 提供了 Google 的串接功能&lt;/p&gt;
&lt;p&gt;剛好想起之前看過一篇行事曆運用的文章，這邊就順手分享上來給大家：&lt;br/&gt;
&lt;a href=&#34;https://www.playpcesor.com/2015/07/calendar-project.html&#34;&gt;實作進攻型行事曆：學會留時間給自己的進度排程心法&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;進攻型行事曆是一種「&lt;strong&gt;在行事曆上留時間給自己的技巧&lt;/strong&gt;」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當我們要排一些計畫，或是被詢問行程的時候，很多時候只能盯著空空蕩蕩的行事曆，模模糊糊知道「下個月好像有什麼專案？」而無法確定。這是因為我們很容易會忽略中長遠的目標，這時候也可以嘗試使用進攻型行事曆把時間先預留起來。&lt;/p&gt;
&lt;p&gt;進攻型行事曆要做的事情很簡單：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先把長期計畫和重要截止日都標記到行事曆上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把手上的計劃列出來，拆解每個計劃要執行的任務。&lt;strong&gt;在行事曆上分配時間給這些任務&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;任務如果太長容易失焦，所以&lt;strong&gt;太長的任務要拆成一週左右的時間區段&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有些小任務可能只需要占用半天一天，這時&lt;strong&gt;可以用全天行程先把這些小任務指派到某一天&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>1/17 - 鴿子封包🕊️</title>
      <link>https://igouist.github.io/repost/2024/01/0117-ipoac/</link>
      <pubDate>Wed, 17 Jan 2024 22:52:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0117-ipoac/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/asUKm3A.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;剛剛看到推特上有人分享他們公司傳資料發現要傳三天，果斷開車送硬碟，一天就送達的故事。&lt;/p&gt;
&lt;p&gt;決定今天和各位分享「目前資料傳輸速度最快」的網路通訊協議：&lt;br/&gt;
&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/%E4%BB%A5%E9%B8%9F%E7%B1%BB%E4%B8%BA%E8%BD%BD%E4%BD%93%E7%9A%84%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE&#34;&gt;RFC 1149 - 以鳥類為載體的網際網路協定（IP over Avian Carriers, IPoAC）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡單來說，就是讓鴿子送封包。咕。&lt;/p&gt;
&lt;p&gt;這組通訊協定歷史已久，最遠可以追溯到古代中國，而在 1990 年由 D. Waitzman 正式提出為 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc1149&#34;&gt;RFC 1149&lt;/a&gt; ，簡稱 IPoAC&lt;/p&gt;
&lt;p&gt;後續更追加了 Qos 功能（ &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc2549&#34;&gt;RFC 2549&lt;/a&gt; ），並在 2011 年正式支援 IPv6（ &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6214&#34;&gt;RFC6214&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;雖然「基於鳥類」的協定有著不少的缺點，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;丟包率嚴重&lt;/strong&gt;。實驗中 9 個封包中只有 4 個封包成功傳送，丟包率高達 55%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回應時間長&lt;/strong&gt;。從 54 分鐘到 1.77 小時不等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;會被病毒攻擊&lt;/strong&gt;，例如禽流感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/staf0Qp.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;但同時也可以藉由一些技術處理解決部分問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丟包率嚴重：可以藉由&lt;strong&gt;提高發送的封包數量解決&lt;/strong&gt;，只要鴿子夠多就不是問題&lt;/li&gt;
&lt;li&gt;回應時間長：可以&lt;strong&gt;讓鴿子攜帶更大量的記憶卡，提升單趟的傳輸量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>1/16 - 認識雪花 ID</title>
      <link>https://igouist.github.io/repost/2024/01/0116-snowflake/</link>
      <pubDate>Tue, 16 Jan 2024 23:27:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0116-snowflake/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/PhHegYc.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;和朋友聊的時候提到雪花 ID，但我之前都無腦用套件（&lt;a href=&#34;https://github.com/RobThree/IdGen&#34;&gt;.Net 的 IdGen，香&lt;/a&gt; ）直接產完甩資料庫完事，因此趁著回家有空的時候趕快認識一下，順手也分享上來：
&lt;a href=&#34;https://pdai.tech/md/algorithm/alg-domain-id-snowflake.html&#34;&gt;Snowflake 算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;雪花演算法是用來產生唯一 ID 的算法，產出來的 ID 會有以下幾個部份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最前面的 1 bit 不使用，只會放 0 （畢竟放 1 被判定成負數就麻煩了）&lt;/li&gt;
&lt;li&gt;接續的 41 bit 用來放時間戳，精確到毫秒
&lt;ul&gt;
&lt;li&gt;這段也是雪花 ID 能夠按照時間排序的原因&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中間 10 bit 用來放機器序號&lt;/li&gt;
&lt;li&gt;最後 12 bit 用來放序列號，會持續遞增&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣就可以得到一組香香的雪花 ID 💯&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;雪花演算法的優點在於&lt;strong&gt;可以排序&lt;/strong&gt;：因為使用時間戳，所以產生出來的 ID 是有順序性的。&lt;/p&gt;
&lt;p&gt;可以排序的優點同時也避免了用 GUID 當 Key 的時候索引破碎之類的問題（延伸閱讀：&lt;a href=&#34;https://blog.darkthread.net/blog/guid-as-pk-on-db/&#34;&gt;GUID Primary Key資料庫避雷守則 - 黑暗執行緒&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;而缺點則是因為依賴時間戳來產生 ID，所以非常依賴機器上的時間。&lt;strong&gt;如果機器上的時間回溯了之類就會撞車出事&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此外，如果系統是分散式的話，為了避免每台機器在同一時間各自產生的 ID 都一樣，所以要嘛就得集中在一個地方產生，或是&lt;strong&gt;分配每個機器唯一的機器序號&lt;/strong&gt;（放在第三段的 10 bit）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/15 - 先問為什麼</title>
      <link>https://igouist.github.io/repost/2024/01/0115-start-with-why/</link>
      <pubDate>Mon, 15 Jan 2024 21:43:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0115-start-with-why/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dD7OcUl.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;上一篇分享的遊戲與內在動機文章中，提到了「動機與操弄」，這讓我想到之前看《先問為什麼》時寫的筆記，決定分享上來&lt;del&gt;賺點廣告費&lt;/del&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://igouist.github.io/post/2020/09/start-with-why/&#34;&gt;讀《先問為什麼》- 伊果的沒人看筆記本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw&#34;&gt;賽門西奈克：偉大的領袖如何鼓動行為&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者認為&lt;strong&gt;影響人類行為的方法有兩種：操弄以及感召&lt;/strong&gt;，其中操弄是指使用手段或策略去影響他人，例如說談判、利誘、情緒勒索、削價競爭等等。而感召則是用激勵人心的方式去影響他人、促使別人展開行動。&lt;/p&gt;
&lt;p&gt;為了說明領導者是如何感召、鼓舞他人的，作者提出了黃金圈理論，從外到內分別是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;做什麼&lt;/strong&gt;：負責什麼工作、提供什麼商品等等。每個人都能說得出來。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;怎麼做&lt;/strong&gt;：流程、方法、技術。知道怎麼把事情做好，比做什麼更加抽象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;為什麼&lt;/strong&gt;：目的、使命、信念。真正的核心，但很少人能清楚說明。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WM8Js7d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;許多公司或銷售，常常是從外圈開始，也就是我做了什麼什麼；然而能夠吸引人們的，必須從內圈開始，也就是「我為什麼要做這件事」&lt;/p&gt;
&lt;p&gt;為了表達「為什麼」與「怎麼做」之間的關係，作者提出了芹菜測試：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假設你去參加一個晚宴，忽然有朋友跑來告訴你，「你知道你的組織需要什麼嗎？M&amp;amp;M巧克力。不用M&amp;amp;M，根本就是有錢不去賺。」&lt;/p&gt;
&lt;p&gt;這時，另一個朋友又跑過來，說：「你知道自己該做什麼嗎？豆漿。研究顯示，現在每個人都在買豆漿。你應該賣豆漿才對。」&lt;/p&gt;
&lt;p&gt;當你站在雞尾酒桌旁邊的時候，另一位朋友又給你一個建議。「Oreo餅乾，」他說。「我們靠Oreo餅乾賺進了好幾百萬美元。你絕對要做Oreo餅乾。」&lt;/p&gt;
&lt;p&gt;這時又來了一個人，告訴你：「芹菜！你一定得做芹菜這門生意。」&lt;/p&gt;
&lt;p&gt;所有這些有成就的朋友給了你那麼多重要建議。有些人和你身處同一產業，有些人比你成功，有些人也給別人相同的建議，結果讓人受益匪淺。這時，你該怎麼辦？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當你跑去超市把上面提到的東西一股腦都買了，在排隊付錢時，&lt;strong&gt;所有人看著你手上的東西，根本不知道你相信什麼&lt;/strong&gt;。你做的事情應該體現你的目標，但你手上什麼都有。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/14 - 內在動機與魂系遊戲</title>
      <link>https://igouist.github.io/repost/2024/01/0114-intrinsic-and-soullike-games/</link>
      <pubDate>Sun, 14 Jan 2024 23:14:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0114-intrinsic-and-soullike-games/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/b6MjPet.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這兩天休假都在《P 的謊言》裡被 Boss 吊起來打，正好分享一下看過、關於魂系遊戲的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opinion.udn.com/opinion/story/6068/3026256&#34;&gt;你玩遊戲的動機，決定了你玩的是怎樣的遊戲&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opinion.udn.com/opinion/story/6068/3028754&#34;&gt;《血源詛咒》如何善用內在動機讓玩家甘願受虐？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在這兩篇文章中，作者先介紹到內在動機與外在動機的區別：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;心理學家把人做事情的動機區分成兩種：內在（intrinsic）跟外在（extrinsic）。&lt;/p&gt;
&lt;p&gt;簡單來說，&lt;strong&gt;當你出於內在動機做一件事，代表你是為了享受那件事情帶來的當下經驗而做&lt;/strong&gt;，例如為了體驗刺激而參加高空跳傘活動。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若你不特別享受那件事情，而是為了進一步的目的，那麼你就是出於為外在動機去做事&lt;/strong&gt;，例如本身不特別喜歡跳傘的特技跳傘表演者，或者想要以跳傘吸引心儀對象注意的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;當人出於內在動機行為，代表人為了行為本身的樂趣而做（例如唱KTV）；
當人出於外在動機行為，代表人是為了行為的其他後果（例如陪長官唱KTV）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著闡述為什麼《血源詛咒》利用合理的困難度，成功讓玩家基於內在動機去享受遊戲：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/13 - 從 Code Review 的小事看大事</title>
      <link>https://igouist.github.io/repost/2024/01/0113-code-review/</link>
      <pubDate>Sat, 13 Jan 2024 23:52:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0113-code-review/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/15Trxcv.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天和大家分享一篇前兩天看到的 Code Review 觀念文：&lt;br/&gt;
&lt;a href=&#34;https://william-yeh.net/post/2023/09/on-code-review/&#34;&gt;從 Code Review 的小事看到大事 - William Yeh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇的內容從 Code Review 出發，提了多個延伸議題。從程式碼品質、團隊共識，到需要哪些人事物才能促進 Code Review 的環境，引用的數量和思考都蠻廣的。像是談到 Code Review 的重點時，就引用了《軟體測試實務：業界成功案例與高效實踐（第一冊）》：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否有明顯的邏輯錯誤？&lt;/li&gt;
&lt;li&gt;有無遵循既有的程式碼編寫規範？&lt;/li&gt;
&lt;li&gt;邏輯的測試保護足夠嗎？&lt;/li&gt;
&lt;li&gt;有完整實現需求嗎？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又或者在 Code Review 的鬆緊度這點上，引用了 Google 的 “What to look for in a code review”：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t accept CLs (change lists) that degrade the code health of the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;「童子軍規則」(The Boy Scout Rule)：「離開營地前，讓營地比使用前更加乾淨。（Always leave the campground cleaner than you found it.）」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我所在的團隊也有將 Code Review 拉進開發流程，目前給我的整體感覺是舒適的。在 Review 和被 Review 之中，我也常從同事們學到一些程式碼的簡化技巧，或是突然認識到「原來維護者是這樣理解我的程式碼的」而得到優化品質的機會（這也就是文內提到的 &lt;strong&gt;four eyes：多一個人來確保品質&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;但同時，我也感覺到內文所寫的「&lt;strong&gt;品質不是白吃的午餐&lt;/strong&gt;」是有道理的。Code Review 並不是萬靈丹，說一句「Reviewer 要把關啊」就可以消滅所有 Bug 和團隊問題。因此在閱讀這篇文章的時候，其中有幾個部分就會讓我覺得是個可以延伸出去的思考點：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/12 - 忍者程式碼（Ninja Code）</title>
      <link>https://igouist.github.io/repost/2024/01/0112-ninja-code/</link>
      <pubDate>Fri, 12 Jan 2024 16:06:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0112-ninja-code/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vqXrGRr.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;放假前的下午無心上班，今天來轉貼一些輕鬆的：
&lt;a href=&#34;https://lenchen.medium.com/%E5%BF%8D%E8%80%85%E7%A8%8B%E5%BC%8F%E7%A2%BC-ninja-code-cc5e4a70bafc&#34;&gt;忍者程式碼（Ninja Code）&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;微乎微乎！至于無形；神乎神乎！至于無聲，故能為敵之司命。
——《孫子兵法．虛實》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這是一篇完美的忍者指南，講述了一名軟體忍者該具備的技能和美德&lt;/p&gt;
&lt;p&gt;一位真正的忍者、強大的軟體工程師，知道什麼時候運用抽象化、什麼時候喚醒同伴的注意力、什麼時候展現他的熱情。&lt;/p&gt;
&lt;p&gt;他將給予考驗；他將帶來驚奇；他將帶給我們啟發。&lt;/p&gt;
&lt;p&gt;很多人試著跟隨忍者的腳步，但很少有人成功。但只要我們遵循裏面記載的建議，一定可以成為一位高深莫測的軟體忍者。推薦給大家&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/11 - 當我們在學程式時，要學的到底是什麼？</title>
      <link>https://igouist.github.io/repost/2024/01/0111-learn-coding/</link>
      <pubDate>Thu, 11 Jan 2024 11:25:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0111-learn-coding/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/S3tgK4K.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;上一篇聊到：不同的程式語言、不同的工具都代表了不同的資訊選擇，也就是抽象化。那麼，我們在解決問題、學習新技能和知識的時候，是不是也有相似的概念呢？&lt;/p&gt;
&lt;p&gt;今天想和大家分享 Huli 大大的這篇：&lt;br/&gt;
&lt;a href=&#34;https://life.huli.tw/2018/10/29/learn-coding-9c572c2fb2/&#34;&gt;當我們在學程式時，要學的到底是什麼？ - Huli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我很喜歡 Huli 大大文章的一個特色：有趣而且貼切的故事。前面小明的故事真的是看了都會哭，很多人應該也能得到共鳴 =&amp;gt; 這種的 :0hah: 共鳴&lt;/p&gt;
&lt;p&gt;其中有一個問題，當時打中了我：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;你是在鍛鍊記憶力還是解題能力？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當我們看見題目、思考方案、動手解決問題的時候。如果我們能夠整理並歸納出背後的邏輯，那麼這些題目也許就是同一個精神延伸的變化題；但如果我們只是死背硬記，那麼每個題目和場景，就會變成獨立且無窮無盡的背誦題。&lt;/p&gt;
&lt;p&gt;這中間的差別就在於「抽象化」，或是文內提到的：計算思維&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;計算思維中最重要的概念之一，是能夠將計算「抽象化」與「具體化」的能力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回到主軸上面來。那麼當我們學習寫程式的時候，或是學習解決某個問題、應用某種工具的時候，要做什麼才能夠漸漸學會找到背後的抽象呢？我們可以從 Huli 大大整理出來的，學習一項新技術該做的事情中看出一些端倪：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/10 - 一個語言如果不改變你的思考方式，就不值得學？</title>
      <link>https://igouist.github.io/repost/2024/01/0110-language-affect-the-way-you-think-about-programming/</link>
      <pubDate>Wed, 10 Jan 2024 22:14:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0110-language-affect-the-way-you-think-about-programming/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/GIMxyMv.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;在前一篇轉貼時，我分享了「知識點應該也有大綱到細節等等，不同抽象程度的顆粒度」的想法。&lt;/p&gt;
&lt;p&gt;這個念頭是來自於幾年前閱讀到的一篇鐵人賽文章，今天我想順著把這篇文章介紹給大家：&lt;br/&gt;
&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10201905&#34;&gt;Day2：[心得]一個語言如果不改變你的思考方式，就不值得學？談程式語言的本質 - Nissen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我曾經想過為什麼程式語言不能只留下一種，大家就學同一種就好，為什麼還要分強型別弱型別、物件導向函數導向等等……&lt;/p&gt;
&lt;p&gt;直到看見這篇文章，我才有一些關於知識點和程式語言等等，這些資訊被「抽象化」的輪廓。&lt;/p&gt;
&lt;p&gt;這篇文章用原始人看見「真正的牛」之後，畫出「牛的符號」作為例子，解決了我當時的疑惑，因為它說明了每種程式語言所做的「抽象化」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;抽象化是什麼？&lt;strong&gt;抽象化就是一種「選擇」&lt;/strong&gt;
比如說，當原始人把牛畫下來的時候，他就已經做出了選擇。&lt;/p&gt;
&lt;p&gt;咦！？有嗎？什麼時候？他做了什麼選擇什麼？&lt;/p&gt;
&lt;p&gt;他在繪畫的時候，選擇了要保留or刪除什麼資訊。&lt;/p&gt;
&lt;p&gt;當原始人在畫畫的時候：&lt;/p&gt;
&lt;p&gt;牛身上的有「多少毛」、牛的「顏色」、牛的「重量」&amp;hellip;.這些資訊，重要嗎？不重要&lt;/p&gt;
&lt;p&gt;牛的「輪廓」、牛的「線條」，這重要嗎？重要&lt;/p&gt;
&lt;p&gt;這個原始人其實是從一個完整的牛身上刪除了大量資訊（重量、顏色、毛），抽象出了他留下最重要的資訊，也就是線條與輪廓。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每種語言看待世界的方式並不一樣，思考方式也就不一樣。因此，&lt;strong&gt;當它們把這些資訊抽象化成程式語言的符號時，選擇保留下來的資訊也就不一樣。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一種語言，或是說每一種特性和設計方式，其實就代表了一種資訊的選擇、一種看待世界的方式。&lt;/p&gt;
&lt;p&gt;因此才有開頭的那個問題，以及這篇文章所引用的這句話：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A language that doesn’t affect the way you think about programming, is not worth knowing.&lt;/strong&gt; &amp;ndash; Alan Peris&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>1/9 - 漸進式總結</title>
      <link>https://igouist.github.io/repost/2024/01/0109-progressive-summary/</link>
      <pubDate>Tue, 09 Jan 2024 21:59:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0109-progressive-summary/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jzObLXA.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天想跟大家分享一種「閱讀文章並做筆記」的方式：「&lt;strong&gt;漸進式總結&lt;/strong&gt;」&lt;br/&gt;
&lt;a href=&#34;https://medium.com/pm%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B%E5%B7%A5%E5%85%B7%E7%AE%B1/obsidian-%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8-%E7%AD%86%E8%A8%98%E7%AF%87-02-%E4%BD%BF%E7%94%A8-%E6%BC%B8%E9%80%B2%E5%BC%8F%E7%B8%BD%E7%B5%90-%E4%BE%86%E5%AF%AB%E7%AD%86%E8%A8%98-%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%A5%97%E5%8F%AF%E6%8C%81%E7%BA%8C%E8%BF%AD%E4%BB%A3%E7%9A%84%E7%AD%86%E8%A8%98%E7%B3%BB%E7%B5%B1-f34f069f99a&#34;&gt;使用「漸進式總結」來寫筆記，逐步萃取出高含金量的知識內容 - PM 的生產力工具箱&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們工程師在研究某個主題或學習某些技能的時候，常常會需要閱讀大量文章。但要把閱讀完畢的文章整理成一篇筆記，其實還是蠻難的，像我就時常會遇到腦袋打結、看後面忘前面的狀況。&lt;/p&gt;
&lt;p&gt;這種時候，我們就可以試試看漸進式總結：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將文章的&lt;strong&gt;內文&lt;/strong&gt;整篇抓取下來&lt;/li&gt;
&lt;li&gt;把內文中覺得比較重要的段落標記為&lt;strong&gt;粗體&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把粗體段落中覺得更重要的部份用&lt;strong&gt;螢光筆&lt;/strong&gt;標記起來&lt;/li&gt;
&lt;li&gt;把螢光筆標記的部份，用自己的話整理出一份&lt;strong&gt;總結&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;針對整理出來的總結，用&lt;strong&gt;一句話&lt;/strong&gt;來表達概念&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
藉由畫重點、用自己的話整理，再進行總結，這樣一層又一層的&lt;strong&gt;篩選和壓縮&lt;/strong&gt;，就能幫助我們篩出關鍵部份、得到一份有著不同顆粒度的筆記，也會讓我們對筆記的內容更有印象。&lt;/p&gt;
&lt;p&gt;在上 Domain Storytelling 的導讀時，講者說過一組故事會有不同的顆粒度，可能廣到能看見一片大海，或是細到看見一個貝殼。我想在我們學習的時候，每個知識點和相關的資訊，也有著顆粒度的差別。從大綱到細節的展開，應該會是不同抽象程度的資訊&lt;/p&gt;
&lt;p&gt;漸進式總結能夠幫助我們從原始文檔中一步一步地提取不同顆粒度的資訊，對整個知識點的輪廓就會有更清晰的了解，有興趣的朋友可以嘗試看看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/8 - 看不見的圖片浮水印: 隱寫術</title>
      <link>https://igouist.github.io/repost/2024/01/0108-lsb/</link>
      <pubDate>Mon, 08 Jan 2024 23:56:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0108-lsb/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mjoEocf.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天禮拜一太過厭世，想簡單跟大家分享前陣子看到的酷東西：&lt;br/&gt;
&lt;a href=&#34;https://home.gamer.com.tw/artwork.php?sn=5554197&#34;&gt;LSB 隱寫術：在圖片裡偷渡敏感資訊的方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們都知道圖片是由許多像素構成的，每一個像素都有 RGB 來代表這個點的顏色。例如 R:255, G:0, B:0 就是黑色。&lt;/p&gt;
&lt;p&gt;但我們的肉眼其實很難分辨出這些顏色之間 0 和 1 的區別，例如 &lt;code&gt;(255, 0, 0)&lt;/code&gt; 和 &lt;code&gt;(255, 0, 1)&lt;/code&gt;，對我們來說看起來根本就沒差&lt;/p&gt;
&lt;p&gt;利用這個特性，我們就可以&lt;strong&gt;在圖片中不影響視覺觀看的同時，又能夾帶一些訊息進去&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最常舉例的用途就是在截圖上面偷偷押上浮水印（像是員工編號之類的），那麼流出的時候就可以迅速抓到內鬼，&lt;del&gt;終止交易&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;這篇的圖片說明清楚，篇幅簡短，非常推薦像我一樣還不知道隱寫術的朋朋們看看&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/7 - 殺人於無形的零寬空格</title>
      <link>https://igouist.github.io/repost/2024/01/0107-zwsp/</link>
      <pubDate>Sun, 07 Jan 2024 09:52:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0107-zwsp/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RVOMBQW.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天有種想慵懶度日的感覺，是適合當貓的日子。因此今天丟一下自己的舊文來分享給大家：&lt;br/&gt;
&lt;a href=&#34;https://igouist.github.io/post/2021/06/zero-width-space/&#34;&gt;菜雞抓蟲: Url 變得怪怪的？你可能是零寬空格（ZWSP）的受害者！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這是之前某次抓蟲的奇妙旅程，某些 API 突如其來地報錯，看似正常的查詢字串卻一直跳出查無資料或參數錯誤。找了老半天，竟然是**零寬空格（Zero-width space, ZWSP）**在作祟！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;零寬空格是完全沒有寬度的空白字元&lt;/strong&gt;。這東西在 Unicode 叫做 &lt;code&gt;U+200B&lt;/code&gt;，我們比較常見到的是編碼之後的樣子 &lt;code&gt;%e2%80%8b&lt;/code&gt; 或 &lt;code&gt;\xe2\x80\x8b&lt;/code&gt;。他還有另外兩個兄弟 &lt;code&gt;U+200C&lt;/code&gt;、&lt;code&gt;U+200D&lt;/code&gt;，平常在泰文、高棉文之類的地方工作，這東西的特色就是：&lt;strong&gt;肉眼不可見、殺人於無形&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/6 - 用「設計適合自己的挑戰」，取代「能力焦慮」</title>
      <link>https://igouist.github.io/repost/2024/01/0106-flow/</link>
      <pubDate>Sat, 06 Jan 2024 23:57:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0106-flow/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Z4D5Hab.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這兩天和朋友聊到研究新技術時的痛苦和心魔，因此想跟大家分享電腦玩物的這篇：&lt;br/&gt;
&lt;a href=&#34;https://www.playpcesor.com/2023/10/flow.html&#34;&gt;面對拖延糾結、恐懼沒時間，我幫助自己進入心流靠一個關鍵步驟 (playpcesor.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我個人很喜歡裡面的這段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把「因為&amp;hellip;&amp;hellip;所以我沒辦法做到&amp;hellip;&amp;hellip;」，變成「因為&amp;hellip;&amp;hellip;所以我現在可以做到&amp;hellip;&amp;hellip;」：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為現在時間只有30分鐘，所以我現在寫不完一篇文章。
&lt;ul&gt;
&lt;li&gt;變成：因為現在時間只有30分鐘，所以我先寫出腦中有的開場白草稿就好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為現在還不確定怎麼畫海報更好，所以我現在沒辦法做設計。
&lt;ul&gt;
&lt;li&gt;變成：因為現在還不確定怎麼畫海報更好，所以我先寫好海報上必備的基本資料。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為等等還要開會，所以我現在無法專心動手寫完企劃案。
&lt;ul&gt;
&lt;li&gt;變成：因為等等還要開會，所以我現在先把企畫案基本規格做好就好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為我沒有設計過這種產品，所以我現在還沒辦法提供最佳方案。
&lt;ul&gt;
&lt;li&gt;變成：因為我沒有設計過這種產品，所以我先完成一個自己目前能想到的方案，再做討論。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;這種轉換心態先推動做得到的部分，讓我想到大人學 Podcast 的其中一集：主持人對出國念書這個遠大的目標抱持恐懼和不確定，因此他決定先告訴自己「&lt;strong&gt;我並不是真的就馬上要出國念書了，我只是先研究看看而已！&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;然後用同樣的技巧讓自己「唸一下」托福、「做一下」落點分析，一步一步地推進。最後等到真的要出國念書的時候，準備也都做得差不多了，一切就進行得非常順利。（ &lt;a href=&#34;https://www.darencademy.com/article/view/id/16883&#34;&gt;明知要改變，卻怎麼也踏不出第一步？你需要的是「心理戰術」！&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;面對太難太遠的目標，我們很容易拖延、焦慮和逃避；而太簡單的目標，又往往對我們沒有幫助。這時候我們也許就可轉個念頭，&lt;strong&gt;設計適合自己的挑戰，給自己十分鐘嘗試看看，也許就是進步的開始&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1/5 - 學習永動機</title>
      <link>https://igouist.github.io/repost/2024/01/0105-bizthinkingkeeplearning/</link>
      <pubDate>Fri, 05 Jan 2024 23:16:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0105-bizthinkingkeeplearning/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kCwgNhq.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;今天想分享給大家的是 Marcus 大大的這篇筆記：&lt;br/&gt;&lt;a href=&#34;https://marcus116.blogspot.com/2021/03/bizthinkingkeeplearning.html&#34;&gt;[筆記] 商業思維學院 - 學習永動機&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們要怎麼樣才能夠在學習上一直進步呢？也許關鍵點就在&lt;strong&gt;複利&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在這篇筆記中，從第一組正向迴圈：找到實際和目標的差距，並嘗試規劃額外的工作量和工作時間開始，進一步抓到更多的切入點，例如增加工作效率、提升工作的產值等等，&lt;strong&gt;從不同方向擴充整個迴圈的模型，讓每一步都可以成為飛輪加速的一環&lt;/strong&gt;，達到在學習裡利滾利的效果。其中每個過程都有附圖，很容易就能理解 &lt;a href=&#34;https://1.bp.blogspot.com/-F0y56YA0r8M/YFtXamwc3HI/AAAAAAAAIZc/G1UB9kIMWSY5jKJ-Ni99jG2IcuQLrva4wCLcBGAsYHQ/s0/Learning.png&#34;&gt;懶人包&lt;/a&gt; 裡要表達的概念，值得一看。&lt;/p&gt;
&lt;p&gt;在後段有提到學習的階段，也就是從資訊整理為知識，知識精煉成技能，最後從技能變現出價值。這讓我想到先前看過的這篇：&lt;a href=&#34;https://medium.com/pm%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B%E5%B7%A5%E5%85%B7%E7%AE%B1/%E7%9F%A5%E8%AD%98%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%A2%E6%88%90%E7%9A%84-fe5e19a50786&#34;&gt;知識是如何形成的？ | PM的生產力工具箱&lt;/a&gt; 的 &lt;a href=&#34;https://miro.medium.com/v2/1*ncSjVk_MC9LkHSU3nIbyQQ.png&#34;&gt;DIKW&lt;/a&gt; 模型，其中「知識到底怎麼來的？」的食譜與做菜譬喻非常直覺，有興趣的朋友也可以作為延伸閱讀看看 :20kirbythumbsup:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:720/format:webp/1*ncSjVk_MC9LkHSU3nIbyQQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後想放一下看這邊筆記時很喜歡的一句話：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你是一位伐木工，你的斧頭多久沒有磨了 ?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>1/4 - 軟體工程是個烤麵包機</title>
      <link>https://igouist.github.io/repost/2024/01/0104-toaster/</link>
      <pubDate>Thu, 04 Jan 2024 16:47:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/01/0104-toaster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/utH2AbJ.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drmingdrmer.github.io/tech/bla/2018/09/27/toaster.html&#34;&gt;软件工程是个面包机 - drdrxp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果我們要從無到有做一台烤麵包機，需要多久呢？&lt;/p&gt;
&lt;p&gt;Thomas Thwaites 花了九個月的時間，從分析需要的零件、找工業廢水弄到銅，到最後成功做出一台烤麵包機，過程和成品都還蠻有趣的。&lt;/p&gt;
&lt;p&gt;最後文章也回到軟體工程上，討論「從零開始」和「已經有完善的工具體系」這項關鍵的差異，並衍生出程式碼品質、長期行動等想法。我們站在巨人的肩膀上，藉由這些工具和環境，有著比起從零開始更強大的效率和生產力，也許這才是「不要重複造輪子」最重要的原因吧。&lt;/p&gt;
&lt;p&gt;朋友：軟體工程是個麵包機，而軟體工程師都是智障三明治&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

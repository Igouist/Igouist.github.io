<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reposts on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/repost/</link>
    <description>Recent content in Reposts on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <lastBuildDate>Mon, 01 Apr 2024 23:46:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/repost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【每天推薦一篇文章】可觀測性 30 天</title>
      <link>https://igouist.github.io/repost/2024/04/observability-in-devops-30-days/</link>
      <pubDate>Mon, 01 Apr 2024 23:46:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/observability-in-devops-30-days/</guid>
      <description>&lt;p&gt;看見前輩貼了「可觀測性」的鐵人賽筆記，翻了一輪發現挺香的，馬上轉貼上來：&lt;br/&gt;
&lt;a href=&#34;https://github.com/marcustung/Observability-in-DevOps/blob/main/README.md&#34;&gt;marcustung/Observability-in-DevOps: Observability 101 (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這些文章（我感覺）能切成幾個部份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些系統穩定性的東東。例如災害復原、高可用性和高可靠性之類的&lt;/li&gt;
&lt;li&gt;可觀測性 Observability&lt;/li&gt;
&lt;li&gt;好像很猛的新標準 OpenTelemetry&lt;/li&gt;
&lt;li&gt;香香的 Grafana Cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每篇文章的開場都會先說明重點、結束的時候也有知識點小結，非常貼心 :20kirbythumbsup:&lt;/p&gt;
&lt;p&gt;因為系列文本身蠻長的，能延伸的知識點也蠻多的。這邊就按照慣例，列一些我印象比較深刻的點&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我在看到主題的時候，第一個疑問其實是：&lt;strong&gt;所以我的團隊有了可觀測性可以幹啥吃？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而在 Day 10 的可觀測性介紹裡，這一段回答了我的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;白話點背後是希望可以回答以下問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;請求經過哪些服務 ? 系統中哪個部分 loading 最大&lt;/li&gt;
&lt;li&gt;當服務發生緩慢時，哪裡慢(Bottlenecks)以及可能原因是什麼&lt;/li&gt;
&lt;li&gt;當服務無法使用時，錯誤及可能異常的原因是什麼&lt;/li&gt;
&lt;li&gt;當使用者反映操作 timeout，但在 Dashboard 上顯示平均請求都很快，要如何找到其可能緩慢原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;目的是希望工程團隊可以理解並解釋系統的現況（增加系統透明度，而不是靠通靈），當系統出現問題時，可以第一時間了解爆炸範圍，進行緊急問題的處理已加速恢復的時間。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;身為通靈師的一員，看到這段開始覺得「哦，好像不錯哦，竟然不是靠直覺嗎🤔」&lt;/p&gt;
&lt;p&gt;而在 Day 28 的時候又看到了更強烈的對比：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你是開發或是運維團隊人員，當線上系統或負責應用程式遇到問題時，會做哪些事情來協助定位問題&lt;/p&gt;
&lt;p&gt;警報 (Alert) : &lt;br/&gt;
當系統監控偵測到異常或是特定指標 (Metrics) 超過預定的閥值或水位時，系統會產生告警警報，對於 RD 及團隊來說，這是首先被告知問題的方式。&lt;/p&gt;
&lt;p&gt;儀錶板 (Dashboard) :&lt;br/&gt;
收到警報後，RD 可能會先查看 Dashboard 了解異常背後的數據。Dashboard 提供即時的數據視覺化，幫助 RD 快速定位問題範圍和影響程度。&lt;/p&gt;
&lt;p&gt;查詢 (Adhoc Query) : &lt;br/&gt;
若 Dashboard 所提供的資訊不足，或是為了要更精準確定問題原因，RD 會使用 adhoc Query 進一步的來查找特定時間的數據資料來確認問題。&lt;/p&gt;
&lt;p&gt;日誌 (Log Aggregation) : &lt;br/&gt;
確認問題範圍後，RD 會查找相關的系統或是應用程式 Log，Log 中可能包含更明確的應用程式執行資訊，或是問題的詳細描述與錯誤訊息，幫助 RD 更有機會找到問題的具體原因&lt;/p&gt;
&lt;p&gt;分散式追蹤 (Distributed Tracing) : &lt;br/&gt;
如果應用程式架構是分散式系統，RD 會使用分散式工具來找特定請求式如何在多個服務間流動過程，有助於找到性能瓶頸或可能失敗的原因。&lt;/p&gt;
&lt;p&gt;修復 (Fix) : &lt;br/&gt;
一旦問題被定位，就有機會定位問題並進行緊急修復的動作。可能解決方式式調整配置設定檔、修正錯誤的程式或是重新啟動服務(重開治百病)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感覺是專業工程師的抓蟲流程。但像我們專業靈媒團隊，平時出事的反應更接近 Day 29 的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;口而相傳，緣分到了就會修好&lt;br/&gt;
各自通靈&lt;br/&gt;
(文件)定義流程 + 系統&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通著通著就哭了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另一組記憶點是來自於我原先的誤會：&lt;strong&gt;「可觀測性不就是插一狗票 Log 嗎？」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Day 11 的「從哨塔到全景地圖」有稍微讓我認識了一點：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;舉個玩世紀帝國的例子，&lt;strong&gt;監控就像是在已經打開的地圖前提下，在覺得危險的位子設立哨塔及哨兵&lt;/strong&gt;，當有人來攻擊時就會有叮叮叮聲響來提醒玩家派兵防守&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可觀測性就是一打開地圖就已經全開&lt;/strong&gt;，當別的玩家派兵攻打自己的範就可以看到派人的兵種是甚麼及人數，可以做更有效的化解對方玩家的攻擊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好像有點懂了：插監控就像是深入敵方野區插眼，可觀測性是想直接開圖&lt;/p&gt;
&lt;p&gt;&lt;del&gt;而我們團隊都是銅牌瞎子，所以小地圖根本是黑的&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;同樣讓我長知識的還有「三本柱 Metrics、Logging 與 Tracing」&lt;/p&gt;
&lt;p&gt;這邊直接節錄文章中的介紹：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Metrics : 指標&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用來衡量和監控系統性能的關鍵數據指標，通常是數字化的方式呈現(可聚合數字)。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;這些數據通常用於即時監控系統，以確保它們在正常運行範圍內。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;例如 : CPU使用率、記憶體使用率、請求速率、錯誤率等都可以通過指標來衡量&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Structured Log : 結構化日誌&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日誌包含有關離散事件的結構化或可讀的詳細資訊。用於提供請求的細節與上下文。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;日誌通常被用來瞭解系統中特定事件的發生情況，以及在事件發生時提供上下文。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;例如，錯誤日誌、訪問日誌、應用程式日誌等都是常見的日誌類型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Distributed Tracing : 分散式追蹤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用於追蹤複雜分佈式系統中請求的過程，以便了解請求從一個元件到另一個元件的傳遞情況。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;它有助於識別性能問題和瓶頸，並提供有關請求流程的詳細信息。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;通常，追蹤由一個唯一的標識符（例如 traceID）來關聯相關事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解是這樣，供參考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果服務 CPU 狂噴猛噴，直接噴到 100% 120% 500%，這個是 Metrics&lt;/li&gt;
&lt;li&gt;如果在程式碼裡面偷寫紙條印出來，例如 &amp;ldquo;Oops, ERROR!&amp;quot;，這個是 Logging&lt;/li&gt;
&lt;li&gt;如果跨了三四個服務只好摸一串粽子找過去，這個是 Tracing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在這之前我基本上都一律叫成 Log，同事問問題也是兩手一攤：你去查 Log 啊= =&lt;/p&gt;
&lt;p&gt;想起一臉疑惑的朋友們，原來混在一起搞撒尿牛丸的是我🥲&lt;/p&gt;
&lt;p&gt;補充：今天和朋友(?)詢問了一些 Metrics、Logging 與 Tracing 的例子，這個對比貼上來給各位參考：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bqleCrv.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2WJ0Gyy.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;總覺得其中一種做法特別熟悉🤐&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;後面還有蠻多記憶點的，但寫到這邊發現篇幅有點爆，Discord 竟然發不出去了= = 加速一下&lt;/p&gt;
&lt;p&gt;中間段（Day 17~）的主角都是&lt;strong&gt;不明覺厲(?)的可觀測性全新標準 OpenTelemetry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如介紹 OpenTelemetry 的規範和實作，例如協定和 API 規格，接著逛了一圈 Demo&lt;/p&gt;
&lt;p&gt;能夠理解有個大一統規範能對可觀測性有多大的幫助，但因為我個人沒玩過，看這段的時候基本上就是「哦哦這新標準好像猛猛的」&lt;/p&gt;
&lt;p&gt;可能之後找時間碰才會有更深的心得，已經摸過的朋友也歡迎幫忙補充資訊上來&lt;/p&gt;
&lt;p&gt;&lt;del&gt;最後的 Day 20+ 開始介紹 Grafana Cloud，離我就更遠了，這邊就略過 xD&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;除了上面的兩大塊深水區以外，我還有兩個小小點特別有印象：&lt;/p&gt;
&lt;p&gt;Day04 的 SLA -&amp;gt; SLO -&amp;gt; SLI 這條：&lt;/p&gt;
&lt;p&gt;我們在 3/19 轉貼&lt;a href=&#34;https://igouist.github.io/repost/2024/03/0319-reorder-message&#34;&gt;德魯大大的 Re-Order Message&lt;/a&gt; 文章時，裡面有提到「對整個系統的 SLO 期待」這一段。在這裡串了起來：&lt;/p&gt;
&lt;p&gt;我們跟客戶簽了 SLA 說我們 99.99% 穩。然後我們為了達標（=不要賠錢），就訂了更具體的 SLO，而為了衡量這些指標，就搞了 SLI&lt;/p&gt;
&lt;p&gt;啊如果 SLI 量下去，抱歉沒達到 SLO，就準備按照 SLA 簽的東西跪地開賠。大概是這樣(?)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另一個小小點是 Day 30 的 ODD，我在這邊第一次是聽到這個詞：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就像 TDD 測試驅動開發強調在寫程式碼前要先寫測試案例，以提高程式碼的保護與品質。ODD 在建立可觀測性系統方面也是如此，&lt;strong&gt;可觀察性驅動開發意味著開發人員在編寫程式碼之前考慮可觀察性信號或是監控方法&lt;/strong&gt;，適用於元件級別或是整個系統。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也許，我是說也許，我們開發之前的確就該想好後續該怎麼監測跟維護，而不是把鍋端給後面的苦主來通靈。對吧？對吧前輩們？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;三十天太長了，很難在這篇推薦文裡介紹完。我已經列了許多我有筆記的部份，但像是 OpenTelemetry 這些硬東西，我個人力有未逮(?)&lt;/p&gt;
&lt;p&gt;還是推薦有興趣的朋友直接閱讀，畢竟文章結構簡單直接，有大綱有小結，拆成每一天的話也不算長，有名詞或觀念也能再自己延伸，感覺不虧&lt;/p&gt;
&lt;p&gt;不說了我要去拆文章內容到我的筆記庫了= =&amp;rdquo;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】寫給工程師看的減肥指南</title>
      <link>https://igouist.github.io/repost/2024/03/0329-a-weight-loss-guide-for-engineers/</link>
      <pubDate>Fri, 29 Mar 2024 23:59:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0329-a-weight-loss-guide-for-engineers/</guid>
      <description>&lt;p&gt;今天還在持續厭世，來轉貼前天看&lt;a href=&#34;https://igouist.github.io/repost/2024/03/0327-human-system-optimization&#34;&gt;延壽指南&lt;/a&gt;的時候撿到的工程師減肥指南(?)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@threath/%E5%AF%AB%E7%B5%A6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E7%9A%84%E6%B8%9B%E8%82%A5%E6%8C%87%E5%8D%97-part-1-%E4%B8%8D%E9%81%8B%E5%8B%95%E6%B8%9B%E6%8E%89-16kg-79c8871cd5f5&#34;&gt;寫給工程師看的減肥指南 — Part 1 不運動減掉 16kg - Sean Cheng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@threath/%E5%AF%AB%E7%B5%A6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E7%9A%84%E6%B8%9B%E8%82%A5%E6%8C%87%E5%8D%97-part-2-%E7%94%9F%E9%85%AE%E7%90%86%E8%AB%96-%E8%83%B0%E5%B3%B6%E7%B4%A0%E7%90%86%E8%AB%96-16280c0de7ee&#34;&gt;寫給工程師看的減肥指南 — Part 2 生酮理論 + 胰島素理論 - Sean Cheng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@threath/%E5%AF%AB%E7%B5%A6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E7%9A%84%E6%B8%9B%E8%82%A5%E6%8C%87%E5%8D%97-part-3-%E8%85%B8%E9%81%93%E8%8F%8C%E7%90%86%E8%AB%96-d27c65b82249&#34;&gt;寫給工程師看的減肥指南 — Part 3 腸道菌理論 - Sean Cheng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我喜歡這系列的點在於，第一篇作者就直接列出影響他最大的幾個減肥理論，然後還分享了從 2020 到 2022 的歷程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在前面半年我就擬定了大方向，後面則是陸續補齊完整概念、建立專屬於自己個人的理論。&lt;br/&gt;總結起來，影響我最大的三個減肥理論是：&lt;/p&gt;
&lt;p&gt;生酮理論 + 胰島素理論：&lt;br/&gt;人可以使用油脂當作身體能量，因此幾乎不吃澱粉也能活的好好的。&lt;/p&gt;
&lt;p&gt;腸道菌理論：&lt;br/&gt;每個人的腸道菌相不同，因此即使吃入相同的東西，吸收的熱量、營養成分卻不會一樣。&lt;/p&gt;
&lt;p&gt;細胞層級的代謝理論：&lt;br/&gt;人使用油脂當身體能量的能力，和呼吸習慣、細胞油脂組成、粒線體數量有關。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;針對這些理論，在後續也逐項進行說明。並且引用了一些影片（或是說，很多影片），可以馬上就連出去科普科普：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VzPD009qTN4&#34;&gt;How Bacteria Rule Over Your Body – The Microbiome - youtube&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VzPD009qTN4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;在第一篇也有把要做的事、別做的事情清楚地列出來，而第二篇、第三篇也有很好懂的說明。例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;勞力工作者主要使用醣類當作日常能量，在活動時使用肌肉、肝臟中的儲存的肝醣，並在吃飯時透過進食澱粉、水果、肉類(可轉換成醣)補充回來，每天的生活循環可能如下：&lt;/p&gt;
&lt;p&gt;吃午飯(醣類補充到 80%) → 勞力工作(醣類降低到 30%) → 吃晚餐 (醣類補充到 80%) → 睡覺8小時(醣類降低到 60%) → 吃早餐(醣類補充到80%)…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;但在國家發展到以知識型產業為工作主體的情況下，大多數人的生活型態已經完全不適合每天吃大量澱粉，因為其醣類循環狀況會變成下面這樣：&lt;/p&gt;
&lt;p&gt;吃午飯(醣類補充到 110%) → 坐著工作(醣類降低到 100%) → 吃晚餐 (醣類補充到 120%) → 睡覺8小時(醣類降低到 95%) → 吃早餐(醣類補充到110%)…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我個人還有下午茶、點心跟宵夜，都不知道補充到幾 % 去了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前陣子體檢一卡車紅字，最近也一直覺得身體怪怪的。在前天翻延壽指南的時候，順著找到了這篇，感覺多少認識了一些新知識（當然，有沒有身體力行又是另一回事 xD），也轉貼上來給各位朋朋們參考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】寫了無限 alert 迴圈竟然要被抓？！</title>
      <link>https://igouist.github.io/repost/2024/03/0328-alert-alert-alert/</link>
      <pubDate>Thu, 28 Mar 2024 21:05:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0328-alert-alert-alert/</guid>
      <description>&lt;p&gt;今天頭還是很暈，簡單分享一下今天看到的有趣文章：&lt;br/&gt;
&lt;a href=&#34;https://blog.kalan.dev/posts/2022-01-23-infinite-alert-loop&#34;&gt;無限 alert 迴圈事件 - Kalan&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這件事發生在日本：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 2019 年三月，兵庫縣警以在電子留言板上放上有惡意程式碼的連結有不正指令電磁的記録供用未遂之疑，到女國中生家搜索，並搜查兩名男性後送檢。3/25，日本黑客協會開始募集兩名男性的律師費用及官司費用，總共募到了 553 人共 700 萬日圓的金額。 在同年 5/29 兩位男性以緩起訴處分，此案件沒有任何受害者。&lt;/p&gt;
&lt;p&gt;根據其中一位男性的說法，檢察官認為「對某些手機型號來說，一旦點擊連結後有可能沒辦法關閉畫面，或是需要拿去維修甚至是拜託專家，&lt;strong&gt;違反了電腦病毒罪當中的要件『反意圖性』&lt;/strong&gt;。」，對於「不正指令電磁的記録供用罪」的主張沒有改變。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;竟然違反了「不正指令電磁的記録供用罪」，究竟是怎樣的程式呢：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;window.alert&lt;/code&gt; 能夠接收指定的字串，並顯示一個具有 OK 按鈕的對話框。按下 OK 按鈕之後就能夠把對話框關閉。&lt;/p&gt;
&lt;p&gt;這個程式是無限迴圈，因此關閉對話框之後，又會再出現對話框，這個行為會持續到使用者關閉瀏覽器分頁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是這樣。還敢寫出無限彈跳窗啊 xD&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】人體系統優化指南</title>
      <link>https://igouist.github.io/repost/2024/03/0327-human-system-optimization/</link>
      <pubDate>Wed, 27 Mar 2024 23:29:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0327-human-system-optimization/</guid>
      <description>&lt;p&gt;今天頭超暈的，想說來貼個相關的文章(?)&lt;br/&gt;
&lt;a href=&#34;https://github.com/zijie0/HumanSystemOptimization&#34;&gt;人体系统调优不完全指南 (zijie0/HumanSystemOptimization) - Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇整理了要健健康康活下去(?)的一些相關知識，例如睡眠、飲食、動力、學習。&lt;/p&gt;
&lt;p&gt;並且每個小節都有原理說明和實踐方式。例如睡眠這一小節，就會先提到生物鐘、光照和體溫。接著列出該做的內容，像是起床需要先接觸陽光、晚上要減少光源接觸等等&lt;/p&gt;
&lt;p&gt;而心態和動力這節，就會提到我們 &lt;a href=&#34;https://igouist.github.io/repost/2024/03/0320-dopamine&#34;&gt;3/20 轉貼過的多巴胺&lt;/a&gt;、會影響的飲食，然後接到利用多巴胺的機制來提升自我等等&lt;/p&gt;
&lt;p&gt;文章整體有點長，但分小節看的話其實也蠻快的。對各個術語有興趣的話也可以再進一步搜尋，感覺還是挺不錯的，就轉貼上來給各位朋朋&lt;/p&gt;
&lt;p&gt;另外再補一篇相關閱讀（&lt;del&gt;方便我筆記關聯&lt;/del&gt;）：&lt;br/&gt;
&lt;a href=&#34;https://github.com/geekan/HowToLiveLonger&#34;&gt;geekan/HowToLiveLonger (程序员延寿指南) - Github&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】如何發想解決方案？</title>
      <link>https://igouist.github.io/repost/2024/03/0326-how-to-ideate-and-come-up-with-product-solutions/</link>
      <pubDate>Tue, 26 Mar 2024 21:41:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0326-how-to-ideate-and-come-up-with-product-solutions/</guid>
      <description>&lt;p&gt;前幾天丟了滿多篇文章到收件閘裡，今天就先從最有興趣的這篇開始讀起：&lt;br/&gt;
&lt;a href=&#34;https://medium.com/3pm-lab/how-to-ideate-and-come-up-with-product-solutions-573fa800a62d&#34;&gt;如何發想解決方案？產品團隊的創意思考流程！ - 3PM LAB 產品三眼怪實驗室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇一打開就看到熟悉的雙鑽石（上次看到還是在《柔型要術》的時候）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/6/65/Double_Diamond_by_the_Design_Council.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DISCOVER（發散）：透過使用者研究、市場研究來探索問題與機會&lt;/li&gt;
&lt;li&gt;DEFINE（聚焦）：根據前一步驟蒐集到的資訊來定義問題與場景，聚焦至一個待解決的問題&lt;/li&gt;
&lt;li&gt;DEVELOP（發散）：發想各種解決問題的方法、滿足使用者需求的手段&lt;/li&gt;
&lt;li&gt;DELIVER（聚焦）：製作 Prototype 並測試、進行實驗，透過使用者/市場的回饋推進與聚焦至我們最終想要推出的變動或功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;緊接著的這一小段我覺得很不錯，很有敏捷的 feel：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;發想解法的步驟並不是單一流程的「想出一個解法」，也不是「想出很多個解法，挑一個最棒的出來」，而是 &lt;strong&gt;「想出很多個解法，先挑一個我們認為最棒的出來，用很小的成本讓使用者測試，如果實驗成功就繼續發展；如果實驗失敗就從其他解法再挑下一個出來測試」&lt;/strong&gt; 這樣一個不斷迭代的過程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但要實驗各式各樣的想法，首先要先有夠多的解法。這篇文章介紹了幾種「好想法從何而來」的途徑，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;實務經驗累積：「累積的經驗愈多，每當遇到一個新問題，你可以延伸出來的子議題、思考方向、點子就愈多」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;產品和競品研究：「研究其他軟體產品、競爭對手的產品，學習與參考他們的解決方法，或是從類似用途的元素中找到發想的靈感」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創意發想的工具與框架：「透過一些創意發想的工具與框架，產出大量同時又充滿廣度的點子，能夠逼迫我們探索更多的可能性」&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在工具和框架這部份，這篇文章也分享了一些發想工具。例如心智圖、嘔吐法、丟出爛點子等等&lt;/p&gt;
&lt;p&gt;並且文內對每項工具都標上了使用情境和說明，有興趣的朋友可以看看。我個人則特別存了這段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下班就該下班了其實，但為什麼上班的時候想不出這些東西呢？&lt;/p&gt;
&lt;p&gt;之前上《Learning How To Learn》這個線上課程時，裡面提到了專注模式（Focused Mode）和發散模式（Diffuse Mode）這兩種腦袋的運作方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;專注模式：當我們集中注意力時，會用已知的方法、經驗來解決我們熟悉的問題&lt;/strong&gt;，一般來說上班、上課都是處在這個模式之下，思想會照著既定的迴路在走。如圖所見，大腦此時會集中在某一部分的神經區塊中工作，此外腦內組織起來的東西（類似釘子）也比較多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;發散模式：當我們注意力較分散的時候，腦內的釘子減少了、也變得不規則，思想可以移動的空間變大、範圍變廣、也較隨機&lt;/strong&gt;。這個模式適合在面對陌生問題時，幫助我們找到新的觀點，從更廣、更綜觀、更自由的角度去思考，也較有利於創意發想。&lt;/p&gt;
&lt;p&gt;我們的大腦同一時間只會處在其中一種模式中，因此學習如何有效的切換到不同模式，將有利於幫助自己用更有創造力的方式解決難題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是這樣，我要去開 Steam 發散一下了，明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】Airtable: 簡單的需求用簡單的儲存工具</title>
      <link>https://igouist.github.io/repost/2024/03/0325-airtable/</link>
      <pubDate>Mon, 25 Mar 2024 23:26:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0325-airtable/</guid>
      <description>&lt;p&gt;今天也弄得挺晚才開工，還好今天有前輩發了一篇有趣的文：&lt;br/&gt;
&lt;a href=&#34;https://studyhost.blogspot.com/2024/03/airtable.html&#34;&gt;使用 Airtable 在小型需求上取代傳統資料庫 - .NET Walker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要讓我覺得有趣的是這一句話：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;傳統的關聯式資料庫，其實對於教育訓練和小型的專案來說，是一種負擔。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔細想想也蠻有道理，有時候我只是想示範一下某些工具簡單的操作，但只要想把東西存起來，就有種「好像該丟到資料庫？」的感覺&lt;/p&gt;
&lt;p&gt;但就像這篇說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你做一個小型專案或POC的話，『儲存』也往往不是重點，儲存只是『必要之惡』。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其實，若是從這個角度廣義的來說，軟體開發的GUI、資料庫，都只是細節(枝微末節)，都應該要是可以隨時被抽換或取代的部分，而非系統核心。&lt;/p&gt;
&lt;p&gt;一套軟體或解決方案的真正核心，是商業邏輯。它(商業邏輯)才是一個應用程式真正展現價值的部分。&lt;/p&gt;
&lt;p&gt;我們把主題拉回來。所以，我最近這幾年在上課的時候，盡量不讓範例程式碼涉及資料庫存取，特別是關聯式資料庫的存取。因為這對讀者或學員來說，變成了另一種必須學習的負擔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果只是做一個簡單的 POC，的確不該把重點放在儲存工具上。而在這篇文章裡，作者使用了簡單輕便的雲端工具 Airtable 來處理掉儲存體的部份&lt;/p&gt;
&lt;p&gt;Airtable 可以簡單地呼叫 REST API 來處理掉 CRUD 的操作，可以說是無腦開箱即用。&lt;br/&gt;（是不是也該來嘗試看看xD）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>reposts-archives</title>
      <link>https://igouist.github.io/repost/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igouist.github.io/repost/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
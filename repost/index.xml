<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reposts on 伊果的沒人看筆記本</title>
    <link>https://igouist.github.io/repost/</link>
    <description>Recent content in Reposts on 伊果的沒人看筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hant-TW</language>
    <lastBuildDate>Tue, 23 Apr 2024 23:43:00 +0800</lastBuildDate><atom:link href="https://igouist.github.io/repost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【每天推薦一篇文章】存密碼的正確姿勢</title>
      <link>https://igouist.github.io/repost/2024/04/0423-how-to-save-password/</link>
      <pubDate>Tue, 23 Apr 2024 23:43:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0423-how-to-save-password/</guid>
      <description>&lt;p&gt;前兩天貼了編碼、加密、雜湊的文章，今天接著貼它的續集：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/starbugs/how-to-store-password-in-database-sefely-6b20f48def92&#34;&gt;聽說不能用明文存密碼，那到底該怎麼存？ - Starbugs Weekly 星巴哥技術專欄&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇列了幾個方案，從編碼到雜湊，搭配圖文解釋，非常適合貼給同事然後叫他們密碼不要亂存。&lt;/p&gt;
&lt;p&gt;真的，只要你同事一說「那我們就用 bas&amp;hellip;」就直接把這篇甩在他臉上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：剛剛收到另一篇，感覺也可以拿來甩：&lt;a href=&#34;https://medium.com/@brad61517/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8-%E5%AF%86%E7%A2%BC%E5%AD%98%E6%98%8E%E7%A2%BC-%E6%80%8E%E9%BA%BC%E4%B8%8D%E7%9B%B4%E6%8E%A5%E5%8E%BB%E8%A3%B8%E5%A5%94%E7%AE%97%E4%BA%86-%E6%B7%BA%E8%AB%87-hash-%E7%94%A8%E9%9B%9C%E6%B9%8A%E4%BF%9D%E8%AD%B7%E5%AF%86%E7%A2%BC-d561ad2a7d84&#34;&gt;密碼存明碼，怎麼不直接去裸奔算了？淺談 Hash , 用雜湊保護密碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按慣例，這邊也迅速節錄一下、收進筆記庫。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案一base64-編碼&#34;&gt;方案一：Base64 編碼&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/svSoCYf.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;先回顧上一篇的這句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所謂的編碼並不會修改資料、也沒有任何加密的效果&lt;/strong&gt;，單純就是換個方式來表達資料而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒有加密效果！沒有加密效果！沒有加密效果！而且 base64 的 &lt;code&gt;==&lt;/code&gt; 真的太好認了= =&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;經過 Base64 後的結果很常都是 = 或 == 結尾，所以如果有一天資料庫真的洩漏出去了，駭客也會在第一時間就發現可以用 Base64 解開，然後在很短的時間內得到原本的密碼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那如果不要用 base64，用一些比較冷門的編碼呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也不行，雖然這些編碼演算法比較少人在用，但頂多騙騙不懂電腦的路人甲乙。真正的駭客很可能會使用各種方法嘗試要 decode 密碼，所以不管用哪一種編碼都是不安全的，結論就是不要使用編碼來儲存密碼！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案二aes256-加密&#34;&gt;方案二：AES256 加密&lt;/h3&gt;
&lt;p&gt;那用加密呢？加密就會牽涉到保管 key 的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因爲使用者要登入時，後端必須確認使用者輸入的密碼加密後跟資料庫內的 password 是否符合，所以還是&lt;strong&gt;必須把 key 放在 server 上&lt;/strong&gt;。既然是放在 server 上，那駭客就還是有機會拿到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因為公司內的員工可能會知道 key，所以就可以從資料庫得到使用者的密碼。如果你知道 Facebook 的工程師只要想要就能得到所有人的密碼，應該也不太放心吧，尤其很多人都在多個網站使用同樣的密碼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;結論就是&lt;strong&gt;因為無法保證 key 的安全，所以不建議用加密的方式保存密碼&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案三sha1-雜湊&#34;&gt;方案三：SHA1 雜湊&lt;/h3&gt;
&lt;p&gt;雜湊代表是不可逆的，通常是拿到密碼之後再雜湊一次比對結果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當使用者 Luka 要登入時，就把他輸入的密碼拿去經過 SHA1 雜湊，&lt;strong&gt;如果算出來的雜湊值跟資料庫內那一大串一樣，那就代表 Luka 有極高機率輸入了正確的密碼&lt;/strong&gt;，所以就放行讓他登入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但因為現在的電腦已經很猛了，所以針對一些長度很短的、常出現的密碼，其實就可以直接拿來比對 SAH1，結果就還是會被猜出來&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;剛剛的 love1234 之所以可以被破解其實是因為他太簡單了，只要把長度為 8 的字串雜湊值都算過一遍就好。而且小寫字母加上數字也才 36 個字元，算一算 36⁸ 大約才 2.8 兆種組合，很快就可以建一個表出來&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你的密碼又臭又長又亂、包含了大小寫甚至還有一些怪怪的字元，像是 -y]@7k[BSB@3m]r$.&amp;gt;&amp;ldquo;R，那以現在電腦的計算速度就還無法破解，因為長度 20 以內由數字、大小寫還有特殊字元組成的字串太多了，算到天荒地老都不見得能算出來&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（只到這步的話，感覺平常只要密碼夠長就沒啥問題？）&lt;/p&gt;
&lt;p&gt;補充：感謝前輩提醒，SHA1 已經在 2017 年被攻破（&lt;a href=&#34;https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html&#34;&gt;Announcing the first SHA1 collision -  Security Blog&lt;/a&gt;），並在 2020 年被公認不再安全（&lt;a href=&#34;https://web.archive.org/web/20200419222030/https://media.ntu.edu.sg/NewsReleases/Pages/newsdetail.aspx?news=ffbd7ab8-233f-42e2-9107-da8dbe784aae&#34;&gt;Critical flaw demonstrated in common digital security algorithm&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;因此&lt;strong&gt;建議不要再用 SHA1 了，請改用更舒適安全的雜湊，例如 SHA256&lt;/strong&gt; 🤔&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案四加鹽--sha256&#34;&gt;方案四：加鹽 &amp;amp; SHA256&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;哦？&lt;strong&gt;聽起來只要密碼夠長、夠亂就沒問題了，那我能不能自己產生隨機字串，把使用者的密碼加長呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;答案是可以，這就是所謂的 &lt;strong&gt;加鹽（Salt）&lt;/strong&gt;。如果今天有一個新的使用者要註冊，這時我們的後端系統就隨機生成一個長度十的字串稱作 Salt，計算 Hash 時就把使用者輸入的密碼跟 Salt 合在一起算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSTfPcWb4-GYn_62s_B440BgoGonmSEw1asWD2NUgPV5g&amp;amp;s&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我現在碰到的密碼處理幾乎都是這種，安心實在。&lt;/p&gt;
&lt;p&gt;原本攻擊者遇到簡單的雜湊，可能都已經把各個密碼對應的表都算好了（延伸閱讀：&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/%E5%BD%A9%E8%99%B9%E8%A1%A8&#34;&gt;彩虹表&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;但只要加了鹽，這張準備好的小抄就不能用啦～只要多一兩個步驟，就可以讓駭客算到天荒地老，何樂而不為呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方案五bcrypt&#34;&gt;方案五：Bcrypt&lt;/h3&gt;
&lt;p&gt;完全沒看過的東西！馬上節錄文章內的介紹：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然 Bcrypt 的名字裡面有個 crypt，但他並不是加密法，而是跟 SHA1 一樣是雜湊演算法，唯一的差別是&lt;strong&gt;他計算很慢&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;計算慢有什麼好處呢？前面有提到 SHA1 的雜湊值之所以可以被查表查出來，就是因為現今的電腦計算太快了，就連建個表反查也不需要太多時間&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;而 Bcrypt 則是可以透過設定疊代次數讓他變慢，以疊代五次的 Bcrypt 來說，他的計算速度大概比 SHA1 慢 1000 倍。也就是說，假如你原本用 SHA1 計算三天就能反查出所有使用者的密碼，現在卻要花大概八年的時間才可以&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;竟然就只是，算很慢？但想想還是很有道理，畢竟現在的玩法就是炸裂駭客的時間成本讓他去找別人，這樣看起來其實挺有用的？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;補充argon2&#34;&gt;補充：Argon2&lt;/h3&gt;
&lt;p&gt;這篇上推之後，發現蠻多朋朋提到 Argon2 這個香東西，第一次認識。怕忘記，先抓兩篇丟上來：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#argon2id&#34;&gt;Password Storage Cheat Sheet - OWASP Cheat Sheet Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://debugpointer.com/security/argon2-hash-overview&#34;&gt;What is Argon2 Hash? - debugpointer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前看起來最大的特色是可以自訂 Time Cost、Memory Cost 跟 Parallelism Factor，然後因為太吃記憶體(?) 所以打擊用 GPU 的挑戰者特有效？&lt;/p&gt;
&lt;p&gt;晚點再研究研究，先補充上來🤔&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後標一下總結的這一小句。我發現有很多朋友曾經跟我有一樣的迷思：&lt;br/&gt;「安全是不是就等於完全無法被攻破？」但其實不是這樣的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在資安領域沒有所謂絕對的安全，&lt;strong&gt;你只能不斷提高攻擊者的成本&lt;/strong&gt;，當那個成本高到攻擊者無法負荷時（像是破解一個密碼要租超級電腦連續計算十年），那就可以說是足夠安全了XD&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】編碼、加密、雜湊</title>
      <link>https://igouist.github.io/repost/2024/04/0419-encoding-encrypt-and-hashing/</link>
      <pubDate>Sat, 20 Apr 2024 00:23:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0419-encoding-encrypt-and-hashing/</guid>
      <description>&lt;p&gt;今天在群組剛好看有人在討論加密跟雜湊，馬上把收藏已久的這篇拿出來：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c&#34;&gt;一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash - Starbugs Weekly 星巴哥技術專欄&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章依序介紹編碼、加密和雜湊，並且都有給範例和應用，很適合剛認識的朋友。（也可以拿去丟給每次都講錯的朋友）&lt;/p&gt;
&lt;p&gt;那按照慣例，我們也迅速筆記一下，讓我收到卡片庫裡：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先是編碼。&lt;strong&gt;編碼其實就是換個方式表達資料而已&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如跟朋友約好 ㄅ=A, ㄆ=B&amp;hellip; 這樣轉換下去，基本上只要知道對應的內容就可以馬上轉回來，摩斯密碼就是這類。&lt;/p&gt;
&lt;p&gt;（題外話，以前還在紙條上用過&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/%E8%B1%AC%E5%9C%88%E5%AF%86%E7%A2%BC&#34;&gt;豬圈密碼&lt;/a&gt; xD）&lt;/p&gt;
&lt;p&gt;延伸閱讀：&lt;a href=&#34;https://life.huli.tw/2022/05/20/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/&#34;&gt;為什麼打開檔案時會看到亂碼？跟著小明一起從傳紙條學習編碼&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接著認識一下二哥：加密。&lt;/p&gt;
&lt;p&gt;加密不只是像編碼一樣單純轉換而已，而是&lt;strong&gt;需要使用金鑰&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如 ㄅ=A, ㄆ=B 之後，這時候我們約好 key=2，代表字母要往下數幾格，這時候就變成 ㄅ=C, ㄆ=D，如果不知道 key=2 就可能會數錯了&lt;/p&gt;
&lt;p&gt;當然現在用的加密還是比較正經一點，被暴力解都要跑超久那種的。此外，根據加解密是不是用同一把 Key，還會分對稱式跟非對稱式&lt;/p&gt;
&lt;p&gt;有興趣的朋友可以閱讀內文，以及延伸閱讀：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@RiverChan/%E5%9F%BA%E7%A4%8E%E5%AF%86%E7%A2%BC%E5%AD%B8-%E5%B0%8D%E7%A8%B1%E5%BC%8F%E8%88%87%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-de25fd5fa537&#34;&gt;基礎密碼學(對稱式與非對稱式加密技術) - Chan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/mr-efacani-teatime/%E5%9C%96%E8%A7%A3-%E9%9D%9E%E5%B0%8D%E7%A8%B1-%E8%88%87-%E5%B0%8D%E7%A8%B1-%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-37c01f3651dc&#34;&gt;圖解“非對稱”與“對稱”加密技術&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;最後是雜湊，雜湊沒在跟你還不還原的，直接就是打爛。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把各個欄位/字元 丟進去某個公式計算的方式就叫做雜湊（Hash），而這個計算公式就稱為雜湊函數（Hash function），過程可能會做各種加減乘除，最後算出一個值或字串。&lt;/p&gt;
&lt;p&gt;因為最後一個數字是經由前幾個數字計算、濃縮出來的，所以理所當然不可能由雜湊後的結果回推出前幾個數字分別是什麼，所以&lt;strong&gt;雜湊的過程是不可逆的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這邊想貼另一篇的說明，也非常好懂：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10208884&#34;&gt;[資料結構] 雜湊 (Hash)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;舉例來說，雜湊函數就像一台果汁機，我們把蘋果香蕉你個芭樂 (資料) 都丟進去打一打、攪一攪，全部變得爛爛的很噁心對吧？！這時候出來的產物 (經過雜湊函數後的值)，是獨一無二的，沒有辦法反向組合成原來的水果 (資料)。倘若我們把蘋果改成紅龍果，出來的產物 (經過雜湊函數後的值) 就會跟著改變，變成桃紅色的，不再是原來的淡黃色。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我個人通常是在存密碼的時候碰到，反正就算要比對的話，只要照同樣步驟打爛兩次結果長的一樣就好了吧～&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後引用一下這篇文章簡潔有力的小結，結束這一回合：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;編碼（Encoding）
&lt;ul&gt;
&lt;li&gt;只是換個方式表達資料&lt;/li&gt;
&lt;li&gt;不需要 Key 即可解碼（不安全）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加密（Encrypt）
&lt;ul&gt;
&lt;li&gt;用 Key 來保護資料的機密性&lt;/li&gt;
&lt;li&gt;加密跟解密都需要 Key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雜湊（Hashing）
&lt;ul&gt;
&lt;li&gt;把資料丟進一串公式計算出一個結果&lt;/li&gt;
&lt;li&gt;無法反推回原字串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】精準提問術</title>
      <link>https://igouist.github.io/repost/2024/04/0418-question/</link>
      <pubDate>Thu, 18 Apr 2024 17:07:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0418-question/</guid>
      <description>&lt;p&gt;最近專案進行得熱烈，團隊間的溝通也比較頻繁。決定來轉貼這一篇：&lt;br/&gt;
&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10213376&#34;&gt;第一天上班就該學會的精準提問術&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇提供了我們菜鳥朋朋們一些工作上溝通要注意的事情，例如「讓對方感受到你有尊重他的時間」、「溝通頻率一天不要超過三次」等等。&lt;/p&gt;
&lt;p&gt;除此之外，還列了一些小技巧。&lt;br/&gt;例如&lt;strong&gt;想要從對方身上獲得資訊的時候，可以描述一下預期結果和實際結果的差異&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「你原本認知的事情是要跑 A 流程，但試著執行後卻發現出現預期外的 B 結果，想詢問自己認知是否有錯」&lt;/p&gt;
&lt;p&gt;「我看了你的 UI 畫面，本來是認為從 A 頁面要連到 B 頁面應該是用 slide 轉場，但是我看到了 C 頁面好像跟我預期想像的動畫轉場好像不一樣，你可以描述你心目中的正確轉場方式嗎？」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或是&lt;strong&gt;要請別人替你處理事情時，可以試試提供選擇題&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「這個問題困擾了我很久，我想到 A、B、C 作法，但不知道哪個比較好，你可以幫我看看哪個比較適合呢？」&lt;/p&gt;
&lt;p&gt;「主管你臨時插件的 B 案子我覺得沒問題，那你要先做這個 B 案子嗎？如果是這樣 本來 A 案今天下班前就可以給你，就會變成 後天下班前才能給你，這樣 ok 嗎？」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搭配同個系列的這兩篇服用，效果更佳：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10213477&#34;&gt;專業就是連麻瓜都聽得懂的溝通術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10214057&#34;&gt;工程師如何與 PM 溝通 - 菜鳥工程師必修的 30 堂溝通課&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;如果想繼續了解「我該怎麼發問」，或是希望自己至少上班的時候不要問出白癡問題的話，&lt;br/&gt;&lt;strong&gt;絕對絕對要閱讀這一篇經典&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way&#34;&gt;提問的智慧 (How To Ask Questions The Smart Way)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果真的沒時間，至少可以看看〈好問題跟蠢問題〉以及〈不該問的問題〉兩小節。拜託。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;反正我現在看到怪怪的問題都直接把這篇文甩過去&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】電子書的背光與前光</title>
      <link>https://igouist.github.io/repost/2024/04/0416-frontlight-and-backlight/</link>
      <pubDate>Tue, 16 Apr 2024 22:29:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0416-frontlight-and-backlight/</guid>
      <description>&lt;p&gt;這幾天被某台新出的彩色電子閱讀器燒到，剛好眼睛也開始有點不太舒服，整個非常心動。&lt;/p&gt;
&lt;p&gt;但其實我一直不是很懂電子書閱讀器的發光功能是要幹嘛用的，查資料翻到這兩篇，決定轉貼上來：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jackscogito.blogspot.com/2021/03/blog-post.html&#34;&gt;彩色電子紙的前光(背光)迷思 - Jack Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jackscogito.blogspot.com/2022/05/blog-post_19.html&#34;&gt;彩色電子紙開前光是否就失去了護眼的意義？ - Jack Black&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這兩篇還有科普了電子書的一些迷思，例如「光線太暗會傷眼」、「亮度越亮顏色越鮮豔」等等&lt;/p&gt;
&lt;p&gt;但因為我之前的迷思主要在「如果我用閱讀器開了這個燈，那不是跟我用平板一樣？」，因此主要節錄一些前光和背光的部份來筆記就好。&lt;/p&gt;
&lt;p&gt;首先讓我們看看電子書的發光方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所謂電子紙的前光源，是裝置在電子紙紙面側邊上方的 LED 燈珠&lt;/strong&gt;，它發出的光會透過導光板均勻的分佈到紙面中間上方並照射墨水分子，而墨水分子再把這個光反射回來給我們看到，因此也是反射光&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;彩色電子紙的前光源其實跟環境的人工照明光源（如檯燈）並無不同&lt;/strong&gt;，一樣都是光線照射到墨水分子後再反射墨水分子的顏色光到使用者的眼睛，與液晶螢幕、OLED、Mini or Micro LED 這些使用背光源照明直射成像的方式不一樣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;電子書閱讀器的是「前光」，就是其實有個很近的檯燈照到文字，再反射到眼睛上。&lt;/p&gt;
&lt;p&gt;而不是像平板那種直接在液晶背後發光的「背光」，也就不會有背光為了顯示而必須比環境還亮、造成眼睛負擔的問題了&lt;/p&gt;
&lt;p&gt;（當然，如果用前光或檯燈然後跟環境光源差異很大，例如房間超暗檯燈超亮，還是會造成負擔）&lt;/p&gt;
&lt;p&gt;大概是這樣，今天認識了「前光」和「背光」。感覺從名字就能看出差異🧐&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那我們什麼時候要把電子書的背光打開呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上開啟前光的時機只有一個原則：&lt;strong&gt;當螢幕距離眼睛必須要小於 30 公分才有辦法看清楚字或圖片的輪廓時，就必須要開前光&lt;/strong&gt;，因為這個時候代表對比度已經太差了，開始要多用眼力與腦力的狀態。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當發現身子不由自主地一直想靠近的時候，應該就是警訊了。就像另一段所說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正造成眼睛過大負擔的其實是近距離長時間用眼，例如字太小為了要讀清楚而拉近距離，或是太暗想看清楚而拉近距離，造成睫狀肌持續收縮得不到休息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要離螢幕太近！不要離螢幕太近！不要離螢幕太近！&lt;br/&gt;&lt;del&gt;替每次都把整個把臉貼在螢幕上的朋朋默哀&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;大 Guy 這樣。今天的轉貼就來點豆知識，我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】CAP 定理與 Remembrance Inc.</title>
      <link>https://igouist.github.io/repost/2024/04/0415-cap-and-remembrance-inc/</link>
      <pubDate>Mon, 15 Apr 2024 23:43:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0415-cap-and-remembrance-inc/</guid>
      <description>&lt;p&gt;今天要推薦的是這篇 CAP 的小故事：&lt;br/&gt;
&lt;a href=&#34;http://ksat.me/a-plain-english-introduction-to-cap-theorem&#34;&gt;A plain english introduction to CAP Theorem - Kaushik Sathupadi&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;為了怕有朋友跟我一樣對 CAP 不太熟，這邊先筆記一下。&lt;/p&gt;
&lt;p&gt;首先讓我們認識 CAP 各自代表的意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt;：使用者總是可以查到最新的資料&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可用性（Availability）&lt;/strong&gt;：使用者總是可以正常讀寫，不會突然送你個 Error&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分區容錯性（Partition tolerance）&lt;/strong&gt;：即使系統之間斷訊了，大家各自還是得做事，做完還要能同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CAP 定理是指&lt;strong&gt;在一致性、可用性、分區容錯性這三項之中，我們只能滿足其中兩項&lt;/strong&gt; :(&lt;/p&gt;
&lt;p&gt;通常來說，我們會先拿著 P 確保服務活著，然後在 C 一致性跟 A 可用性之間痛苦地抉擇&lt;/p&gt;
&lt;p&gt;例如保證可以操作，但是還沒同步完所以會查到舊資料（AP）；或是被卡著乖乖等到資料同步完才能查（CP）等等&lt;/p&gt;
&lt;p&gt;這部分想進一步了解的朋友可以參考最後的延伸閱讀。現在讓我們回到今天推薦的這篇文章&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這篇小故事從「幫客人記得事情」的一人公司(?)開始，&lt;br/&gt;隨著客戶數量變多，老闆決定請老婆進來一起幫忙記東西（殊不知這就是分散式惡夢的開端）&lt;/p&gt;
&lt;p&gt;他們經歷了第一次查詢失敗危機、想出一些同步機制，然後面對可怕的休假等等&lt;/p&gt;
&lt;p&gt;最後…… 結局就留給各位自己看了。&lt;/p&gt;
&lt;p&gt;總之，以後有人問起 CAP 的問題，我決定就甩這篇給他們了 xD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;延伸閱讀，想多認識 CAP 一點的可以繼續看看下面這些文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/henryr/cap-faq&#34;&gt;The CAP FAQ - henryr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/cap%E5%AE%9A%E7%90%86101-3fdd10e0b9a&#34;&gt;CAP 定理 101 — 分散式系統，有一好沒兩好 - 後端新手村&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.puritys.me/docs-blog/article-461-%E4%BB%80%E9%BA%BC%E6%98%AF-CAP-%E5%AE%9A%E7%90%86.html&#34;&gt;什麼是 CAP 定理 - puritys.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】Code Review 的壞味道</title>
      <link>https://igouist.github.io/repost/2024/04/0414-bad-smells-on-code-review/</link>
      <pubDate>Sun, 14 Apr 2024 22:48:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0414-bad-smells-on-code-review/</guid>
      <description>&lt;p&gt;剛剛收件閘巡到一篇 Code Review 的文章，感覺挺適合轉貼上來分享給大家：&lt;br/&gt;
&lt;a href=&#34;https://www.huanlintalk.com/2024/04/code-review-good-and-bad.html&#34;&gt;Code review 的好處與 bad smells - Huan-Lin 學習筆記&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我們在 &lt;a href=&#34;https://igouist.github.io/repost/2024/01/0113-code-review&#34;&gt;1/13&lt;/a&gt; 的時候分享過 Code Review 的這兩篇：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://william-yeh.net/post/2023/09/on-code-review/&#34;&gt;從 Code Review 的小事看大事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cythilya.tw/2020/11/01/google-how-to-do-a-code-review/&#34;&gt;Google 教我如何進行 Code Review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;經由這些文章，我們能大約知道 Code Review 該看哪些東西，又有什麼好處等等（問就是 FOUR EYES!）&lt;/p&gt;
&lt;p&gt;而今天轉貼的這篇 Huan-Lin 大大的〈Code review 的好處與 bad smells〉，則提到了另一個有趣的點：&lt;strong&gt;有問題的 Code Review 會有哪些壞味道？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文章裡面列了三項，並且每一項都用了一小段來解釋。這邊就按照慣例，簡單收一下筆記：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;馬馬虎虎&lt;/strong&gt;：我很忙，看個意思意思就好&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合作無間&lt;/strong&gt;：自個兒人，幫個忙唄&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;粗魯評論&lt;/strong&gt;：挑毛病、戰習慣、叫你改就改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有採用 Code Review 的朋朋們，也可以觀察一下團隊有沒有提到的這些狀況&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】程式設計是一座抽象化的金字塔</title>
      <link>https://igouist.github.io/repost/2024/04/0412-programming-is-a-pyramid-of-abstraction/</link>
      <pubDate>Fri, 12 Apr 2024 23:58:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0412-programming-is-a-pyramid-of-abstraction/</guid>
      <description>&lt;p&gt;最近對「每個人的抽象化思考能力有所不同」蠻有感的。想轉貼之前 vgod 大大的這篇：&lt;br/&gt;
&lt;a href=&#34;https://blog.vgod.tw/2008/10/10/divine-code-7/&#34;&gt;追求神乎其技的程式設計之道(七） - vgod&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個系列真的蠻好看的，但今天推的主要是文章中的這段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我覺得所有的程式都可以看成一個巨大的金字塔，頂端是這個程式的最終目標，一個模糊的概念；底部是細節的程式碼。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而中間是一個經由不斷切割與抽象化所構成的高塔&lt;/strong&gt;，每一個程式都是切割為許多的元件、模組，再切為更細的 class 和 function，再來是最底下的變數與邏輯判斷式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;接著讓我們看看像我這樣的菜鳥跟真正的專業人士，他們所看見的「金字塔」有什麼差別：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很有趣的是，&lt;strong&gt;不同的人看這個塔就會有不同的樣子。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初學者看到的塔只有兩層，他們和人溝通的方法是鉅細靡遺的描述程式碼：「我在這裡寫個 for，第一次把  i設成 0，在迴圈內每次檢查這個陣列的第 i 個元素…」&lt;/p&gt;
&lt;p&gt;在他們眼中只有程式的目標和程式碼本身，所以還可能會寫出下面這種讓人哭笑不得的註解：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = 1;  // 把 a 設為 1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;有些經驗後，會再多看到一層，利用 function 把一段程式碼包裝起來，賦予一個名字和獨特的意義。學會這個後，就可以利用抽象化後的 function 名稱來溝通，例如：「我在這個迴圈裡每次都用 isCaptial 來檢查這個字串是不是都是大寫…」&lt;/p&gt;
&lt;p&gt;再接下去呢，可以再利用 class，利用 design patterns，利用更大的模組、子系統來溝通，認真說起來，這其實是一個無止境的切割。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;隨著我們的經驗增長，我們漸漸可以切出更多的「層」或「模組」，從不同顆粒度的層次去檢視、溝通。這就是抽象化的力量。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最後再截一段我很喜歡的段落：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在資訊科學這個領域，抽象化是個無窮無盡的必要行為。因為世間萬物實在太多太複雜，我們只好不斷把東西歸類，並賦予一個名稱、一個意義，經由這樣的過程我們才能用抽象的語言和符號來溝通，避免每次都要從最底層的瑣碎細節開始說起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而平凡和偉大的程式設計師，我覺得他們之間的差別就在於能看到多少這個高塔中間的分層&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;厲害的高手都很善於切換自己思考的高度，一下能跟你討論高階的系統架構設計，一下又能深入到最底下的組合語言和二進位除錯。他們腦中除了有這高塔每一層的詳盡平面圖，甚至也非常了解不同樓層之間的交互關係。&lt;/p&gt;
&lt;p&gt;平凡的程式設計師大多只能專注於自己所開發的範圍，對於其上的架構或其下的細節都不一定能理清頭緒，萬一出現 bug 也會搞不清楚到底是哪一層出了錯，而被完全無關的細節絆住手腳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望我們都能擁有更多不同層次的視野，共勉之。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這篇文章的後半段聊了一些被語言的慣例限制了思考方式的故事。&lt;/p&gt;
&lt;p&gt;對於這方面，我也推薦 &lt;a href=&#34;https://igouist.github.io/repost/2024/01/0110-language-affect-the-way-you-think-about-programming&#34;&gt;1/10&lt;/a&gt; 轉貼過的這篇：&lt;br/&gt;
&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10201905&#34;&gt;一個語言如果不改變你的思考方式，就不值得學？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一種語言，其實都是一種對資訊的選擇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】Git 同時推送到兩個遠端 Repo</title>
      <link>https://igouist.github.io/repost/2024/04/0411-git-add-push-remote/</link>
      <pubDate>Thu, 11 Apr 2024 23:58:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0411-git-add-push-remote/</guid>
      <description>&lt;p&gt;今天玩 Azure Function 玩太晚了，11:50 才想起來還沒寫推薦= = 果斷來轉貼一則小技巧&lt;br/&gt;
&lt;a href=&#34;https://blog.miniasp.com/post/2021/12/02/Working-with-multiple-git-remote-repositories&#34;&gt;如何讓 Git 可以用一個 git push 同時推送到多個遠端儲存庫 - The Will Will Web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中我個人最常用的就是這段推送到多個 Remote Repo 的部份：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有時候我們會需要一次推送變更到多個不同的 Git 遠端儲存庫，你其實可以設定一個 git push 命令就能同時推送到兩個不同的遠端儲存庫！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://images.plurk.com/4dgWrWvBI1XKSQKoaEepef.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;簡單來說就是先看一下 Repo 現在都抓了哪些遠端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git remote -v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origin  https://github.com/User/demo01.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origin  https://github.com/User/demo01.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後用 &lt;code&gt;git remote set-url&lt;/code&gt; 來把 push 時要推的遠端多設一組就好了～&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote set-url --add --push origin https://github.com/User/demo01.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote set-url --add --push origin https://github.com/User/demo02.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ps. 記得原本的 origin 也要先設一次，養成良好習慣 :)&lt;/p&gt;
&lt;p&gt;我體感上這個實用小技巧還蠻常(?)用到的啦，分享給大家&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】事後檢討：從失敗中學習</title>
      <link>https://igouist.github.io/repost/2024/04/0410-postmortem-culture/</link>
      <pubDate>Wed, 10 Apr 2024 23:16:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0410-postmortem-culture/</guid>
      <description>&lt;p&gt;團隊這幾天有發生需要回顧的問題，馬上收到這篇。剛好拿出來推給各位朋朋：&lt;br/&gt;
&lt;a href=&#34;https://sre.google/sre-book/postmortem-culture/&#34;&gt;Postmortem Culture: Learning from Failure - sre.google&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The cost of failure is education.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什麼是事後檢討postmortem什麼時候要寫&#34;&gt;什麼是事後檢討（Postmortem）？什麼時候要寫？&lt;/h3&gt;
&lt;p&gt;事後檢討就是在翻車之後，把「我們翻車了，翻了三圈半、我們都幹了些什麼來把車翻回來、到底為什麼會翻車、後續要怎麼避免翻車」等資訊記錄下來的東東。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The primary goals of writing a postmortem are to ensure that the incident is documented, that all contributing root cause(s) are well understood, and, especially, that effective preventive actions are put in place to reduce the likelihood and/or impact of recurrence.&lt;/p&gt;
&lt;p&gt;寫一份事後檢討的主要目標是&lt;strong&gt;確保事件被記錄下來，所有貢獻的根本原因都被充分理解，尤其是要採取有效的預防措施來減少再次發生的可能性和/或影響&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那什麼時候會需要寫檢討？這篇文章列了幾個狀況：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定比例的使用者不能使用&lt;/li&gt;
&lt;li&gt;掉資料&lt;/li&gt;
&lt;li&gt;工程師被叫去 on-call 退版&lt;/li&gt;
&lt;li&gt;花了有夠解還沒處理完問題&lt;/li&gt;
&lt;li&gt;監控整個失敗，拖到被人發現&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/i1KPUSy.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;無責任文化&#34;&gt;無責任文化&lt;/h3&gt;
&lt;p&gt;既然都要寫檢討了，大多時候就是有事情搞砸了。為了不要讓寶貴的學習機會淪為情緒發洩和攻擊別人的場合，這篇文前半段就開始提了「&lt;strong&gt;無責任（Blameless）&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;用我們比較熟悉的話來說，就是「對事不對人」，把目光放在「&lt;strong&gt;我們的服務哪些方面還可以改進&lt;/strong&gt;」，藉此得到變得更強大的機會&lt;/p&gt;
&lt;p&gt;從另一方面來說，如果放任大家互咬、培養出互相指責的扭曲文化，那很多問題就會被蓋牌，這樣其實更危險🤔&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a postmortem to be truly blameless, it must focus on identifying the contributing causes of the incident without indicting any individual or team for bad or inappropriate behavior.&lt;/p&gt;
&lt;p&gt;為了使事後檢討是真正無責任（Blameless）的，&lt;strong&gt;它必須專注於確定事件的發生原因，而不指責任何個人或團隊的不良或不適當行為&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;A blamelessly written postmortem assumes that everyone involved in an incident had good intentions and did the right thing with the information they had. If a culture of finger pointing and shaming individuals or teams for doing the &amp;ldquo;wrong&amp;rdquo; thing prevails, people will not bring issues to light for fear of punishment.&lt;/p&gt;
&lt;p&gt;一份無責任的事後檢討假設參與事件的每個人都有良好的意圖，並根據他們所擁有的信息做出正確的決策。如果存在一種指責和羞辱個人或團隊做出“錯誤”決策的文化，人們將因為害怕受罰而不敢揭示問題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;補充：如果想要看一些反例，可以讀前陣子的這篇&lt;a href=&#34;https://mp.weixin.qq.com/s/w7YzdxSrAsIqk2gXBks9CA&#34;&gt;〈迷失在阿里雲的年輕人〉&lt;/a&gt;裡&lt;br/&gt;「濫用的 Code Review 和故障復盤」這一小節。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;事後檢討的審查標準&#34;&gt;事後檢討的審查標準&lt;/h3&gt;
&lt;p&gt;寫完檢討書 v1 之後，會先在團隊內請資深工程師幫看一下 O 不 OK。要看的點有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相關的資料有沒有被收集起來給後人參考？&lt;/li&gt;
&lt;li&gt;影響評估有沒有完整？&lt;/li&gt;
&lt;li&gt;根本原因的分析有沒有足夠深入了？&lt;/li&gt;
&lt;li&gt;後續的行動計劃和修復工作都列好了嗎？有排好優先順序了嗎？&lt;/li&gt;
&lt;li&gt;我們有沒有跟利害關係人（stakeholders）說過結果了？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都搞定之後就可以開始散佈出去了，希望其他人能從我們翻車的姿態中學會教訓。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;wheel-of-misfortune&#34;&gt;Wheel of Misfortune!&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;這句有點咒語的 Feel，不知道怎麼翻，「衰鬼之輪」嗎？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;後半段一些文化相關的東西，像是讀書會、每月檢討等等的都很平常，但這個輪子還蠻有趣的&lt;/p&gt;
&lt;p&gt;基本上就是大家（抓著新來的菜鳥 SRE）一起，&lt;strong&gt;把過去的某次事故報告給調出來，現場就開始當劇本來跑團&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New SREs are often treated to the Wheel of Misfortune exercise (see Disaster Role Playing), in which a previous postmortem is reenacted with a cast of engineers playing roles as laid out in the postmortem. The original incident commander attends to help make the experience as &amp;ldquo;real&amp;rdquo; as possible.&lt;/p&gt;
&lt;p&gt;新進的 SRE（網站可靠性工程師）通常會參與「厄運之輪」的練習（參見災難角色扮演），在這個練習中，以前的事故回顧會被重新演繹，工程師們扮演著事故回顧中所規定的角色。原始的指揮官也會參與其中，以盡可能使體驗更加「真實」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事故還可以放個幾年之後拿出來當桌遊(?)，有種挺歡樂的感覺。這樣我很願意好好寫檢討書耶 xD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天嘗試用新的格式來推薦，本來想說看能不能縮短每次整理心得的時間&lt;/p&gt;
&lt;p&gt;不過反正每次要打利害關係人，都會打成厲害關西人，選字的時間就比縮短的時間久了，根本沒差= =&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】軟體開發者的價值</title>
      <link>https://igouist.github.io/repost/2024/04/0408-the-values-of-software-developer/</link>
      <pubDate>Tue, 09 Apr 2024 00:06:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0408-the-values-of-software-developer/</guid>
      <description>&lt;p&gt;今天朋友丟了卡米哥大大的另一篇文章給我，立馬選擇轉貼上來：&lt;br/&gt;
&lt;a href=&#34;https://etrexkuo.medium.com/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%83%B9%E5%80%BC-991ba03d140f&#34;&gt;軟體開發者的價值 - 卡米哥&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;身為一個軟體開發者，我一直以來都想知道我的價值到底在那裡。在我長期的觀察和思考，終於有了一個初步的答案，若站在老闆的角度來看，我的價值其實就是我寫下來的程式碼總共幫老闆賺了多少錢。&lt;/p&gt;
&lt;p&gt;因為老闆僱用你，就是希望你可以幫他打造一台自動賺錢機器，然後靠機器運轉來達成自動賺錢。若要深入探討的話，我想先談談什麼是價值，以及什麼是程式語言，從思考一行程式的價值開始，到思考軟體開發者的價值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;從這個出發點開始，作者大大一路思考：什麼是價值？什麼是程式語言？程式的價值呢？開發者的價值呢？&lt;/p&gt;
&lt;p&gt;其中一個思路我覺得不錯，那就是「&lt;strong&gt;程式的價值 = 執行次數 * 執行一次生成的平均價值&lt;/strong&gt;」，&lt;br/&gt;
也就是說：&lt;strong&gt;程式執行是會賺錢的&lt;/strong&gt;（當然有些程式的價值可能是負的 xD）&lt;/p&gt;
&lt;p&gt;而我們軟體開發者，就需要運用技術力來讓程式能夠繼續跑下去、繼續賺更多錢。&lt;br/&gt;
所以，開發者提升開發速度、提升程式碼品質等等，都是在提高讓程式能繼續跳表(?)的戰力&lt;/p&gt;
&lt;p&gt;這個觀點也能夠解釋為什麼我們應該追求上一篇文章提到的那些價值觀（程式碼品質、維護成本、修改成本等等），因為這些都影響了我們產出的價值&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;此外，還有幾個我特別標記的點。其中一項就是關於技術債的部份：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在我之前的工作經歷當中，大部分時間是在做新創公司的案子，而新創公司的客戶數通常趨近於零，我曾經開發並且上線一個新的網站，卻始終沒有用戶真的去使用，經營了一兩年，結果測試環境上的資料還比正式環境上的還多，在這種情況下，即便程式的效能再好，沒人來使用的網站所產生的價值其實是趨近於零。&lt;/p&gt;
&lt;p&gt;= &lt;strong&gt;沒有人在用的程式，產值是零&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;當時是案主付錢委託我們開發網站，所以我們有收到錢，只是網站並沒有替案主賺到錢。我們採用的技術很好，自動測試也寫的很完整，卻做出了一個垃圾，而在此同時，我接了另一個案子的長期維護，這個專案裡程式的架構很亂，欠了一堆技術債，而且都沒寫測試，但是客戶人數足夠而且一直有下訂單，所以反而這個案子就有在賺錢。&lt;/p&gt;
&lt;p&gt;= &lt;strong&gt;即便是充滿技術債的程式也能產生價值&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我發現像我這樣的菜鳥常常會有一種迷思：這專案的技術債有夠多！真沒價值！&lt;/p&gt;
&lt;p&gt;但不是這樣的，並不是臭不臭就可以斷定程式的價值。只要這個專案還是收入來源，它其實就還在產生價值。&lt;del&gt;你養蟲，蟲也養你&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;就像&lt;strong&gt;泳池的收入並不是取決於裡面的尿多不多，而是進來游的人多不多嘛&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而我們的目標就是用我們的技術力和解決問題的能力，替它排除更多的障礙、讓它繼續產生價值，然後把錢帶回來給我們(?)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那如果我們做不到呢？例如上頭就是想要你寫一些沒人用的東西？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然你在一家公司內可能不能決定要寫什麼程式，但你可以選擇要去哪一家公司寫程式，去能被執行最多次，且單次執行所生成價值最高的專案寫程式，則可以最大化自己的價值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒錯！是時候歡迎我們 &lt;a href=&#34;https://igouist.github.io/repost/2024/02/0227-change-your-company&#34;&gt;2/27&lt;/a&gt; 推薦過的這篇「&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10329311&#34;&gt;上游思維&lt;/a&gt;」的結論：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Change your company, or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change your company.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】軟體開發的價值觀</title>
      <link>https://igouist.github.io/repost/2024/04/0407-the-values-of-software-development/</link>
      <pubDate>Sun, 07 Apr 2024 23:02:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0407-the-values-of-software-development/</guid>
      <description>&lt;p&gt;收假前來看點故事吧，今天要推薦的是這篇：&lt;br/&gt;
&lt;a href=&#34;https://etrexkuo.medium.com/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%9F%B9%E9%A4%8A-8fee43c76195&#34;&gt;軟體開發者的培養 - 卡米哥&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇的主軸圍繞在作者 20 年來的學習歷程，以及過程中培養的各項價值觀&lt;/p&gt;
&lt;p&gt;從剛入門大家都有過的「寫了能跑、越短越好」開始，隨著問題越來越難、越複雜，也開始有了效能、可讀性、可維護性等等的考量&lt;/p&gt;
&lt;p&gt;作者很貼心的把培養出來的這些價值觀分項列點地說明。推薦大家直接過去看原文，段落明確，說明清晰，值得收藏&lt;/p&gt;
&lt;p&gt;但因為我畫的重點太多了（老毛病），多到沒辦法直接整車拉過來，因此今天也按照慣例，簡單粗暴地列一下內容收進我的筆記庫就好&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼執行成本效能&#34;&gt;程式碼執行成本（效能）&lt;/h3&gt;
&lt;p&gt;要處理的資料量變大了，程式寫爛了要跑半天了，得開始重視效能&lt;br/&gt;
➡️ 學習資料結構和演算法，辨別程式執行時間和實作方案的優劣&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼修改成本可維護性&#34;&gt;程式碼修改成本（可維護性）&lt;/h3&gt;
&lt;p&gt;專案開始被改來改去了，每次修改都要花成本&lt;br/&gt;
➡️ 如果能讓修改更方便快速，那當然就可以增加產能&lt;br/&gt;
➡️ 需要版本控制，以及改用能夠抽換實作的寫法&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼理解成本可讀性&#34;&gt;程式碼理解成本（可讀性）&lt;/h3&gt;
&lt;p&gt;改東西的時候會因為程式碼太亂，光是讀懂就花了大量時間&lt;br/&gt;
➡️ 專案規模越來越大，要讀的東西也越來越多，花的時間也越來越長&lt;br/&gt;
➡️ 只能動手整理程式碼，開始乖乖拆模組、好好取名等等&lt;/p&gt;
&lt;p&gt;（作者推薦看怦然心動的人生整理魔法，我也有點怦然心動）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼彈性&#34;&gt;程式碼彈性&lt;/h3&gt;
&lt;p&gt;開始觀察需求的生長方向來留擴充點，使用物件導向原則和設計模式來保留彈性&lt;/p&gt;
&lt;p&gt;（我個人感覺有點像是可維護性的延伸議題，而且我還菜，有時會分不出來彈性和過度設計 QQ）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;程式碼測試成本&#34;&gt;程式碼測試成本&lt;/h3&gt;
&lt;p&gt;重構（作者很誠實，他寫「重寫」）的時候很容易改壞之前寫好的部分&lt;br/&gt;
➡️ 專案規模越大也就代表測試成本越高&lt;br/&gt;
➡️ 需要開始碰自動化測試了&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;保留修改權保留反悔權&#34;&gt;保留修改權、保留反悔權&lt;/h3&gt;
&lt;p&gt;如果面臨兩個解決方案，想一想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選擇某個方案之後，要再進一步修改的成本有多高？&lt;/li&gt;
&lt;li&gt;選擇某個方案之後，想反悔了改成另一個方案的成本有多高？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如修改變數名稱的成本遠低於修改 DB 的欄位；或是存圖片的時候先保存完整圖片，把真的效能炸裂的時候換成保存壓縮後圖片的選項保留起來等等&lt;/p&gt;
&lt;p&gt;總之就是：&lt;strong&gt;避免做出悔不當初的選擇&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;學習前人經驗&#34;&gt;學習前人經驗&lt;/h3&gt;
&lt;p&gt;有一句我覺得作者講得挺好，切中我心，直接轉上來&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一開始會以為只會用套件做東西的人很弱，能自己實作才強，但現在完全不會這樣想。
&lt;strong&gt;只會靠自己累積經驗的學習方式最慢，能吸收他人經驗來加速學習，才能站在巨人的肩膀上。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;前面列了蠻多價值觀的，那如果這些價值觀衝突了呢？&lt;/p&gt;
&lt;p&gt;這時候就要根據情況對價值觀進行優先度的排序：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在不同的情況下，價值觀的優先序也會跟著不同，例如開發完成就不會再增加需求的小專案就不需要考慮修改成本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;價值觀的篇幅結束了之後，作者還談了一些通靈能力、協作能力的部分。例如多人開發的時候，就像同居時每個室友對乾淨的看法不同，勢必要先喬好，最好能留下規約，把髒亂的環境打掃成乾淨的環境&lt;/p&gt;
&lt;p&gt;但因為我信奉的是&lt;strong&gt;游泳池原則（軟體專案就像游泳池，每個人都會在裡面尿尿）&lt;/strong&gt;，所以就不特別截了。&lt;/p&gt;
&lt;p&gt;只是最後有一段讓我有被打到的港覺：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;身為資深軟體開發者，應該要有能力培養技術等級低的開發者，而不是排擠或邊緣化他們。一&lt;strong&gt;個有能力培養新進開發者的資深開發者是更有價值的。在遊戲裡，30% 團隊戰鬥力加成的靈氣，通常是很強的技能。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要是我們整隊都有 30% 靈氣還能疊加該有多強啊！這也許正是現在的我所缺少的。特別筆記下來。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;真的很喜歡看這些前輩們的觀念文或經驗談，感覺像是窺見前輩們思考裡的其中一角，正在挖的大泥球都變香了呢&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天轉貼一篇文章】我是想睡覺的工程師，我想要提神，所以我需要打翻咖啡</title>
      <link>https://igouist.github.io/repost/2024/04/0405-user-story-and-coffee/</link>
      <pubDate>Fri, 05 Apr 2024 23:58:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0405-user-story-and-coffee/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XVjCQJD.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;前兩天跟朋友聊到 User Story，馬上翻出之前收藏的這篇：&lt;br/&gt;
&lt;a href=&#34;https://blog.akanelee.me/2020/08/14/user-story-and-coffee/&#34;&gt;打翻咖啡不能解決問題，談 User Story - 嫁給 RD 的 UI Designer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們先簡單地認識一下 User Story：&lt;br/&gt;「我是 囗囗囗，我需要一個方法來幫助我 囗囗囗，這樣我就能 囗囗囗」&lt;/p&gt;
&lt;p&gt;例如說「我是工程師，我需要一個方法來減少參與沒卵用的會議，這樣我就能專心開發」(?)&lt;/p&gt;
&lt;p&gt;有了這個 User Story 香香東西，我們大家就可以&lt;strong&gt;先對焦好需求，再來討論解決方案&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;備註：對 User Story 想進一步了解的朋友，可以參考這篇：&lt;a href=&#34;https://medium.com/3pm-lab/3-use-cases-for-writing-effective-user-stories-cd42625fef53&#34;&gt;產品管理流程中，使用者故事（User Story）常見的三種使用情境 - Anne Hsiao&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而今天要推薦的這篇，就是用非常精準的方式告訴你&lt;br/&gt;「&lt;strong&gt;當 User Story 寫歪的時候&lt;/strong&gt;」會有什麼結果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. 我想要抽菸。&lt;br/&gt;
B. 我是疲倦想睡覺的上班族，想要提神。&lt;br/&gt;
C. 我是疲倦想睡覺的工程師，想要提神，好讓我能專心認真寫程式。&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;句型分析：&lt;br/&gt;
Ａ句是業界最常見寫法，不知道使用者是誰、也不知道為啥要做這件事，只講了「功能」，然後就要開工。&lt;br/&gt;
Ｂ句稍微好一些，勉強能猜測是誰要做這件事，功能開發出來要給誰用，猜歪的機率不低。&lt;br/&gt;
Ｃ句完整地說明是誰、想要做什麼、做這事的動機，腦海裡浮現的會是創意而不是創傷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;上面的例子中，A 的場景粗暴，什麼資訊都沒有，只能通靈&lt;br/&gt;
（之前遇過更扯的，投影片丟出來啥也沒解釋，馬上就開始問功能什麼時候會做好）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你習慣用 A 句和專案成員討論功能，恭喜你，改來改去的日子永無止境，絕對是一條邁向通靈王的偉大航道。而且這條道路註定是孤獨的，同事都會討厭你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而 B 雖然抓到場景了，但是非常容易翻車。&lt;br/&gt;
畢竟，&lt;strong&gt;如果你只是想提神，那打翻咖啡的確比喝咖啡更加提神&lt;/strong&gt;，對吧？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你習慣用 B 句和專案成員討論功能，那你會得到一杯咖啡然後被當面打翻它。沒錯啊～打翻咖啡超級提神！絕對比只給你一杯咖啡更有效，絕對能超越競品，使用者肯定超喜歡的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，從這杯咖啡中我們可以學到：即使不是撰寫 User Story，&lt;br/&gt;討論需求時仍然要注意「&lt;strong&gt;使用者、情境、需求、動機&lt;/strong&gt;」這些必要資訊，才更有機會有效溝通。&lt;/p&gt;
&lt;p&gt;否則，我們就只能邊通靈邊倒咖啡了 xD&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天轉貼一篇文章】從動圖認識負載平衡（Load Balancing）</title>
      <link>https://igouist.github.io/repost/2024/04/0404-load-balancing/</link>
      <pubDate>Thu, 04 Apr 2024 23:38:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0404-load-balancing/</guid>
      <description>&lt;p&gt;今天想轉貼有香香動畫(?)的科普文：
&lt;a href=&#34;https://samwho.dev/load-balancing/&#34;&gt;Load Balancing - Sam Rose&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章用了簡單的動畫，讓讀者能直觀地了解當下 Request 的傳送狀況（看著球被丟給伺服器，意外地蠻療癒的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xhY79Hx.gif&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;從最簡單的 1 個來源發送給 1 台伺服器（=只要一直把球丟過去給伺服器就好）開始&lt;/p&gt;
&lt;p&gt;接著，伺服器開始吃不下了。我們想要增加伺服器數量，但就需要把 Request 分配給他們兩台伺服器，這時候最簡單粗暴的做法就是&lt;strong&gt;輪詢（=輪流發球給他們）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然後再加入一些會在實務上遇到的狀況：每顆球（Request）要處理的工可能不一樣大，伺服器也不一定都一樣強。&lt;/p&gt;
&lt;p&gt;這樣一來，單純平均發球的輪詢作戰很快就會遇到胃口比較小的伺服器開始吃不下的尷尬狀況&lt;/p&gt;
&lt;p&gt;為了減輕這個狀況，我們可以在每個伺服器前面加個小小的&lt;strong&gt;排隊區（Request Queues）&lt;/strong&gt;，雖然要排隊勢必會拉長時間，但至少掉球的狀況就減少了&lt;/p&gt;
&lt;p&gt;再進一步的話，我們可以&lt;strong&gt;針對伺服器的消化能力來替他們加個權重&lt;/strong&gt;，不過手動標權重很容易翻車，所以要想辦法讓他自動調整權重，也就是要能「動態加權輪詢」&lt;/p&gt;
&lt;p&gt;例如根據最近三次的執行時間來計算伺服器的胃口(?)，再決定要發幾顆球給伺服器，比較餓吃比較快的就多發一點(??)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;除了吃不下把球吐掉以外，如果吃太久吃到 Timeout 也是不行的。而針對延遲問題，這篇最後介紹了「峰值指數加權移動平均（PEWMA）」&lt;/p&gt;
&lt;p&gt;做法其實也很直覺：抓一下最近這些伺服器的延遲如何、都處理了多久，然後再經過一些數學魔法(?) 來算出下一個 Request 給哪台伺服器比較好、看能不能讓延遲更少&lt;/p&gt;
&lt;p&gt;ps. 附上數學魔法的段落給那些看得懂的朋友：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For each server, the algorithm keeps track of the latency from the last N requests. Instead of using this to calculate an average, it sums the values but with an exponentially decreasing scale factor. This results in a value where the older a latency is, the less it contributes to the sum. Recent requests influence the calculation more than old ones.&lt;br/&gt;
對於每個伺服器，該演算法會追蹤從最後 N 個請求開始的延遲時間。不同於使用此來計算平均值，它將這些值相加，但使用指數遞減的比例因子。這導致一個值，其中較舊的延遲對總和的貢獻較小。最近的請求比舊的請求更影響計算。&lt;/p&gt;
&lt;p&gt;That value is then taken and multiplied by the number of open connections to the server and the result is the value we use to choose which server to send the next request to. Lower is better.&lt;br/&gt;
然後，將該值乘以與伺服器的開放連接數，結果就是我們用來選擇下一個請求要發送到哪個伺服器的值。數值越低越好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;但是相較前面著重在不要把球吐掉的「動態加權輪詢」，這套注重延遲問題的「峰值指數加權移動平均」就比較有可能發生更嚴重的吃不下問題&lt;/p&gt;
&lt;p&gt;作者有進行一些測試並繪製圖表，有興趣的朋友可以參考看看。感覺還是要根據狀況、評估對延遲或掉包的容忍程度，再決定採用怎樣的負載平衡策略會比較好&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊，我們明天（大概）見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天轉貼一篇文章】用 Microsoft Clarity 觀察使用者行為</title>
      <link>https://igouist.github.io/repost/2024/04/0402-microsoft-clarity/</link>
      <pubDate>Tue, 02 Apr 2024 23:58:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/0402-microsoft-clarity/</guid>
      <description>&lt;p&gt;這兩天在幫部落格加上新玩具，來轉貼一篇寫得挺完善的介紹文：&lt;br/&gt;
&lt;a href=&#34;https://www.letswrite.tw/microsoft-clarity/&#34;&gt;用 Microsoft Clarity 網站分析工具，觀察使用者行為 - Let&amp;rsquo;s Write&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clarity 是微軟把拔推出的免費網站分析工具，其中有些特別的地方，例如&lt;strong&gt;憤怒點擊&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這個也很有趣，光看名稱就覺得有趣了 XD~&lt;/p&gt;
&lt;p&gt;一般我們自己在看別人家的頁面，比方看到個「點我下載懶人包」之類的按鈕，如果點了發現沒反應後，我們會怎麼做？我們會一直點、繼續點、猛點 10 次、怒點 100 次！&lt;/p&gt;
&lt;p&gt;這個就是 Rage clicks&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一個讓我覺得小驚豔的功能是&lt;strong&gt;側錄（Recordings）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;這個功能可以直接看使用者在你的畫面上是怎麼操作的&lt;/strong&gt;，有種看使用者開著直播看自己文章的感覺，相當新奇。&lt;del&gt;所以也能很明顯地看到使用者複製了文章裡的程式碼然後跳窗走人……&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hO6LQPH.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，側錄紀錄上也只有一些模糊的識別內容，所以可以不用擔心錄得太超過(?)的問題&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;左邊是清單，可以照想要的方式來排列順序，右側就是點擊清單後會看得到的側錄影片。&lt;/p&gt;
&lt;p&gt;這邊可以看到，清單上會顯示的是：裝置、作業系統、國家，這三個跟使用者比較相關，是一個比較模糊的分類。&lt;/p&gt;
&lt;p&gt;畢竟如果可以看到「這個人就是王小明，就是他，這就是錄他在幹什麼」的情況，那個資及隱私的問題就大了。&lt;/p&gt;
&lt;p&gt;所以只提供一個模糊的分類是可以理解及接受的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其他功能可能要等子彈飛一會兒再來探探。&lt;br/&gt;有興趣的朋友也可以先戳戳看官方給的 &lt;a href=&#34;https://clarity.microsoft.com/demo/projects/view/3t0wlogvdz/dashboard&#34;&gt;Demo 頁面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那麼，今天的轉貼就到這邊。我們明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】可觀測性 30 天</title>
      <link>https://igouist.github.io/repost/2024/04/observability-in-devops-30-days/</link>
      <pubDate>Mon, 01 Apr 2024 23:46:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/04/observability-in-devops-30-days/</guid>
      <description>&lt;p&gt;看見前輩貼了「可觀測性」的鐵人賽筆記，翻了一輪發現挺香的，馬上轉貼上來：&lt;br/&gt;
&lt;a href=&#34;https://github.com/marcustung/Observability-in-DevOps/blob/main/README.md&#34;&gt;marcustung/Observability-in-DevOps: Observability 101 (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這些文章（我感覺）能切成幾個部份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些系統穩定性的東東。例如災害復原、高可用性和高可靠性之類的&lt;/li&gt;
&lt;li&gt;可觀測性 Observability&lt;/li&gt;
&lt;li&gt;好像很猛的新標準 OpenTelemetry&lt;/li&gt;
&lt;li&gt;香香的 Grafana Cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每篇文章的開場都會先說明重點、結束的時候也有知識點小結，非常貼心&lt;/p&gt;
&lt;p&gt;因為系列文本身蠻長的，能延伸的知識點也蠻多的。這邊就按照慣例，列一些我印象比較深刻的點&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我在看到主題的時候，第一個疑問其實是：&lt;strong&gt;所以我的團隊有了可觀測性可以幹啥吃？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而在 Day 10 的可觀測性介紹裡，這一段回答了我的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;白話點背後是希望可以回答以下問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;請求經過哪些服務 ? 系統中哪個部分 loading 最大&lt;/li&gt;
&lt;li&gt;當服務發生緩慢時，哪裡慢(Bottlenecks)以及可能原因是什麼&lt;/li&gt;
&lt;li&gt;當服務無法使用時，錯誤及可能異常的原因是什麼&lt;/li&gt;
&lt;li&gt;當使用者反映操作 timeout，但在 Dashboard 上顯示平均請求都很快，要如何找到其可能緩慢原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;目的是希望工程團隊可以理解並解釋系統的現況（增加系統透明度，而不是靠通靈），當系統出現問題時，可以第一時間了解爆炸範圍，進行緊急問題的處理已加速恢復的時間。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;身為通靈師的一員，看到這段開始覺得「哦，好像不錯哦，竟然不是靠直覺嗎🤔」&lt;/p&gt;
&lt;p&gt;而在 Day 28 的時候又看到了更強烈的對比：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你是開發或是運維團隊人員，當線上系統或負責應用程式遇到問題時，會做哪些事情來協助定位問題&lt;/p&gt;
&lt;p&gt;警報 (Alert) : &lt;br/&gt;
當系統監控偵測到異常或是特定指標 (Metrics) 超過預定的閥值或水位時，系統會產生告警警報，對於 RD 及團隊來說，這是首先被告知問題的方式。&lt;/p&gt;
&lt;p&gt;儀錶板 (Dashboard) :&lt;br/&gt;
收到警報後，RD 可能會先查看 Dashboard 了解異常背後的數據。Dashboard 提供即時的數據視覺化，幫助 RD 快速定位問題範圍和影響程度。&lt;/p&gt;
&lt;p&gt;查詢 (Adhoc Query) : &lt;br/&gt;
若 Dashboard 所提供的資訊不足，或是為了要更精準確定問題原因，RD 會使用 adhoc Query 進一步的來查找特定時間的數據資料來確認問題。&lt;/p&gt;
&lt;p&gt;日誌 (Log Aggregation) : &lt;br/&gt;
確認問題範圍後，RD 會查找相關的系統或是應用程式 Log，Log 中可能包含更明確的應用程式執行資訊，或是問題的詳細描述與錯誤訊息，幫助 RD 更有機會找到問題的具體原因&lt;/p&gt;
&lt;p&gt;分散式追蹤 (Distributed Tracing) : &lt;br/&gt;
如果應用程式架構是分散式系統，RD 會使用分散式工具來找特定請求式如何在多個服務間流動過程，有助於找到性能瓶頸或可能失敗的原因。&lt;/p&gt;
&lt;p&gt;修復 (Fix) : &lt;br/&gt;
一旦問題被定位，就有機會定位問題並進行緊急修復的動作。可能解決方式式調整配置設定檔、修正錯誤的程式或是重新啟動服務(重開治百病)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感覺是專業工程師的抓蟲流程。但像我們專業靈媒團隊，平時出事的反應更接近 Day 29 的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;口而相傳，緣分到了就會修好&lt;br/&gt;
各自通靈&lt;br/&gt;
(文件)定義流程 + 系統&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通著通著就哭了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另一組記憶點是來自於我原先的誤會：&lt;strong&gt;「可觀測性不就是插一狗票 Log 嗎？」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Day 11 的「從哨塔到全景地圖」有稍微讓我認識了一點：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;舉個玩世紀帝國的例子，&lt;strong&gt;監控就像是在已經打開的地圖前提下，在覺得危險的位子設立哨塔及哨兵&lt;/strong&gt;，當有人來攻擊時就會有叮叮叮聲響來提醒玩家派兵防守&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可觀測性就是一打開地圖就已經全開&lt;/strong&gt;，當別的玩家派兵攻打自己的範就可以看到派人的兵種是甚麼及人數，可以做更有效的化解對方玩家的攻擊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好像有點懂了：插監控就像是深入敵方野區插眼，可觀測性是想直接開圖&lt;/p&gt;
&lt;p&gt;&lt;del&gt;而我們團隊都是銅牌瞎子，所以小地圖根本是黑的&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;同樣讓我長知識的還有「三本柱 Metrics、Logging 與 Tracing」&lt;/p&gt;
&lt;p&gt;這邊直接節錄文章中的介紹：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Metrics : 指標&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用來衡量和監控系統性能的關鍵數據指標，通常是數字化的方式呈現(可聚合數字)。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;這些數據通常用於即時監控系統，以確保它們在正常運行範圍內。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;例如 : CPU使用率、記憶體使用率、請求速率、錯誤率等都可以通過指標來衡量&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Structured Log : 結構化日誌&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日誌包含有關離散事件的結構化或可讀的詳細資訊。用於提供請求的細節與上下文。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;日誌通常被用來瞭解系統中特定事件的發生情況，以及在事件發生時提供上下文。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;例如，錯誤日誌、訪問日誌、應用程式日誌等都是常見的日誌類型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Distributed Tracing : 分散式追蹤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用於追蹤複雜分佈式系統中請求的過程，以便了解請求從一個元件到另一個元件的傳遞情況。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;它有助於識別性能問題和瓶頸，並提供有關請求流程的詳細信息。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;通常，追蹤由一個唯一的標識符（例如 traceID）來關聯相關事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解是這樣，供參考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果服務 CPU 狂噴猛噴，直接噴到 100% 120% 500%，這個是 Metrics&lt;/li&gt;
&lt;li&gt;如果在程式碼裡面偷寫紙條印出來，例如 &amp;ldquo;Oops, ERROR!&amp;quot;，這個是 Logging&lt;/li&gt;
&lt;li&gt;如果跨了三四個服務只好摸一串粽子找過去，這個是 Tracing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在這之前我基本上都一律叫成 Log，同事問問題也是兩手一攤：你去查 Log 啊= =&lt;/p&gt;
&lt;p&gt;想起一臉疑惑的朋友們，原來混在一起搞撒尿牛丸的是我🥲&lt;/p&gt;
&lt;p&gt;補充：今天和朋友(?)詢問了一些 Metrics、Logging 與 Tracing 的例子，這個對比貼上來給各位參考：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bqleCrv.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2WJ0Gyy.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;總覺得其中一種做法特別熟悉🤐&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;後面還有蠻多記憶點的，但寫到這邊發現篇幅有點爆，Discord 竟然發不出去了= = 加速一下&lt;/p&gt;
&lt;p&gt;中間段（Day 17~）的主角都是&lt;strong&gt;不明覺厲(?)的可觀測性全新標準 OpenTelemetry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如介紹 OpenTelemetry 的規範和實作，例如協定和 API 規格，接著逛了一圈 Demo&lt;/p&gt;
&lt;p&gt;能夠理解有個大一統規範能對可觀測性有多大的幫助，但因為我個人沒玩過，看這段的時候基本上就是「哦哦這新標準好像猛猛的」&lt;/p&gt;
&lt;p&gt;可能之後找時間碰才會有更深的心得，已經摸過的朋友也歡迎幫忙補充資訊上來&lt;/p&gt;
&lt;p&gt;&lt;del&gt;最後的 Day 20+ 開始介紹 Grafana Cloud，離我就更遠了，這邊就略過 xD&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;除了上面的兩大塊深水區以外，我還有兩個小小點特別有印象：&lt;/p&gt;
&lt;p&gt;Day04 的 SLA -&amp;gt; SLO -&amp;gt; SLI 這條：&lt;/p&gt;
&lt;p&gt;我們在 3/19 轉貼&lt;a href=&#34;https://igouist.github.io/repost/2024/03/0319-reorder-message&#34;&gt;德魯大大的 Re-Order Message&lt;/a&gt; 文章時，裡面有提到「對整個系統的 SLO 期待」這一段。在這裡串了起來：&lt;/p&gt;
&lt;p&gt;我們跟客戶簽了 SLA 說我們 99.99% 穩。然後我們為了達標（=不要賠錢），就訂了更具體的 SLO，而為了衡量這些指標，就搞了 SLI&lt;/p&gt;
&lt;p&gt;啊如果 SLI 量下去，抱歉沒達到 SLO，就準備按照 SLA 簽的東西跪地開賠。大概是這樣(?)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另一個小小點是 Day 30 的可觀測性驅動開發（Observability Driven Development ,ODD）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就像 TDD 測試驅動開發強調在寫程式碼前要先寫測試案例，以提高程式碼的保護與品質。ODD 在建立可觀測性系統方面也是如此，&lt;strong&gt;可觀察性驅動開發意味著開發人員在編寫程式碼之前考慮可觀察性信號或是監控方法&lt;/strong&gt;，適用於元件級別或是整個系統。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也許，我是說也許，我們開發之前的確就該想好後續該怎麼監測跟維護，而不是把鍋端給後面的苦主來通靈。對吧？對吧前輩們？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;三十天太長了，很難在這篇推薦文裡介紹完。我已經列了許多我有筆記的部份，但像是 OpenTelemetry 這些硬東西，我個人力有未逮(?)&lt;/p&gt;
&lt;p&gt;還是推薦有興趣的朋友直接閱讀，畢竟文章結構簡單直接，有大綱有小結，拆成每一天的話也不算長，有名詞或觀念也能再自己延伸，感覺不虧&lt;/p&gt;
&lt;p&gt;不說了我要去拆文章內容到我的筆記庫了= =&amp;rdquo;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】寫給工程師看的減肥指南</title>
      <link>https://igouist.github.io/repost/2024/03/0329-a-weight-loss-guide-for-engineers/</link>
      <pubDate>Fri, 29 Mar 2024 23:59:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0329-a-weight-loss-guide-for-engineers/</guid>
      <description>&lt;p&gt;今天還在持續厭世，來轉貼前天看&lt;a href=&#34;https://igouist.github.io/repost/2024/03/0327-human-system-optimization&#34;&gt;延壽指南&lt;/a&gt;的時候撿到的工程師減肥指南(?)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@threath/%E5%AF%AB%E7%B5%A6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E7%9A%84%E6%B8%9B%E8%82%A5%E6%8C%87%E5%8D%97-part-1-%E4%B8%8D%E9%81%8B%E5%8B%95%E6%B8%9B%E6%8E%89-16kg-79c8871cd5f5&#34;&gt;寫給工程師看的減肥指南 — Part 1 不運動減掉 16kg - Sean Cheng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@threath/%E5%AF%AB%E7%B5%A6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E7%9A%84%E6%B8%9B%E8%82%A5%E6%8C%87%E5%8D%97-part-2-%E7%94%9F%E9%85%AE%E7%90%86%E8%AB%96-%E8%83%B0%E5%B3%B6%E7%B4%A0%E7%90%86%E8%AB%96-16280c0de7ee&#34;&gt;寫給工程師看的減肥指南 — Part 2 生酮理論 + 胰島素理論 - Sean Cheng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@threath/%E5%AF%AB%E7%B5%A6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9C%8B%E7%9A%84%E6%B8%9B%E8%82%A5%E6%8C%87%E5%8D%97-part-3-%E8%85%B8%E9%81%93%E8%8F%8C%E7%90%86%E8%AB%96-d27c65b82249&#34;&gt;寫給工程師看的減肥指南 — Part 3 腸道菌理論 - Sean Cheng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我喜歡這系列的點在於，第一篇作者就直接列出影響他最大的幾個減肥理論，然後還分享了從 2020 到 2022 的歷程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在前面半年我就擬定了大方向，後面則是陸續補齊完整概念、建立專屬於自己個人的理論。&lt;br/&gt;總結起來，影響我最大的三個減肥理論是：&lt;/p&gt;
&lt;p&gt;生酮理論 + 胰島素理論：&lt;br/&gt;人可以使用油脂當作身體能量，因此幾乎不吃澱粉也能活的好好的。&lt;/p&gt;
&lt;p&gt;腸道菌理論：&lt;br/&gt;每個人的腸道菌相不同，因此即使吃入相同的東西，吸收的熱量、營養成分卻不會一樣。&lt;/p&gt;
&lt;p&gt;細胞層級的代謝理論：&lt;br/&gt;人使用油脂當身體能量的能力，和呼吸習慣、細胞油脂組成、粒線體數量有關。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;針對這些理論，在後續也逐項進行說明。並且引用了一些影片（或是說，很多影片），可以馬上就連出去科普科普：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VzPD009qTN4&#34;&gt;How Bacteria Rule Over Your Body – The Microbiome - youtube&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VzPD009qTN4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;在第一篇也有把要做的事、別做的事情清楚地列出來，而第二篇、第三篇也有很好懂的說明。例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;勞力工作者主要使用醣類當作日常能量，在活動時使用肌肉、肝臟中的儲存的肝醣，並在吃飯時透過進食澱粉、水果、肉類(可轉換成醣)補充回來，每天的生活循環可能如下：&lt;/p&gt;
&lt;p&gt;吃午飯(醣類補充到 80%) → 勞力工作(醣類降低到 30%) → 吃晚餐 (醣類補充到 80%) → 睡覺8小時(醣類降低到 60%) → 吃早餐(醣類補充到80%)…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;但在國家發展到以知識型產業為工作主體的情況下，大多數人的生活型態已經完全不適合每天吃大量澱粉，因為其醣類循環狀況會變成下面這樣：&lt;/p&gt;
&lt;p&gt;吃午飯(醣類補充到 110%) → 坐著工作(醣類降低到 100%) → 吃晚餐 (醣類補充到 120%) → 睡覺8小時(醣類降低到 95%) → 吃早餐(醣類補充到110%)…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我個人還有下午茶、點心跟宵夜，都不知道補充到幾 % 去了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前陣子體檢一卡車紅字，最近也一直覺得身體怪怪的。在前天翻延壽指南的時候，順著找到了這篇，感覺多少認識了一些新知識（當然，有沒有身體力行又是另一回事 xD），也轉貼上來給各位朋朋們參考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】寫了無限 alert 迴圈竟然要被抓？！</title>
      <link>https://igouist.github.io/repost/2024/03/0328-alert-alert-alert/</link>
      <pubDate>Thu, 28 Mar 2024 21:05:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0328-alert-alert-alert/</guid>
      <description>&lt;p&gt;今天頭還是很暈，簡單分享一下今天看到的有趣文章：&lt;br/&gt;
&lt;a href=&#34;https://blog.kalan.dev/posts/2022-01-23-infinite-alert-loop&#34;&gt;無限 alert 迴圈事件 - Kalan&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這件事發生在日本：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 2019 年三月，兵庫縣警以在電子留言板上放上有惡意程式碼的連結有不正指令電磁的記録供用未遂之疑，到女國中生家搜索，並搜查兩名男性後送檢。3/25，日本黑客協會開始募集兩名男性的律師費用及官司費用，總共募到了 553 人共 700 萬日圓的金額。 在同年 5/29 兩位男性以緩起訴處分，此案件沒有任何受害者。&lt;/p&gt;
&lt;p&gt;根據其中一位男性的說法，檢察官認為「對某些手機型號來說，一旦點擊連結後有可能沒辦法關閉畫面，或是需要拿去維修甚至是拜託專家，&lt;strong&gt;違反了電腦病毒罪當中的要件『反意圖性』&lt;/strong&gt;。」，對於「不正指令電磁的記録供用罪」的主張沒有改變。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;竟然違反了「不正指令電磁的記録供用罪」，究竟是怎樣的程式呢：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;window.alert&lt;/code&gt; 能夠接收指定的字串，並顯示一個具有 OK 按鈕的對話框。按下 OK 按鈕之後就能夠把對話框關閉。&lt;/p&gt;
&lt;p&gt;這個程式是無限迴圈，因此關閉對話框之後，又會再出現對話框，這個行為會持續到使用者關閉瀏覽器分頁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是這樣。還敢寫出無限彈跳窗啊 xD&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】人體系統優化指南</title>
      <link>https://igouist.github.io/repost/2024/03/0327-human-system-optimization/</link>
      <pubDate>Wed, 27 Mar 2024 23:29:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0327-human-system-optimization/</guid>
      <description>&lt;p&gt;今天頭超暈的，想說來貼個相關的文章(?)&lt;br/&gt;
&lt;a href=&#34;https://github.com/zijie0/HumanSystemOptimization&#34;&gt;人体系统调优不完全指南 (zijie0/HumanSystemOptimization) - Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇整理了要健健康康活下去(?)的一些相關知識，例如睡眠、飲食、動力、學習。&lt;/p&gt;
&lt;p&gt;並且每個小節都有原理說明和實踐方式。例如睡眠這一小節，就會先提到生物鐘、光照和體溫。接著列出該做的內容，像是起床需要先接觸陽光、晚上要減少光源接觸等等&lt;/p&gt;
&lt;p&gt;而心態和動力這節，就會提到我們 &lt;a href=&#34;https://igouist.github.io/repost/2024/03/0320-dopamine&#34;&gt;3/20 轉貼過的多巴胺&lt;/a&gt;、會影響的飲食，然後接到利用多巴胺的機制來提升自我等等&lt;/p&gt;
&lt;p&gt;文章整體有點長，但分小節看的話其實也蠻快的。對各個術語有興趣的話也可以再進一步搜尋，感覺還是挺不錯的，就轉貼上來給各位朋朋&lt;/p&gt;
&lt;p&gt;另外再補一篇相關閱讀（&lt;del&gt;方便我筆記關聯&lt;/del&gt;）：&lt;br/&gt;
&lt;a href=&#34;https://github.com/geekan/HowToLiveLonger&#34;&gt;geekan/HowToLiveLonger (程序员延寿指南) - Github&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】如何發想解決方案？</title>
      <link>https://igouist.github.io/repost/2024/03/0326-how-to-ideate-and-come-up-with-product-solutions/</link>
      <pubDate>Tue, 26 Mar 2024 21:41:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0326-how-to-ideate-and-come-up-with-product-solutions/</guid>
      <description>&lt;p&gt;前幾天丟了滿多篇文章到收件閘裡，今天就先從最有興趣的這篇開始讀起：&lt;br/&gt;
&lt;a href=&#34;https://medium.com/3pm-lab/how-to-ideate-and-come-up-with-product-solutions-573fa800a62d&#34;&gt;如何發想解決方案？產品團隊的創意思考流程！ - 3PM LAB 產品三眼怪實驗室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇一打開就看到熟悉的雙鑽石（上次看到還是在《柔型要術》的時候）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/6/65/Double_Diamond_by_the_Design_Council.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DISCOVER（發散）：透過使用者研究、市場研究來探索問題與機會&lt;/li&gt;
&lt;li&gt;DEFINE（聚焦）：根據前一步驟蒐集到的資訊來定義問題與場景，聚焦至一個待解決的問題&lt;/li&gt;
&lt;li&gt;DEVELOP（發散）：發想各種解決問題的方法、滿足使用者需求的手段&lt;/li&gt;
&lt;li&gt;DELIVER（聚焦）：製作 Prototype 並測試、進行實驗，透過使用者/市場的回饋推進與聚焦至我們最終想要推出的變動或功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;緊接著的這一小段我覺得很不錯，很有敏捷的 feel：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;發想解法的步驟並不是單一流程的「想出一個解法」，也不是「想出很多個解法，挑一個最棒的出來」，而是 &lt;strong&gt;「想出很多個解法，先挑一個我們認為最棒的出來，用很小的成本讓使用者測試，如果實驗成功就繼續發展；如果實驗失敗就從其他解法再挑下一個出來測試」&lt;/strong&gt; 這樣一個不斷迭代的過程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但要實驗各式各樣的想法，首先要先有夠多的解法。這篇文章介紹了幾種「好想法從何而來」的途徑，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;實務經驗累積：「累積的經驗愈多，每當遇到一個新問題，你可以延伸出來的子議題、思考方向、點子就愈多」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;產品和競品研究：「研究其他軟體產品、競爭對手的產品，學習與參考他們的解決方法，或是從類似用途的元素中找到發想的靈感」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創意發想的工具與框架：「透過一些創意發想的工具與框架，產出大量同時又充滿廣度的點子，能夠逼迫我們探索更多的可能性」&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在工具和框架這部份，這篇文章也分享了一些發想工具。例如心智圖、嘔吐法、丟出爛點子等等&lt;/p&gt;
&lt;p&gt;並且文內對每項工具都標上了使用情境和說明，有興趣的朋友可以看看。我個人則特別存了這段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下班就該下班了其實，但為什麼上班的時候想不出這些東西呢？&lt;/p&gt;
&lt;p&gt;之前上《Learning How To Learn》這個線上課程時，裡面提到了專注模式（Focused Mode）和發散模式（Diffuse Mode）這兩種腦袋的運作方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;專注模式：當我們集中注意力時，會用已知的方法、經驗來解決我們熟悉的問題&lt;/strong&gt;，一般來說上班、上課都是處在這個模式之下，思想會照著既定的迴路在走。如圖所見，大腦此時會集中在某一部分的神經區塊中工作，此外腦內組織起來的東西（類似釘子）也比較多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;發散模式：當我們注意力較分散的時候，腦內的釘子減少了、也變得不規則，思想可以移動的空間變大、範圍變廣、也較隨機&lt;/strong&gt;。這個模式適合在面對陌生問題時，幫助我們找到新的觀點，從更廣、更綜觀、更自由的角度去思考，也較有利於創意發想。&lt;/p&gt;
&lt;p&gt;我們的大腦同一時間只會處在其中一種模式中，因此學習如何有效的切換到不同模式，將有利於幫助自己用更有創造力的方式解決難題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是這樣，我要去開 Steam 發散一下了，明天見～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】Airtable: 簡單的需求用簡單的儲存工具</title>
      <link>https://igouist.github.io/repost/2024/03/0325-airtable/</link>
      <pubDate>Mon, 25 Mar 2024 23:26:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0325-airtable/</guid>
      <description>&lt;p&gt;今天也弄得挺晚才開工，還好今天有前輩發了一篇有趣的文：&lt;br/&gt;
&lt;a href=&#34;https://studyhost.blogspot.com/2024/03/airtable.html&#34;&gt;使用 Airtable 在小型需求上取代傳統資料庫 - .NET Walker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要讓我覺得有趣的是這一句話：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;傳統的關聯式資料庫，其實對於教育訓練和小型的專案來說，是一種負擔。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔細想想也蠻有道理，有時候我只是想示範一下某些工具簡單的操作，但只要想把東西存起來，就有種「好像該丟到資料庫？」的感覺&lt;/p&gt;
&lt;p&gt;但就像這篇說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你做一個小型專案或POC的話，『儲存』也往往不是重點，儲存只是『必要之惡』。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其實，若是從這個角度廣義的來說，軟體開發的GUI、資料庫，都只是細節(枝微末節)，都應該要是可以隨時被抽換或取代的部分，而非系統核心。&lt;/p&gt;
&lt;p&gt;一套軟體或解決方案的真正核心，是商業邏輯。它(商業邏輯)才是一個應用程式真正展現價值的部分。&lt;/p&gt;
&lt;p&gt;我們把主題拉回來。所以，我最近這幾年在上課的時候，盡量不讓範例程式碼涉及資料庫存取，特別是關聯式資料庫的存取。因為這對讀者或學員來說，變成了另一種必須學習的負擔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果只是做一個簡單的 POC，的確不該把重點放在儲存工具上。而在這篇文章裡，作者使用了簡單輕便的雲端工具 Airtable 來處理掉儲存體的部份&lt;/p&gt;
&lt;p&gt;Airtable 可以簡單地呼叫 REST API 來處理掉 CRUD 的操作，可以說是無腦開箱即用。&lt;br/&gt;（是不是也該來嘗試看看xD）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】讓數據幫你決策</title>
      <link>https://igouist.github.io/repost/2024/03/0323-let-data-guide-your-decision-making/</link>
      <pubDate>Sun, 24 Mar 2024 00:09:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0323-let-data-guide-your-decision-making/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://medium.com/3pm-lab/data-analytics-on-product-manager-decision-making-a8cce5f30122&#34;&gt;【PM 總動員】讓數據幫你決策：產品經理也懂的數據分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這邊文章把數據決策分析拆出四個步驟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1. 問題與指標拆解、訂定假設&lt;/li&gt;
&lt;li&gt;Step 2. 維度觀察與指標計算&lt;/li&gt;
&lt;li&gt;Step 3. 發現梳理與解讀&lt;/li&gt;
&lt;li&gt;Step 4. 資料呈現與視覺化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每個階段都有進一步的說明。例如在第一個步驟，我們開始前要問三個問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;問題與目標 (Question &amp;amp; Goal)：我想知道的問題是什麼? 目標是什麼?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假設 (Hypothesis)：我到底想看什麼樣的數據?是基於什麼觀察與假設？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行動 (Next Steps)：如果數據撈出來了，會怎麼影響我的下一步?分析完的決策可能是什麼?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;在第二步驟的指標計算裡，需要在第一步驟的「想看什麼樣的數據」時就進一步設想實際需要的數字。以文章內的電商背景為例，就像：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我想知道最近三個月中，每月成交次數都 ≥ 5 次的用戶 (=消費次數高的高頻用戶)，分別是買了哪些商品類型，不同性別的用戶人數有多少，而平均購買商品數又是多少?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當拿到資料並且確認沒問題之後，進入第三步驟，開始解讀。解讀的發現我看得是有點玄(?)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這很仰賴產品經理對用戶的理解、以及對產品與市場的敏銳度，其中也包含一部分的行動方針，但不管如何儘管大膽假設，之後再小心求證即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但除了這部份以外，整體的解讀方式「嘗試做圖進行分析、找出特徵，然後列出發現，和之前的假設互相比對…」這個流程解釋得很好理解。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果前面的步驟發現了好東西，就可以來搞第四步驟的資料呈現與視覺化。我覺得重點就在於示範前的這句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可視化與圖像化就是把「數據」變成「資訊」、成為輕鬆說服他人的有利工具，但不是把圖拉出來就好，而是&lt;strong&gt;思考怎麼樣的呈現能讓看的人不帶腦、一眼就看出重點，甚至是默默認同你想強調的論點&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上把這篇文章的流程簡化很多，文章內從一個範例背景開始走完四個步驟，過程中列出很多舉例和說明，讓讀者能夠迅速理解這四個步驟&lt;/p&gt;
&lt;p&gt;例如我在這邊文章就認識了決定使用者行為動機的模型「Fogg’s Behavior Model」：&lt;br/&gt;
&lt;strong&gt;&lt;code&gt;Behavior(行為) ＝ Motivation(動機) * Ability(能力) * Prompt(提示)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;感覺相當不錯，已收藏。也推薦有興趣的朋朋閱讀。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】如何面試一間公司</title>
      <link>https://igouist.github.io/repost/2024/03/0322-a-developer-s-guide-to-interviewing/</link>
      <pubDate>Fri, 22 Mar 2024 21:54:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0322-a-developer-s-guide-to-interviewing/</guid>
      <description>&lt;p&gt;今天閱讀效率有點不大行，決定來推薦一些實際幫助(?)的文章：&lt;br/&gt;
&lt;a href=&#34;https://blog.louie.lu/2017/04/30/%E9%96%8B%E7%99%BC%E4%BA%BA%E5%93%A1%E7%9A%84%E9%9D%A2%E8%A9%A6%E6%8C%87%E5%8D%97-a-developers-guide-to-interviewing/&#34;&gt;開發人員的面試指南 – A developer’s guide to interviewing - louie_lu&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇的內容非常直接：&lt;strong&gt;如何面試一間公司&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你有沒有過，當你在面試的時候，面試官坐在桌子對面，雙眼注視著問你：「你還有其他問題嗎？」，而你回眼回去並說：「umm, 大概沒有了」。如果這曾經發生在你身上，你有很大的機率得到了一個單一面向的面試經驗。&lt;/p&gt;
&lt;p&gt;作為一個應試者，可以想見你把目標放在一件事情上：取得工作職缺。但是別忘記，面試並不是一個單向的工作。&lt;strong&gt;如同面試官在面試你，你也必須要面試公司。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不過，你需要問他們什麼呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;首先我們要先搞清楚：我們對話的對象是誰？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根據對象是軟體工程師 or 管理階層 or 公司領導，這篇文章準備不同的問題，並且每個問題都有簡單直接的描述來幫助你了解&lt;/strong&gt;，有些還有延伸問題或判斷標準&lt;/p&gt;
&lt;p&gt;例如對軟體工程師的問題，其中一題是：「你喜歡在這邊工作嗎？」，而根據回答分成了強指標跟弱指標：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;強指標：我從我的工作中獲得許多成就。&lt;br/&gt;
強指標：我們的工作很有趣。&lt;br/&gt;
（略）&lt;br/&gt;
弱指標：他付我薪水。&lt;br/&gt;
弱指標：這裡沒有太大的壓力來提交成果。&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我最驚訝的是這點：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要以為我在虎爛，我真的在面試時聽過這些答案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;一些奇怪的面試回憶突然湧現&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;當然，針對開發人員也有像是「你們寫單元測試嗎？」「你們有持續整合嗎？」的這些題目（及延伸題目，例如執行時間）&lt;/p&gt;
&lt;p&gt;有幾個問題還是我真沒想過的，例如「你的下一個 deadline 在什麼時候？誰設定這個 deadline？」&lt;/p&gt;
&lt;p&gt;或是問管理階層「你手下的工程師如何得知每日該做什麼？」來比對開發人員回答的答案（這算一種分開訊問嗎？）&lt;/p&gt;
&lt;p&gt;如果最近有在面試，也許可以參考看看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【每天推薦一篇文章】貧血模型與充血模型</title>
      <link>https://igouist.github.io/repost/2024/03/0321-anemic-domain-model/</link>
      <pubDate>Thu, 21 Mar 2024 23:16:00 +0800</pubDate>
      
      <guid>https://igouist.github.io/repost/2024/03/0321-anemic-domain-model/</guid>
      <description>&lt;p&gt;今天剛好跟同事聊到充血模型的概念，決定轉貼小朱大的這篇，順手收進我的筆記庫：&lt;br/&gt;
&lt;a href=&#34;https://dotblogs.com.tw/regionbbs/2021/05/29/anemicdomainmodel&#34;&gt;這裡貧血、那裡充血，到底資料模型要怎麼設計？ - 小朱® 的技術隨手寫&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先我們先看一下貧血模型的部份，比較常見的應該就是單純放一下資料用的 DTO（Data Transfer Object）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;貧血模型之所以為貧血，其最大原因是，&lt;strong&gt;不論是 DTO 或是 POCO，它的業務邏輯都操控在別人手上，自己沒辦法去維護自己的業務規則&lt;/strong&gt;，以上面 DTO 或 POCO 作為例子，它們都沒有內建的處理存款與提款的程式碼，都要倚賴外部程式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;當業務邏輯只能由別人處理時，相對的就破壞了這個領域知識的內聚力，也提高了向外的耦合性，而且它並沒有辦法自我處理自己的領域知識，在後續系統的擴充與延長時，若與別人共用這個模型時，別人也一樣要實作這類領域知識，從而發生領域知識不一致的可能，導致系統設計的風險。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此，若系統內的業務邏輯、流程或知識會有共用的可能性時，就應該要考慮以領域模型的方式設計，而不是使用 DTO 或 POCO 的設計作法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;而相對的，充血模型則是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所謂的充血模型，只是大家在學校學過物件導向程式設計中，具有足夠內聚力的類別而己，但用一個新名詞來講，一個平凡無奇的概念突然瞬間高大上了起來。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一個充血模型，封裝 (Encapsulation) 的特性會十分明顯，它該有的資料就是它自己維護，外部想要對這個模型的資料做異動，就只能使用它所開放的方法 API 執行&lt;/strong&gt;…這不就教科書上說的嗎？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在最後一段，小朱大有列出這兩種模型適用的時機。&lt;/p&gt;
&lt;p&gt;例如說，應用程式很小、資料單純的時候，就可以考慮貧血模型；而如果某些領域知識會需要重複使用的時候，就可以考慮充血模型等等，有興趣的朋友可以再點進去參考一下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;之前在維護三層式的專案時，各層之間都是用 DTO 來傳遞資料。就像工廠流水線一樣，到了某一段就把資料倒出來處理處理，然後塞到另一個 DTO 傳到下一站。&lt;/p&gt;
&lt;p&gt;後來到了現在的公司，才接觸到貧血充血這些名詞。但想想物件會動(?)好像也是理所當然的…吧？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>reposts-archives</title>
      <link>https://igouist.github.io/repost/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://igouist.github.io/repost/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>